{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FastAPI Project Documentation","text":"<p>Welcome to the FastAPI Project documentation. This GitBook-style documentation site contains the README files from all repositories in the project, automatically synchronized and updated.</p>"},{"location":"#project-repositories","title":"Project Repositories","text":"Repository Description App Repository The main application code with FastAPI backend and React frontend Release Repository Release management and deployment with Kubernetes and Argo CD Infrastructure Repository Infrastructure as code with Terraform"},{"location":"#system-architecture","title":"System Architecture","text":"<pre><code>graph TD\n    A[Frontend - React] --&gt; B[Backend - FastAPI]\n    B --&gt; C[Database - PostgreSQL]\n    D[CI/CD Pipeline] --&gt; E[GitHub Container Registry]\n    E --&gt; F[Kubernetes Cluster]\n    F --&gt; G[ArgoCD]\n    G --&gt; H[Application Deployment]</code></pre>"},{"location":"#about-this-documentation","title":"About This Documentation","text":"<p>This documentation is automatically synchronized from the README files in each repository. When a README is updated in any of the source repositories, it is automatically updated here and published as a GitBook-style site.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Centralized Documentation: All project README files in one place</li> <li>Automatic Synchronization: Changes in source repositories are reflected here</li> <li>GitBook-Style Navigation: Easy-to-use navigation and search</li> <li>Mermaid Diagrams: Visual representation of architecture and workflows</li> <li>Code Highlighting: Syntax highlighting for code snippets</li> <li>Mobile-Friendly: Responsive design for all devices</li> </ul>"},{"location":"app/","title":"Overview","text":""},{"location":"app/#devops-demo-application","title":"DevOps Demo Application","text":"<p>This repository contains a modern full-stack application with a FastAPI backend and React frontend, featuring a comprehensive CI/CD pipeline for AWS deployment. The application demonstrates best practices for DevOps workflows, including automated testing, continuous integration, and continuous deployment.</p>"},{"location":"app/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Architecture Overview</li> <li>Development Environment Setup</li> <li>Makefile for Local Setup</li> <li>Docker-based Development</li> <li>Local Development</li> <li>Development Workflow</li> <li>CI/CD Pipeline (Automated release process)</li> <li>Documentation</li> <li>Environment Configuration</li> <li>Testing</li> <li>Troubleshooting</li> <li>Version Management</li> </ul>"},{"location":"app/#development-environment-setup","title":"Development Environment Setup","text":"<p>After cloning the repository, run the following command to set up git hooks and merge drivers:</p> <pre><code>./scripts/setup-git-hooks.sh\n</code></pre> <p>This ensures that version files are merged correctly during git operations and prevents merge conflicts.</p>"},{"location":"app/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TD\n    A[Frontend - React/TypeScript] --&gt; G[Traefik Reverse Proxy]\n    G --&gt; B[Backend - FastAPI]\n    B --&gt; C[(PostgreSQL Database)]\n    D[CI/CD - GitHub Actions] --&gt; E[GitHub Container Registry]\n\n```mermaid\ngraph TD\n    A[Frontend - React/TypeScript] --&gt; G[Traefik Reverse Proxy]\n    G --&gt; B[Backend - FastAPI]\n    B --&gt; C[(PostgreSQL Database)]\n    D[CI/CD - GitHub Actions] --&gt; E[GitHub Container Registry]\n    E --&gt; F[Deployment Environment]</code></pre> <ul> <li>Frontend: React, TypeScript, TanStack Query, Chakra UI</li> <li>Backend: FastAPI, SQLModel, Pydantic</li> <li>Database: PostgreSQL</li> <li>Infrastructure: Docker, Traefik, GitHub Container Registry (GHCR)</li> <li>CI/CD: GitHub Actions</li> <li>Build Tools: pnpm, Biome, UV (Python package manager)</li> </ul>"},{"location":"app/#development-environment-setup_1","title":"Development Environment Setup","text":""},{"location":"app/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker and Docker Compose</li> <li>Python (3.11+)</li> <li>UV for Python package management</li> <li>Git</li> <li>pnpm for efficient package management and faster builds</li> </ul>"},{"location":"app/#initial-setup","title":"Initial Setup","text":"<ol> <li>Clone the repository</li> </ol> <pre><code>git clone https://github.com/yourusername/fastAPI-project-app.git\ncd fastAPI-project-app\n</code></pre> <ol> <li>Use the Makefile for setup</li> </ol> <pre><code># Setup the project (create .env, install dependencies)\nmake setup\n</code></pre> <p>Or manually:</p> <pre><code># Generate a secure .env file from .env.example\nmake env\n# Or manually: cp .env.example .env\n# Edit .env with your preferred settings\n</code></pre> <ol> <li>Install git hooks with pre-commit</li> </ol> <pre><code>pip install pre-commit\npre-commit install --hook-type pre-commit --hook-type commit-msg --hook-type pre-push\n</code></pre> <p>This will set up git hooks to automatically format code, run linting checks, and ensure code quality on commit.</p>"},{"location":"app/#makefile-the-central-interface-for-all-project-tasks","title":"Makefile - The Central Interface for All Project Tasks","text":"<p>The Makefile is the primary and recommended way to interact with this project throughout its entire lifecycle. From initial setup and development to testing, deployment, and maintenance, all operations should be performed using the Makefile commands for consistency and efficiency.</p> <p>All team members should use these commands rather than running individual tools directly to ensure everyone follows the same workflows and processes:</p> <pre><code># Show available commands\nmake help\n\n# Setup the project (create .env, install dependencies)\nmake setup\n\n# Start Docker containers with pnpm\nmake up\n\n# Initialize the database (create tables and first superuser)\nmake init-db\n\n# Stop Docker containers\nmake down\n\n# Restart Docker containers\nmake restart\n\n# Run all tests\nmake test\n\n# Create a new feature branch\nmake feat name=branch-name\n\n# Create a new fix branch\nmake fix name=branch-name\n\n# Create a new fix branch with automerge\nmake fix-automerge name=branch-name\n</code></pre>"},{"location":"app/#database-initialization","title":"Database Initialization","text":"<p>The application automatically initializes the database when the backend container starts, creating all necessary tables and the first superuser account. This process is handled by the prestart script that runs before the FastAPI application starts.</p> <p>If you need to manually initialize or reset the database, you can use:</p> <pre><code># Initialize the database (create tables and first superuser)\nmake init-db\n</code></pre>"},{"location":"app/#default-login-credentials","title":"Default Login Credentials","text":"<p>After initialization, you can log in with:</p> <ul> <li>Email: admin@example.com</li> <li>Password: The value of <code>FIRST_SUPERUSER_PASSWORD</code> in your <code>.env</code> file</li> </ul>"},{"location":"app/#fast-build-system-pnpm-traefik-uv","title":"Fast Build System (pnpm + Traefik + UV)","text":"<p>This project uses a modern, high-performance build system:</p> <ul> <li>pnpm: For efficient package management with disk space optimization and faster builds</li> <li>Traefik: For efficient reverse proxy and routing</li> <li>UV: For optimized Python package management with dependency groups</li> </ul> <p>All build operations are handled through Docker and the Makefile for consistency.</p>"},{"location":"app/#docker-based-development","title":"Docker-based Development","text":"<p>The easiest way to get started is using our optimized Docker Compose setup, which configures all services including the frontend, backend, and database.</p>"},{"location":"app/#starting-the-environment","title":"Starting the Environment","text":"<pre><code># Using Makefile (recommended)\nmake up\n\n# Or directly with Docker Compose\ndocker compose up -d\n</code></pre>"},{"location":"app/#accessing-services","title":"Accessing Services","text":"<ul> <li>Frontend: http://dashboard.localhost</li> <li>Backend API: http://api.localhost</li> <li>API Documentation: http://api.localhost/docs</li> <li>API ReDoc: http://api.localhost/redoc</li> <li>API OpenAPI Schema: http://api.localhost/openapi.json</li> <li>Traefik Dashboard: http://localhost:8080</li> </ul>"},{"location":"app/#default-login-credentials_1","title":"Default Login Credentials","text":"<p>After initialization, you can log in with:</p> <ul> <li>Email: admin@example.com</li> <li>Password: The value of <code>FIRST_SUPERUSER_PASSWORD</code> in your <code>.env</code> file</li> </ul>"},{"location":"app/#viewing-logs","title":"Viewing Logs","text":"<pre><code># All services\ndocker compose logs -f\n\n# Specific service\ndocker compose logs -f backend\n</code></pre>"},{"location":"app/#rebuilding-services","title":"Rebuilding Services","text":"<pre><code># After code changes\ndocker compose up -d --build\n\n# Restart all services\nmake restart\n</code></pre>"},{"location":"app/#development-workflow","title":"Development Workflow","text":"<p>All development must be done using the Makefile commands for consistency across environments. The Makefile abstracts away the complexity of individual tools and provides a standardized interface for all development tasks, ensuring that everyone follows the same processes regardless of their local setup.</p>"},{"location":"app/#branching-strategy","title":"Branching Strategy","text":"<p>This project follows a structured branching strategy to ensure code quality and streamline the development process:</p> <ol> <li>Main Branch (<code>main</code>)</li> <li>Production-ready code only</li> <li>Protected from direct pushes</li> <li>Changes only accepted through PRs from the <code>stg</code> branch</li> <li> <p>Triggers production builds and deployments</p> </li> <li> <p>Staging Branch (<code>stg</code>)</p> </li> <li>Integration branch for features and fixes</li> <li>Protected from direct pushes</li> <li>Changes only accepted through PRs from feature/fix branches</li> <li> <p>Triggers staging deployments for testing</p> </li> <li> <p>Feature Branches (<code>feat/*</code>)</p> </li> <li>Created for new features or enhancements</li> <li>Branched from <code>stg</code></li> <li>First push automatically opens a PR to <code>stg</code></li> <li> <p>Requires passing all tests and code reviews</p> </li> <li> <p>Fix Branches (<code>fix/*</code>)</p> </li> <li>Created for bug fixes</li> <li>Branched from <code>stg</code></li> <li>First push automatically opens a PR to <code>stg</code></li> <li> <p>Can be marked for auto-merge by adding <code>automerge</code> suffix</p> </li> <li> <p>Workflow Automation</p> </li> <li>When a PR to <code>stg</code> is merged, a new PR to <code>main</code> is automatically created</li> <li>All branches are automatically deleted after successful merge</li> </ol> <p>Creating Branches:</p> <p>Always use the Makefile commands to create branches to ensure proper naming and setup:</p> <pre><code># Create a feature branch\nmake branch-create type=feat name=your-feature-name\n\n# Create a fix branch\nmake branch-create type=fix name=your-fix-name\n\n# Create a fix branch with auto-merge enabled\nmake branch-create type=fix name=your-fix-name automerge=true\n</code></pre>"},{"location":"app/#using-pnpm-and-uv-for-faster-builds","title":"Using pnpm and UV for Faster Builds","text":"<p>This project uses pnpm for frontend package management and UV for Python package management, significantly improving build times and reducing disk space usage:</p> <pre><code># Using Makefile (recommended)\nmake up  # Starts all services with pnpm and UV\n\n# Run pnpm commands through Makefile\nmake build  # Builds all workspaces (ensures containers are running)\nmake lint   # Runs linting across all workspaces\n\n# Run backend-specific tasks through Makefile\nmake test-backend  # Run backend tests\nmake backend-lint  # Run backend linting\n\n# Test login functionality\nmake check-login  # Verify API login works correctly\n</code></pre> <p>pnpm uses a content-addressable store for packages, making installations faster and more efficient. The node_modules are linked rather than copied, saving significant disk space. UV provides similar benefits for Python packages with its efficient dependency resolution and caching.</p>"},{"location":"app/#development-workflow_1","title":"Development Workflow","text":""},{"location":"app/#branch-strategy","title":"Branch Strategy","text":"<ol> <li> <p>Feature Branches (<code>feat/* || fix/*</code>)</p> </li> <li> <p>Create for new features or bug fixes</p> </li> <li>Must pass pre-commit hooks before pushing</li> <li>On push triggers:<ul> <li>Style checks (ruff, eslint, prettier)</li> <li>Security checks (bandit, npm audit)</li> <li>Linting &amp; formatting</li> <li>Unit tests</li> </ul> </li> <li> <p>Requires PR review to merge to <code>stg</code></p> </li> <li> <p>Staging Branch (<code>stg</code>)</p> </li> <li> <p>Integration branch for feature development</p> </li> <li>On push triggers:<ul> <li>Minimal test suite (unit, linting, security)</li> <li>Automatic staging deployment</li> </ul> </li> <li> <p>PR to <code>main</code> triggers:</p> <ul> <li>Full test suite (integration, e2e, API)</li> <li>Security scans</li> <li>Performance tests</li> <li>Documentation updates</li> <li>Changelog generation</li> </ul> </li> <li> <p>Main Branch (<code>main</code>)</p> </li> <li>Production-ready code</li> <li>Protected branch requiring PR approval</li> <li>On push/PR merge:<ul> <li>Complete test suite</li> <li>Security scans</li> <li>Dependency checks</li> </ul> </li> <li>Release tags trigger production deployment</li> </ol>"},{"location":"app/#creating-a-feature","title":"Creating a Feature","text":"<pre><code>git checkout stg\ngit pull\ngit checkout -b feat/your-feature-name\n# Make changes\ngit commit -m \"feat: add amazing feature\"\n# Create PR to stg branch\n</code></pre>"},{"location":"app/#testing-workflows-locally","title":"Testing Workflows Locally","text":"<p>You can test GitHub Actions workflows locally using the provided script:</p> <pre><code># Interactive mode - guides you through workflow selection\nnode scripts/test-workflow-selector.js\n\n# Test all workflows at once\nnode scripts/test-workflow-selector.js --all\n</code></pre> <p>In interactive mode, the script will guide you through selecting the workflow category, specific workflow file, and event type to test. Using the <code>--all</code> flag will test all workflows in all categories.</p> <p>Prerequisites: Before running workflow tests, you need to build the custom Docker image used for testing:</p> <pre><code># Build the workflow test Docker image\ndocker build -t local/workflow-test:latest -f .github/utils/Dockerfile.workflow-test .\n</code></pre>"},{"location":"app/#cicd-pipeline","title":"CI/CD Pipeline","text":"<p>Our CI/CD pipeline uses GitHub Actions for automation and GitHub Container Registry for image management. The actual deployment is handled by a separate infrastructure repository:</p> <pre><code>graph LR\n    A[Push to feat/* or fix/*] --&gt; B{Branch Checks}\n    B --&gt;|Pass| C{fix/*-automerge?}\n    C --&gt;|No| D[Auto-Create PR to stg]\n    C --&gt;|Yes| E[Auto-Merge to stg]\n    D --&gt; F{PR Checks}\n    F --&gt;|Pass| E\n    E --&gt; G[Auto-Create PR to main]\n    G --&gt; H{Main PR Checks}\n    H --&gt;|Pass| I[Create Release]\n    I --&gt; J[Parallel Image Builds]\n    J --&gt; K[Push to GHCR]\n    K --&gt; L[Trigger Helm Release]\n    L --&gt; M[ArgoCD Sync]\n    style K fill:#2496ED,stroke:#fff,stroke-width:2px\n    style M fill:#EF7B4D,stroke:#fff,stroke-width:2px</code></pre>"},{"location":"app/#optimized-build-pipeline","title":"Optimized Build Pipeline","text":"<p>Our build pipeline features several optimizations for faster builds and deployments:</p> <ul> <li>Parallel Image Building: Frontend and backend images are built simultaneously using GitHub Actions matrix strategy</li> <li>Component-Specific Caching: Each component has dedicated cache scopes for faster builds</li> <li>Semantic Versioning: Robust version handling across environments</li> <li>Automated Security Scanning: All images are scanned for vulnerabilities before deployment</li> <li>Image Verification: All built images are verified before deployment to ensure they exist and have the required labels</li> </ul>"},{"location":"app/#github-container-registry-ghcr-configuration","title":"GitHub Container Registry (GHCR) Configuration","text":"<p>We use GitHub Container Registry to store and manage our Docker images:</p> <ul> <li>Image Repository: <code>ghcr.io/datascientest-fastapi-project-group-25/fastapi-project-app</code></li> <li>Tagging Strategy:</li> <li>Feature branches: <code>ghcr.io/datascientest-fastapi-project-group-25/fastapi-project-app:feat-branch-name</code></li> <li>Fix branches: <code>ghcr.io/datascientest-fastapi-project-group-25/fastapi-project-app:fix-branch-name</code></li> <li>Staging branch: <code>ghcr.io/datascientest-fastapi-project-group-25/fastapi-project-app:stg-{hash}</code></li> <li>Main branch: <code>ghcr.io/datascientest-fastapi-project-group-25/fastapi-project-app:latest</code></li> <li>Versioned releases: <code>ghcr.io/datascientest-fastapi-project-group-25/fastapi-project-app:v1.2.3</code></li> </ul>"},{"location":"app/#authentication","title":"Authentication","text":"<p>The GitHub Actions workflows automatically authenticate with GHCR using the built-in <code>GITHUB_TOKEN</code> secret. For local development, you can authenticate using:</p> <pre><code># Login to GHCR\necho $GITHUB_TOKEN | docker login ghcr.io -u USERNAME --password-stdin\n\n# Pull an image\ndocker pull ghcr.io/datascientest-fastapi-project-group-25/fastapi-project-app:latest\n</code></pre>"},{"location":"app/#documentation","title":"Documentation","text":"<p>All project documentation is organized in the <code>docs/</code> directory for better maintainability:</p> <ul> <li>Development Guide - Setting up and running the application locally</li> <li>Deployment Guide - Deploying using GitHub Actions and GitHub Container Registry</li> <li>GitHub Actions Workflows - Overview and best practices for CI/CD workflows</li> <li>Git Hooks - Documentation for the pre-commit git hooks setup</li> <li>Release Notes - Comprehensive changelog of all project changes</li> <li>Version Management - How version management works and how to avoid merge conflicts</li> </ul> <p>Component-specific documentation can be found in the respective directories:</p> <ul> <li>Backend Documentation</li> <li>Frontend Documentation</li> </ul> <p>For a complete overview of all documentation, see the Documentation Index.</p>"},{"location":"app/#environment-configuration","title":"Environment Configuration","text":"<p>The application uses environment variables for configuration. A sample <code>.env.example</code> file is provided as a template.</p>"},{"location":"app/#important-environment-variables","title":"Important Environment Variables","text":"Variable Purpose Example <code>DOMAIN</code> Base domain for the application <code>localhost</code> <code>SECRET_KEY</code> Used for JWT token generation <code>your-secret-key</code> <code>BACKEND_CORS_ORIGINS</code> Configures CORS for the API <code>[\"http://localhost\"]</code> <code>POSTGRES_USER</code> Database username <code>postgres</code> <code>POSTGRES_PASSWORD</code> Database password <code>postgres</code> <code>POSTGRES_DB</code> Database name <code>app</code>"},{"location":"app/#subdomain-based-routing","title":"Subdomain-based Routing","text":"<p>For local development, the application uses subdomain-based routing:</p> <ul> <li><code>api.localhost</code> - Backend API</li> <li><code>dashboard.localhost</code> - Frontend dashboard</li> <li><code>adminer.localhost</code> - Database administration</li> </ul> <p>To enable this on your local machine, add these entries to your hosts file:</p> <pre><code>127.0.0.1 api.localhost\n127.0.0.1 dashboard.localhost\n127.0.0.1 adminer.localhost\n</code></pre>"},{"location":"app/#testing","title":"Testing","text":"<p>All testing should be performed using the Makefile commands to ensure consistent test environments and configurations. The Makefile provides a unified interface for running all types of tests, from unit tests to GitHub Actions workflow tests.</p>"},{"location":"app/#running-tests-with-makefile-recommended","title":"Running Tests with Makefile (Recommended)","text":"<pre><code># Run all tests\nmake test\n\n# Run backend tests only\nmake test-backend\n\n# Run frontend tests only\nmake test-frontend\n\n# Run end-to-end tests\nmake test-e2e\n\n# Test GitHub Actions workflows locally\nmake act-test-main         # Test main-branch.yml workflow\nmake act-test-protection   # Test branch-protection.yml workflow\nmake act-test-all          # Test all workflows\nmake act-test-dry-run      # Dry run of workflows (no execution)\n</code></pre>"},{"location":"app/#manual-testing-not-recommended","title":"Manual Testing (Not Recommended)","text":"<p>If you must run tests manually (not recommended):</p> <pre><code># Backend Tests\ncd backend\nsource .venv/bin/activate\npytest\n\n# Frontend Tests\ncd frontend\nnpm test\n\n# End-to-End Tests\ncd frontend\nnpm run test:e2e\n</code></pre>"},{"location":"app/#troubleshooting","title":"Troubleshooting","text":""},{"location":"app/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Docker Compose Network Issues</p> </li> <li> <p>Restart Docker: <code>docker compose down &amp;&amp; docker compose up -d</code></p> </li> <li> <p>Database Connection Failures</p> </li> <li> <p>Check database credentials in <code>.env</code></p> </li> <li> <p>Ensure PostgreSQL service is running: <code>docker compose ps</code></p> </li> <li> <p>Frontend API Connection Issues</p> </li> <li> <p>Verify CORS settings in <code>.env</code></p> </li> <li> <p>Check API URL configuration in frontend</p> </li> <li> <p>Login Issues</p> </li> <li> <p>If you can't log in, ensure the database is properly initialized: <code>make init-db</code></p> </li> <li>Default login credentials are:<ul> <li>Email: admin@example.com</li> <li>Password: Check your <code>.env</code> file for FIRST_SUPERUSER_PASSWORD</li> </ul> </li> <li>If login still fails, check the backend logs: <code>docker compose logs backend</code></li> <li> <p>For a complete database reset: <code>docker compose down -v &amp;&amp; make up &amp;&amp; make init-db</code></p> </li> <li> <p>Security Best Practices:</p> </li> <li>Never commit <code>.env</code> files to version control</li> <li>Use strong, unique passwords for all credentials</li> <li>Rotate secrets regularly in production environments</li> <li>Use different credentials for development, staging, and production</li> </ol>"},{"location":"app/#subdomain-based-routing_1","title":"Subdomain-Based Routing","text":"<p>The application uses a subdomain-based routing approach for different services:</p> <ol> <li> <p>Local Development:</p> </li> <li> <p>API: http://api.localhost</p> </li> <li>Frontend: http://dashboard.localhost</li> <li>API Docs: http://api.localhost/docs</li> <li>API ReDoc: http://api.localhost/redoc</li> <li> <p>Adminer: http://db.localhost</p> </li> <li> <p>Configuration:</p> </li> <li> <p>The routing is handled by Traefik reverse proxy</p> </li> <li>Local development uses Traefik with appropriate hosts file entries</li> <li> <p>CORS is configured in Traefik to allow cross-subdomain communication</p> </li> <li> <p>Startup Information:</p> </li> </ol> <p>When you run <code>docker compose up</code>, you'll see:</p> <ul> <li>Application URLs for all services</li> <li>Default login credentials</li> <li>Database initialization status</li> <li>Health status of all components</li> </ul> <p>If you want to run the application in detached mode, use <code>docker compose up -d</code>.</p> <ul> <li> <p>than you can see the startup information in the logs <code>docker compose logs app-status</code></p> </li> <li> <p>Adding a Host Entry (Local Development):    <pre><code># Add to /etc/hosts\n127.0.0.1 api.localhost dashboard.localhost db.localhost\n</code></pre></p> </li> </ul>"},{"location":"app/#version-management","title":"Version Management","text":"<p>This repository uses semantic versioning (SemVer) for managing versions. The version is stored in two places:</p> <ol> <li>VERSION file: Used for Docker image tagging and Helm chart versioning</li> <li>package.json: Used for npm package versioning and semantic-release</li> </ol> <p>The version is automatically bumped based on the type of changes being made:</p> <ul> <li>Major version (X.0.0): Breaking changes (branches with \"breaking\" or \"!\" in the name)</li> <li>Minor version (0.X.0): New features (branches starting with \"feat/\")</li> <li>Patch version (0.0.X): Bug fixes and other changes (branches starting with \"fix/\")</li> </ul>"},{"location":"app/#automatic-version-bumping","title":"Automatic Version Bumping","text":"<p>Version bumping happens automatically at two points in the workflow:</p> <ol> <li>When opening a PR to the <code>stg</code> branch:</li> <li>The VERSION file is bumped based on the branch name</li> <li>package.json is synchronized with the VERSION file</li> <li> <p>The PR title is updated to include the new version</p> </li> <li> <p>When merging a PR to the <code>main</code> branch (except for stg \u2192 main PRs):</p> </li> <li>package.json is bumped based on the branch name</li> <li>VERSION file is synchronized with package.json</li> <li>A GitHub Release is created with the new version</li> </ol>"},{"location":"app/#automatic-conflict-resolution","title":"Automatic Conflict Resolution","text":"<p>To avoid merge conflicts in the VERSION file, we've implemented a custom Git merge driver that automatically resolves conflicts by keeping the higher version number.</p> <p>For more detailed information about version management, see the Version Management Documentation.</p>"},{"location":"app/#contributing","title":"Contributing","text":"<ol> <li>Fork the repository</li> <li>Create your feature branch (<code>git checkout -b feat/amazing-feature</code>)</li> <li>Commit your changes (<code>git commit -m 'feat: add amazing feature'</code>)</li> <li>Push to the branch (<code>git push origin feat/amazing-feature</code>)</li> <li>Open a Pull Request to the <code>stg</code> branch</li> </ol>"},{"location":"app/#project-structure","title":"Project Structure","text":""},{"location":"app/#trigger-build-sat-apr-21-213000-cest-2024","title":"Trigger build Sat Apr 21 21:30:00 CEST 2024","text":""},{"location":"app/#e2e-workflow-test-tue-apr-22-095659-cest-2025","title":"E2E Workflow Test - Tue Apr 22 09:56:59 CEST 2025","text":""},{"location":"app/#e2e-workflow-test-second-attempt-tue-apr-22-102123-cest-2025","title":"E2E Workflow Test - Second attempt - Tue Apr 22 10:21:23 CEST 2025","text":""},{"location":"app/BRANCHING_STRATEGY/","title":"Updated Branching Strategy","text":""},{"location":"app/BRANCHING_STRATEGY/#workflow-overview","title":"Workflow Overview","text":"<pre><code>graph TD\n    A[feat/*] --&gt;|Auto-PR| B(dev)\n    C[fix/*] --&gt;|Auto-PR| B\n    B --&gt;|Manual PR| D[main]\n\n    D --&gt;|Production| E[ghcr.io/org/repo:version]\n    D --&gt;|Latest| F[ghcr.io/org/repo:latest]\n    B --&gt;|Staging| G[ghcr.io/org/repo:version-stg]\n    B --&gt;|Staging Latest| H[ghcr.io/org/repo:latest-stg]\n    A --&gt;|Feature| I[ghcr.io/org/repo:commit-sha]\n    C --&gt;|Fix| I</code></pre> <ol> <li>Main Branch (<code>main</code>):</li> <li>Production-ready code</li> <li>Protected - no direct pushes</li> <li>Only accepts PRs from <code>dev</code> branch</li> <li> <p>Merge triggers:</p> <ul> <li>Production image build (ghcr.io/org/repo:version)</li> <li>Latest tag update (ghcr.io/org/repo:latest)</li> <li>Version tag (semver)</li> </ul> </li> <li> <p>Development Branch (<code>dev</code>):</p> </li> <li>Staging environment</li> <li>Accepts PRs from <code>feat/*</code> and <code>fix/*</code> branches</li> <li> <p>Merge triggers:</p> <ul> <li>Staging image build (ghcr.io/org/repo:version-stg)</li> <li>Auto-PR creation to <code>main</code></li> </ul> </li> <li> <p>Feature Branches (<code>feat/*</code>):</p> </li> <li>Created from <code>dev</code> branch</li> <li>Push triggers:<ul> <li>Auto-PR to <code>dev</code></li> <li>CI tests</li> </ul> </li> <li> <p>Naming: <code>feat/description</code> (e.g., <code>feat/user-auth</code>)</p> </li> <li> <p>Fix Branches (<code>fix/*</code>):</p> </li> <li>Created from <code>dev</code> branch</li> <li>Push triggers:<ul> <li>Auto-PR to <code>dev</code></li> <li>CI tests</li> </ul> </li> <li>Can use <code>-automerge</code> suffix for critical fixes</li> <li>Naming: <code>fix/description</code> (e.g., <code>fix/login-bug</code>)</li> </ol>"},{"location":"app/BRANCHING_STRATEGY/#image-tagging-strategy","title":"Image Tagging Strategy","text":"Branch Type Image Tag Format Registry Location feat/fix :commit-sha ghcr.io/org/repo dev :version-stg ghcr.io/org/repo main :version + :latest ghcr.io/org/repo"},{"location":"app/BRANCHING_STRATEGY/#implementation-requirements","title":"Implementation Requirements","text":"<ol> <li>GitHub Actions:</li> <li>Auto-PR creation on push</li> <li>Image building/pushing</li> <li>Version tagging</li> <li> <p>Status checks</p> </li> <li> <p>Branch Protection:</p> </li> <li><code>main</code>: Require PR, status checks, review</li> <li><code>dev</code>: Require PR, status checks</li> <li> <p><code>feat/fix</code>: Require status checks</p> </li> <li> <p>Scripts:</p> </li> <li>Updated <code>create-branch.js</code> to enforce naming</li> <li> <p>Pre-push hooks to prevent direct pushes to protected branches</p> </li> <li> <p>Version Management:</p> </li> <li>Semantic versioning</li> <li>Automated changelog generation</li> <li>Release notes</li> </ol>"},{"location":"app/BRANCHING_STRATEGY/#setup-instructions","title":"Setup Instructions","text":"<pre><code># Install dependencies\npnpm install\n\n# Setup Git hooks\npre-commit install --hook-type pre-commit --hook-type commit-msg --hook-type pre-push\n</code></pre>"},{"location":"app/BRANCHING_STRATEGY/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Always create branches using the interactive tool:    <pre><code>node scripts/create-branch.js\n</code></pre></p> </li> <li> <p>Keep branches focused and short-lived</p> </li> <li> <p>Use meaningful, descriptive branch names</p> </li> <li> <p>Regularly sync with upstream dev branch</p> </li> </ol>"},{"location":"app/CHANGELOG/","title":"Changelog","text":""},{"location":"app/CHANGELOG/#test-update","title":"Test Update","text":"<ul> <li>Initial commit by Test User on 2025-03-25</li> <li>Add test feature by Test User on 2025-03-25</li> </ul>"},{"location":"app/ci-cd-workflow/","title":"CI/CD Workflow","text":"<p>This document describes the CI/CD workflow implemented in this project.</p>"},{"location":"app/ci-cd-workflow/#overview","title":"Overview","text":"<p>The CI/CD pipeline automates the following process:</p> <ol> <li>Feature branch -&gt; Auto PR creation to staging</li> <li>PR checks (tests, linting, formatting, security)</li> <li>Merge to staging -&gt; Build and tag Docker images</li> <li>Auto PR creation from staging to main</li> <li>Merge to main -&gt; Retag images with semantic versioning</li> </ol>"},{"location":"app/ci-cd-workflow/#workflow-details","title":"Workflow Details","text":""},{"location":"app/ci-cd-workflow/#1-feature-branch-development","title":"1. Feature Branch Development","text":"<ul> <li>Create a feature branch with prefix <code>feat/</code> or a fix branch with prefix <code>fix/</code></li> <li>Push changes to the branch</li> <li>GitHub Actions automatically creates a PR to the <code>stg</code> branch</li> </ul>"},{"location":"app/ci-cd-workflow/#2-pr-checks","title":"2. PR Checks","text":"<p>When a PR is created to the <code>stg</code> branch, the following checks are run: - Linting - Formatting - Security scanning - Tests (backend and frontend)</p>"},{"location":"app/ci-cd-workflow/#3-merge-to-staging","title":"3. Merge to Staging","text":"<p>When a PR is merged to the <code>stg</code> branch: - Docker images are built for both backend and frontend - Images are tagged with:   - Git hash and branch type: <code>ghcr.io/repo-name-backend:&lt;git-hash&gt;-&lt;branch-type&gt;</code>   - Staging tag: <code>ghcr.io/repo-name-backend:stg</code> - Images are pushed to GitHub Container Registry (GHCR) - A PR is automatically created from <code>stg</code> to <code>main</code> - The feature branch is deleted</p>"},{"location":"app/ci-cd-workflow/#4-merge-to-main","title":"4. Merge to Main","text":"<p>When a PR is merged to the <code>main</code> branch: - The staging images are pulled - Images are retagged with:   - Semantic version (based on branch type):     - <code>feat/</code> branches trigger a minor version bump (0.1.0 -&gt; 0.2.0)     - <code>fix/</code> branches trigger a patch version bump (0.1.0 -&gt; 0.1.1)   - Latest tag: <code>ghcr.io/repo-name-backend:latest</code> - The VERSION file is updated with the new version - A comment is added to the PR with the new version and image details</p>"},{"location":"app/ci-cd-workflow/#semantic-versioning","title":"Semantic Versioning","text":"<p>The project follows semantic versioning (MAJOR.MINOR.PATCH): - MAJOR: Breaking changes (manually incremented) - MINOR: New features (automatically incremented for <code>feat/</code> branches) - PATCH: Bug fixes (automatically incremented for <code>fix/</code> branches)</p>"},{"location":"app/ci-cd-workflow/#testing-the-workflow-locally","title":"Testing the Workflow Locally","text":"<p>You can test the CI/CD workflow locally using the following command:</p> <pre><code>make test-ci-workflow\n</code></pre> <p>Or test a specific workflow:</p> <pre><code>./scripts/test-ci-workflow.sh -w feature-branch-pr.yml -e push -b feat/my-feature\n</code></pre>"},{"location":"app/ci-cd-workflow/#workflow-files","title":"Workflow Files","text":"<ul> <li><code>.github/workflows/feature-branch-pr.yml</code>: Creates PRs from feature branches to staging</li> <li><code>.github/workflows/pr-checks.yml</code>: Runs checks on PRs to staging</li> <li><code>.github/workflows/merge-to-staging.yml</code>: Builds and pushes images when PRs are merged to staging</li> <li><code>.github/workflows/merge-to-main.yml</code>: Retags images when PRs are merged to main</li> </ul>"},{"location":"app/git-hooks/","title":"Git Hooks with pre-commit","text":"<p>This project uses pre-commit to manage Git hooks for code quality enforcement.</p>"},{"location":"app/git-hooks/#what-is-pre-commit","title":"What is pre-commit?","text":"<p>pre-commit is a framework for managing and maintaining multi-language pre-commit hooks. It helps maintain code quality by running checks before commits and pushes, ensuring consistent code quality across the project.</p>"},{"location":"app/git-hooks/#features","title":"Features","text":"<p>Our pre-commit configuration provides:</p> <ul> <li> <p>Pre-commit hooks:</p> </li> <li> <p>Code formatting with Black</p> </li> <li>Linting and auto-fixing with Ruff</li> <li>Security scanning with Bandit</li> <li>Trailing whitespace removal</li> <li>YAML validation</li> <li> <p>Merge conflict detection</p> </li> <li> <p>Pre-push hooks:</p> </li> <li> <p>Running tests with pytest</p> </li> <li> <p>Commit message validation:</p> </li> <li>Enforcing conventional commit format</li> </ul>"},{"location":"app/git-hooks/#setup","title":"Setup","text":"<p>To set up pre-commit in your development environment:</p> <pre><code># Make the setup script executable\nchmod +x scripts/setup-precommit.sh\n\n# Run the setup script\n./scripts/setup-precommit.sh\n\n# Or install directly\npip install pre-commit\npre-commit install --hook-type pre-commit --hook-type commit-msg --hook-type pre-push\n</code></pre>"},{"location":"app/git-hooks/#manual-usage","title":"Manual Usage","text":"<p>You can manually run the hooks:</p> <pre><code># Run all pre-commit hooks\npre-commit run --all-files\n\n# Run all pre-push hooks\npre-commit run --hook-stage pre-push --all-files\n\n# Run a specific hook\npre-commit run black --all-files\n</code></pre>"},{"location":"app/git-hooks/#configuration","title":"Configuration","text":"<p>The pre-commit configuration is stored in <code>.pre-commit-config.yaml</code> at the root of the project. You can modify this file to add, remove, or customize hooks.</p>"},{"location":"app/git-hooks/#skipping-hooks","title":"Skipping Hooks","text":"<p>In rare cases when you need to bypass the hooks:</p> <pre><code># Skip all hooks for a commit\ngit commit --no-verify -m \"Your message\"\n\n# Skip specific hooks\nSKIP=black,ruff git commit -m \"Your message\"\n</code></pre> <p>Note: Skipping hooks should be done only in exceptional circumstances, as it bypasses important code quality checks.</p>"},{"location":"app/release-notes/","title":"Release Notes","text":""},{"location":"app/release-notes/#latest-changes","title":"Latest Changes","text":""},{"location":"app/release-notes/#features","title":"Features","text":"<ul> <li> <p>\u2728 Add development workflow automation. PR #2.</p> </li> <li> <p>Add interactive CLI for feature branch creation (<code>scripts/feature.sh</code>)</p> </li> <li>Implement automatic PR creation for feature branches</li> <li> <p>Add commit history to auto-generated PRs</p> </li> <li> <p>\u2728 Add comprehensive development workflow strategy. PR #1.</p> </li> <li>Implement branch strategy (feat/*, dev, main)</li> <li>Add pre-commit hooks for code quality</li> <li>Set up automated testing and deployment pipelines</li> <li>Document development guidelines</li> </ul>"},{"location":"app/release-notes/#infrastructure","title":"Infrastructure","text":"<ul> <li>\ud83d\udd27 Update pre-commit configuration with comprehensive checks:</li> <li>Style checks (black, flake8, eslint, prettier)</li> <li>Security checks (bandit, safety, npm audit)</li> <li>Linting &amp; formatting for both backend and frontend</li> </ul>"},{"location":"app/release-notes/#documentation","title":"Documentation","text":"<ul> <li>\ud83d\udcdd Add detailed development workflow documentation</li> <li>\ud83d\udcdd Add PR template for consistent reviews</li> <li>\ud83d\udcdd Update README with comprehensive development guidelines</li> </ul>"},{"location":"app/release-notes/#fixes","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix required password validation when editing user fields. PR #1508 by @jpizquierdo.</li> </ul>"},{"location":"app/release-notes/#refactors","title":"Refactors","text":"<ul> <li>\ud83c\udfa8 Add minor UI tweaks in Skeletons and other components. PR #1507 by @alejsdev.</li> <li>\ud83c\udfa8 Add minor UI tweaks. PR #1506 by @alejsdev.</li> </ul>"},{"location":"app/release-notes/#080","title":"0.8.0","text":""},{"location":"app/release-notes/#features_1","title":"Features","text":"<ul> <li>\ud83d\udec2 Migrate to Chakra UI v3 . PR #1496 by @alejsdev.</li> <li>\u2728 Add private, local only, API for usage in E2E tests. PR #1429 by @patrick91.</li> <li>\u2728 Migrate to latest openapi-ts. PR #1430 by @patrick91.</li> </ul>"},{"location":"app/release-notes/#fixes_1","title":"Fixes","text":"<ul> <li>\ud83e\uddd1\u200d\ud83d\udd27 Replace correct value for 'htmlFor'. PR #1456 by @wesenbergg.</li> </ul>"},{"location":"app/release-notes/#refactors_1","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Redirect the user to <code>login</code> if we get 401/403. PR #1501 by @alejsdev.</li> <li>\ud83d\udc1b Refactor reset password test to create normal user instead of using super user. PR #1499 by @alejsdev.</li> <li>\u267b\ufe0f Replace email types from <code>str</code> to <code>EmailStr</code> in <code>config.py</code>. PR #1492 by @jpizquierdo.</li> <li>\ud83d\udd27 Remove unused context from router creation. PR #1498 by @alejsdev.</li> <li>\u267b\ufe0f Remove redundant item deletion code leveraging cascade delete. PR #1481 by @nauanbek.</li> <li>\u270f\ufe0f Fix a couple of spelling mistakes. PR #1485 by @rjmunro.</li> <li>\ud83c\udfa8 Move <code>prefix</code> and <code>tags</code> to routers. PR #1439 by @patrick91.</li> <li>\u267b\ufe0f Remove modify id script in favor of openapi-ts config. PR #1434 by @patrick91.</li> <li>\ud83d\udc77 Improve Playwright CI speed: sharding (parallel runs), run in Docker to use cache, use env vars. PR #1405 by @tiangolo.</li> <li>\u267b\ufe0f Add PaginationFooter component. PR #1381 by @saltie2193.</li> <li>\u267b\ufe0f Refactored code to use encryption algorithm name from settings for consistency. PR #1160 by @sameeramin.</li> <li>\ud83d\udd0a Enable logging for email utils by default. PR #1374 by @ihmily.</li> <li>\ud83d\udd27 Add <code>ENV PYTHONUNBUFFERED=1</code> to log output directly to Docker. PR #1378 by @tiangolo.</li> <li>\ud83d\udca1 Remove unnecessary comment. PR #1260 by @sebhani.</li> </ul>"},{"location":"app/release-notes/#upgrades","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Update Dockerfile to use uv version 0.5.11. PR #1454 by @alejsdev.</li> </ul>"},{"location":"app/release-notes/#docs","title":"Docs","text":"<ul> <li>\ud83d\udcdd Removing deprecated manual client SDK step. PR #1494 by @chandy.</li> <li>\ud83d\udcdd Update Frontend README.md. PR #1462 by @getmarkus.</li> <li>\ud83d\udcdd Update <code>frontend/README.md</code> to also remove Playwright when removing Frontend. PR #1452 by @youben11.</li> <li>\ud83d\udcdd Update <code>deployment.md</code>, instructions to install GitHub Runner in non-root VMs. PR #1412 by @tiangolo.</li> <li>\ud83d\udcdd Add MailCatcher to <code>development.md</code>. PR #1387 by @tobiase.</li> </ul>"},{"location":"app/release-notes/#internal","title":"Internal","text":"<ul> <li>\ud83d\udd27 Configure path alias for cleaner imports. PR #1497 by @alejsdev.</li> <li>Bump vite from 5.0.13 to 5.4.14 in /frontend. PR #1469 by @dependabot[bot].</li> <li>\u2b06 Bump astral-sh/setup-uv from 4 to 5. PR #1453 by @dependabot[bot].</li> <li>\u2b06 Bump astral-sh/setup-uv from 3 to 4. PR #1433 by @dependabot[bot].</li> <li>\u2b06 Bump tiangolo/latest-changes from 0.3.1 to 0.3.2. PR #1418 by @dependabot[bot].</li> <li>\ud83d\udc77 Update issue manager workflow. PR #1398 by @alejsdev.</li> <li>\ud83d\udc77 Fix smokeshow, checkout files on CI. PR #1395 by @tiangolo.</li> <li>\ud83d\udc77 Update <code>labeler.yml</code>. PR #1388 by @tiangolo.</li> <li>\ud83d\udd27 Add .auth playwright folder to <code>.gitignore</code>. PR #1383 by @justin-p.</li> <li>\u2b06\ufe0f Bump rollup from 4.6.1 to 4.22.5 in /frontend. PR #1379 by @dependabot[bot].</li> <li>\u2b06 Bump astral-sh/setup-uv from 2 to 3. PR #1364 by @dependabot[bot].</li> <li>\ud83d\udc77 Update pre-commit end-of-file-fixer hook to exclude email-templates. PR #1296 by @goabonga.</li> <li>\u2b06 Bump tiangolo/issue-manager from 0.5.0 to 0.5.1. PR #1332 by @dependabot[bot].</li> <li>\ud83d\udd27 Run task by the same Python environment used to run Copier. PR #1157 by @waketzheng.</li> <li>\ud83d\udc77 Tweak generate client to error out if there are errors. PR #1377 by @tiangolo.</li> <li>\ud83d\udc77 Generate and commit client only on same repo PRs, on forks, show the error. PR #1376 by @tiangolo.</li> </ul>"},{"location":"app/release-notes/#071","title":"0.7.1","text":""},{"location":"app/release-notes/#highlights","title":"Highlights","text":"<ul> <li>Migrate from Poetry to <code>uv</code>.</li> <li>Simplifications and improvements for Docker Compose files, Traefik Dockerfiles.</li> <li>Make the API use its own domain <code>api.example.com</code> and the frontend use <code>dashboard.example.com</code>. This would make it easier to deploy them separately if you needed that.</li> <li>The backend and frontend on Docker Compose now listen on the same port as the local development servers, this way you can stop the Docker Compose services and run the local development servers without changing the frontend configuration.</li> </ul>"},{"location":"app/release-notes/#features_2","title":"Features","text":"<ul> <li>\ud83e\ude7a Add DB healthcheck. PR #1342 by @tiangolo.</li> </ul>"},{"location":"app/release-notes/#refactors_2","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Update settings to use top level <code>.env</code> file. PR #1359 by @tiangolo.</li> <li>\u2b06\ufe0f Migrate from Poetry to uv. PR #1356 by @tiangolo.</li> <li>\ud83d\udd25 Remove logic for development dependencies and Jupyter, it was never documented, and I no longer use that trick. PR #1355 by @tiangolo.</li> <li>\u267b\ufe0f Use Docker Compose <code>watch</code>. PR #1354 by @tiangolo.</li> <li>\ud83d\udd27 Use plain base official Python Docker image. PR #1351 by @tiangolo.</li> <li>\ud83d\ude9a Move location of scripts to simplify file structure. PR #1352 by @tiangolo.</li> <li>\u267b\ufe0f Refactor prestart (migrations), move that to its own container. PR #1350 by @tiangolo.</li> <li>\u267b\ufe0f Include <code>FRONTEND_HOST</code> in CORS origins by default. PR #1348 by @tiangolo.</li> <li>\u267b\ufe0f Simplify domains with <code>api.example.com</code> for API and <code>dashboard.example.com</code> for frontend, improve local development with <code>localhost</code>. PR #1344 by @tiangolo.</li> <li>\ud83d\udd25 Simplify Traefik, remove www-redirects that add complexity. PR #1343 by @tiangolo.</li> <li>\ud83d\udd25 Enable support for Arm Docker images in Mac, remove old patch. PR #1341 by @tiangolo.</li> <li>\u267b\ufe0f Remove duplicate information in the ItemCreate model. PR #1287 by @jjaakko.</li> </ul>"},{"location":"app/release-notes/#upgrades_1","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade FastAPI. PR #1349 by @tiangolo.</li> </ul>"},{"location":"app/release-notes/#docs_1","title":"Docs","text":"<ul> <li>\ud83d\udca1 Add comments to Dockerfile with uv references. PR #1357 by @tiangolo.</li> <li>\ud83d\udcdd Add Email Templates to <code>backend/README.md</code>. PR #1311 by @alejsdev.</li> </ul>"},{"location":"app/release-notes/#internal_1","title":"Internal","text":"<ul> <li>\ud83d\udc77 Do not sync labels as it overrides manually added labels. PR #1307 by @tiangolo.</li> <li>\ud83d\udc77 Use uv cache on GitHub Actions. PR #1366 by @tiangolo.</li> <li>\ud83d\udc77 Update GitHub Actions format. PR #1363 by @tiangolo.</li> <li>\ud83d\udc77 Use <code>uv</code> for Python env to generate client. PR #1362 by @tiangolo.</li> <li>\ud83d\udc77 Run tests from Python environment (with <code>uv</code>), not from Docker container. PR #1361 by @tiangolo.</li> <li>\ud83d\udd28 Update <code>generate-client.sh</code> script, make it fail on errors, fix generation. PR #1360 by @tiangolo.</li> <li>\ud83d\udc77 Add GitHub Actions workflow to lint backend apart from tests. PR #1358 by @tiangolo.</li> <li>\ud83d\udc77 Improve playwright CI job. PR #1335 by @patrick91.</li> <li>\ud83d\udc77 Update <code>issue-manager.yml</code>. PR #1329 by @tiangolo.</li> <li>\ud83d\udc9a Set <code>include-hidden-files</code> to <code>True</code> when using the <code>upload-artifact</code> GH action. PR #1327 by @svlandeg.</li> <li>\ud83d\udc77\ud83c\udffb Auto-generate frontend client . PR #1320 by @alejsdev.</li> <li>\ud83d\udc1b Fix in <code>.github/labeler.yml</code>. PR #1322 by @alejsdev.</li> <li>\ud83d\udc77 Update <code>.github/labeler.yml</code>. PR #1321 by @alejsdev.</li> <li>\ud83d\udc77 Improve GitHub Actions workflows for local testing with act. PR by @jaronschulz.</li> <li>\ud83d\udc77 Update <code>latest-changes</code> GitHub Action. PR #1315 by @tiangolo.</li> <li>\ud83d\udc77 Update configs for labeler. PR #1308 by @tiangolo.</li> <li>\ud83d\udc77 Update GitHub Action labeler to add only one label. PR #1304 by @tiangolo.</li> <li>\u2b06\ufe0f Bump axios from 1.6.2 to 1.7.4 in /frontend. PR #1301 by @dependabot[bot].</li> <li>\ud83d\udc77 Update GitHub Action labeler dependencies. PR #1302 by @tiangolo.</li> <li>\ud83d\udc77 Update GitHub Action labeler permissions. PR #1300 by @tiangolo.</li> <li>\ud83d\udc77 Add GitHub Action label-checker. PR #1299 by @tiangolo.</li> <li>\ud83d\udc77 Add GitHub Action labeler. PR #1298 by @tiangolo.</li> <li>\ud83d\udc77 Add GitHub Action add-to-project. PR #1297 by @tiangolo.</li> <li>\ud83d\udc77 Update issue-manager. PR #1288 by @tiangolo.</li> </ul>"},{"location":"app/release-notes/#070","title":"0.7.0","text":"<p>Lots of new things! \ud83c\udf81</p> <ul> <li>E2E tests with Playwright.</li> <li>Mailcatcher configuration, to develop and test email handling.</li> <li>Pagination.</li> <li>UUIDs for database keys.</li> <li>New user sign up.</li> <li>Support for deploying to multiple environments (staging, prod).</li> <li>Many refactors and improvements.</li> <li>Several dependency upgrades.</li> </ul>"},{"location":"app/release-notes/#features_3","title":"Features","text":"<ul> <li>\u2728 Add User Settings e2e tests. PR #1271 by @alejsdev.</li> <li>\u2728 Add Reset Password e2e tests. PR #1270 by @alejsdev.</li> <li>\u2728 Add Sign Up e2e tests. PR #1268 by @alejsdev.</li> <li>\u2728 Add Sign Up and make <code>OPEN_USER_REGISTRATION=True</code> by default. PR #1265 by @alejsdev.</li> <li>\u2728 Add Login e2e tests. PR #1264 by @alejsdev.</li> <li>\u2728 Add initial setup for frontend / end-to-end tests with Playwright. PR #1261 by @alejsdev.</li> <li>\u2728 Add mailcatcher configuration. PR #1244 by @patrick91.</li> <li>\u2728 Introduce pagination in items. PR #1239 by @patrick91.</li> <li>\ud83d\uddc3\ufe0f Add max_length validation for database models and input data. PR #1233 by @estebanx64.</li> <li>\u2728 Add TanStack React Query devtools in dev build. PR #1217 by @tomerb.</li> <li>\u2728 Add support for deploying multiple environments (staging, production) to the same server. PR #1128 by @tiangolo.</li> <li>\ud83d\udc77 Update CI GitHub Actions to allow running in private repos. PR #1125 by @tiangolo.</li> </ul>"},{"location":"app/release-notes/#fixes_2","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix welcome page to show logged-in user. PR #1218 by @tomerb.</li> <li>\ud83d\udc1b Fix local Traefik proxy network config to fix Gateway Timeouts. PR #1184 by @JoelGotsch.</li> <li>\u267b\ufe0f Fix tests when first superuser password is changed in .env. PR #1165 by @billzhong.</li> <li>\ud83d\udc1b Fix bug when resetting password. PR #1171 by @alejsdev.</li> <li>\ud83d\udc1b Fix 403 when the frontend has a directory without an index.html. PR #1094 by @tiangolo.</li> </ul>"},{"location":"app/release-notes/#refactors_3","title":"Refactors","text":"<ul> <li>\ud83d\udea8 Fix Docker build warning. PR #1283 by @erip.</li> <li>\u267b\ufe0f Regenerate client to use UUID instead of id integers and update frontend. PR #1281 by @rehanabdul.</li> <li>\u267b\ufe0f Tweaks in frontend. PR #1273 by @alejsdev.</li> <li>\u267b\ufe0f Add random password util and refactor tests. PR #1277 by @alejsdev.</li> <li>\u267b\ufe0f Refactor models to use cascade delete relationships . PR #1276 by @alejsdev.</li> <li>\ud83d\udd25 Remove <code>USERS_OPEN_REGISTRATION</code> config, make registration enabled by default. PR #1274 by @alejsdev.</li> <li>\ud83d\udd27 Reuse database url from config in alembic setup. PR #1229 by @patrick91.</li> <li>\ud83d\udd27 Update Playwright config and tests to use env variables. PR #1266 by @alejsdev.</li> <li>\u267b\ufe0f Edit refactor db models to use UUID's instead of integer ID's. PR #1259 by @estebanx64.</li> <li>\u267b\ufe0f Update form inputs width. PR #1263 by @alejsdev.</li> <li>\u267b\ufe0f Replace deprecated utcnow() with now(timezone.utc) in utils module. PR #1247 by @jalvarezz13.</li> <li>\ud83c\udfa8 Format frontend. PR #1262 by @alejsdev.</li> <li>\u267b\ufe0f Abstraction of specific AddModal component out of the Navbar. PR #1246 by @ajbloureiro.</li> <li>\u267b\ufe0f Update <code>login.tsx</code> to prevent error if username or password are empty. PR #1257 by @jmondaud.</li> <li>\u267b\ufe0f Refactor recover password. PR #1242 by @alejsdev.</li> <li>\ud83c\udfa8 Format and lint . PR #1243 by @alejsdev.</li> <li>\ud83c\udfa8 Run biome after OpenAPI client generation. PR #1226 by @tomerb.</li> <li>\u267b\ufe0f Update DeleteConfirmation component to use new service. PR #1224 by @alejsdev.</li> <li>\u267b\ufe0f Update client services. PR #1223 by @alejsdev.</li> <li>\u2692\ufe0f Add minor frontend tweaks. PR #1210 by @alejsdev.</li> <li>\ud83d\ude9a Move assets to public folder. PR #1206 by @alejsdev.</li> <li>\u267b\ufe0f Refactor redirect labels to simplify removing the frontend. PR #1208 by @tiangolo.</li> <li>\ud83d\udd12\ufe0f Refactor migrate from python-jose to PyJWT. PR #1203 by @estebanx64.</li> <li>\ud83d\udd25 Remove duplicated code. PR #1185 by @alejsdev.</li> <li>\u267b\ufe0f Add delete_user_me endpoint and corresponding test cases. PR #1179 by @alejsdev.</li> <li>\u2705 Update test to add verification database records. PR #1178 by @estebanx64.</li> <li>\ud83d\udeb8 Use <code>useSuspenseQuery</code> to fetch members and show skeleton. PR #1174 by @patrick91.</li> <li>\ud83c\udfa8 Format Utils. PR #1173 by @alejsdev.</li> <li>\u2728 Use suspense for items page. PR #1167 by @patrick91.</li> <li>\ud83d\udeb8 Mark login field as required. PR #1166 by @patrick91.</li> <li>\ud83d\udeb8 Improve login. PR #1163 by @patrick91.</li> <li>\ud83e\udd45 Handle AxiosErrors in Login page. PR #1162 by @patrick91.</li> <li>\ud83c\udfa8 Format frontend. PR #1161 by @alejsdev.</li> <li>\u267b\ufe0f Regenerate frontend client. PR #1156 by @alejsdev.</li> <li>\u267b\ufe0f Refactor rename ModelsOut to ModelsPublic. PR #1154 by @estebanx64.</li> <li>\u267b\ufe0f Migrate frontend client generation from <code>openapi-typescript-codegen</code> to <code>@hey-api/openapi-ts</code>. PR #1151 by @alejsdev.</li> <li>\ud83d\udd25 Remove unused exports and update dependencies. PR #1146 by @alejsdev.</li> <li>\ud83d\udd27 Update sentry dns initialization following the environment settings. PR #1145 by @estebanx64.</li> <li>\u267b\ufe0f Refactor and tweaks, rename <code>UserCreateOpen</code> to <code>UserRegister</code> and others. PR #1143 by @alejsdev.</li> <li>\ud83c\udfa8 Format imports. PR #1140 by @alejsdev.</li> <li>\u267b\ufe0f Refactor and remove <code>React.FC</code>. PR #1139 by @alejsdev.</li> <li>\u267b\ufe0f Add email pattern and refactor in frontend. PR #1138 by @alejsdev.</li> <li>\ud83e\udd45 Set up Sentry for FastAPI applications. PR #1136 by @estebanx64.</li> <li>\ud83d\udd25 Remove deprecated Docker Compose version key. PR #1129 by @tiangolo.</li> <li>\ud83c\udfa8 Format with Biome . PR #1097 by @alejsdev.</li> <li>\ud83c\udfa8 Update quote style in biome formatter. PR #1095 by @alejsdev.</li> <li>\u267b\ufe0f Replace ESLint and Prettier with Biome to format and lint frontend. PR #719 by @santigandolfo.</li> <li>\ud83c\udfa8 Replace buttons styling for variants for consistency. PR #722 by @alejsdev.</li> <li>\ud83d\udee0\ufe0f Improve <code>modify-openapi-operationids.js</code>. PR #720 by @alejsdev.</li> <li>\u267b\ufe0f Replace pytest-mock with unittest.mock and remove pytest-cov. PR #717 by @estebanx64.</li> <li>\ud83d\udee0\ufe0f Minor changes in frontend. PR #715 by @alejsdev.</li> <li>\u267b Update Docker image to prevent errors in M1 Macs. PR #710 by @dudil.</li> <li>\u270f Fix typo in variable names in <code>backend/app/api/routes/items.py</code> and <code>backend/app/api/routes/users.py</code>. PR #711 by @disrupted.</li> </ul>"},{"location":"app/release-notes/#upgrades_2","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Update SQLModel to version <code>&gt;=0.0.21</code>. PR #1275 by @alejsdev.</li> <li>\u2b06\ufe0f Upgrade Traefik. PR #1241 by @tiangolo.</li> <li>\u2b06\ufe0f Bump requests from 2.31.0 to 2.32.0 in /backend. PR #1211 by @dependabot[bot].</li> <li>\u2b06\ufe0f Bump jinja2 from 3.1.3 to 3.1.4 in /backend. PR #1196 by @dependabot[bot].</li> <li>Bump gunicorn from 21.2.0 to 22.0.0 in /backend. PR #1176 by @dependabot[bot].</li> <li>Bump idna from 3.6 to 3.7 in /backend. PR #1168 by @dependabot[bot].</li> <li>\ud83c\udd99 Update React Query to TanStack Query. PR #1153 by @patrick91.</li> <li>Bump vite from 5.0.12 to 5.0.13 in /frontend. PR #1149 by @dependabot[bot].</li> <li>Bump follow-redirects from 1.15.5 to 1.15.6 in /frontend. PR #734 by @dependabot[bot].</li> </ul>"},{"location":"app/release-notes/#docs_2","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update links from tiangolo repo to fastapi org repo. PR #1285 by @tiangolo.</li> <li>\ud83d\udcdd Add End-to-End Testing with Playwright to frontend <code>README.md</code>. PR #1279 by @alejsdev.</li> <li>\ud83d\udcdd Update release-notes.md. PR #1220 by @alejsdev.</li> <li>\u270f\ufe0f Update <code>README.md</code>. PR #1205 by @Craz1k0ek.</li> <li>\u270f\ufe0f Fix Adminer URL in <code>deployment.md</code>. PR #1194 by @PhilippWu.</li> <li>\ud83d\udcdd Add <code>Enabling Open User Registration</code> to backend docs. PR #1191 by @alejsdev.</li> <li>\ud83d\udcdd Update release-notes.md. PR #1164 by @alejsdev.</li> <li>\ud83d\udcdd Update <code>README.md</code>. PR #716 by @alejsdev.</li> <li>\ud83d\udcdd Update instructions to clone for a private repo, including updates. PR #1127 by @tiangolo.</li> <li>\ud83d\udcdd Add docs about CI keys, LATEST_CHANGES and SMOKESHOW_AUTH_KEY. PR #1126 by @tiangolo.</li> <li>\u270f\ufe0f Fix file path in <code>backend/README.md</code> when not wanting to use migrations. PR #1116 by @leonlowitzki.</li> <li>\ud83d\udcdd Add documentation for pre-commit and code linting. PR #718 by @estebanx64.</li> <li>\ud83d\udcdd Fix localhost URLs in <code>development.md</code>. PR #1099 by @efonte.</li> <li>\u270f Update header titles for consistency. PR #708 by @codesmith-emmy.</li> <li>\ud83d\udcdd Update <code>README.md</code>, dark mode screenshot position. PR #706 by @alejsdev.</li> </ul>"},{"location":"app/release-notes/#internal_2","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update deploy workflows to exclude the main repository. PR #1284 by @alejsdev.</li> <li>\ud83d\udc77 Update issue-manager.yml GitHub Action permissions. PR #1278 by @tiangolo.</li> <li>\u2b06\ufe0f Bump setuptools from 69.1.1 to 70.0.0 in /backend. PR #1255 by @dependabot[bot].</li> <li>\u2b06\ufe0f Bump certifi from 2024.2.2 to 2024.7.4 in /backend. PR #1250 by @dependabot[bot].</li> <li>\u2b06\ufe0f Bump urllib3 from 2.2.1 to 2.2.2 in /backend. PR #1235 by @dependabot[bot].</li> <li>\ud83d\udd27 Ignore <code>src/routeTree.gen.ts</code> in biome. PR #1175 by @patrick91.</li> <li>\ud83d\udc77 Update Smokeshow download artifact GitHub Action. PR #1198 by @tiangolo.</li> <li>\ud83d\udd27 Update Node.js version in <code>.nvmrc</code>. PR #1192 by @alejsdev.</li> <li>\ud83d\udd25 Remove ESLint and Prettier from pre-commit config. PR #1096 by @alejsdev.</li> <li>\ud83d\udd27 Update mypy config to ignore .venv directories. PR #1155 by @tiangolo.</li> <li>\ud83d\udea8 Enable <code>ARG001</code> to prevent unused arguments. PR #1152 by @patrick91.</li> <li>\ud83d\udd25 Remove isort configuration, since we use Ruff now. PR #1144 by @patrick91.</li> <li>\ud83d\udd27 Update pre-commit config to exclude generated client folder. PR #1150 by @alejsdev.</li> <li>\ud83d\udd27 Change <code>.nvmrc</code> format. PR #1148 by @patrick91.</li> <li>\ud83c\udfa8 Ignore alembic from ruff lint and format. PR #1131 by @estebanx64.</li> <li>\ud83d\udd27 Add GitHub templates for discussions and issues, and security policy. PR #1105 by @alejsdev.</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 3.1.2 to 3.1.4. PR #1103 by @dependabot[bot].</li> <li>\ud83d\udd27 Add Biome to pre-commit config. PR #1098 by @alejsdev.</li> <li>\ud83d\udd25 Delete leftover celery file. PR #727 by @dr-neptune.</li> <li>\u2699\ufe0f Update pre-commit config with Prettier and ESLint. PR #714 by @alejsdev.</li> </ul>"},{"location":"app/release-notes/#060","title":"0.6.0","text":"<p>Latest FastAPI, Pydantic, SQLModel \ud83d\ude80</p> <p>Brand new frontend with React, TS, Vite, Chakra UI, TanStack Query/Router, generated client/SDK \ud83c\udfa8</p> <p>CI/CD - GitHub Actions \ud83e\udd16</p> <p>Test cov &gt; 90% \u2705</p>"},{"location":"app/release-notes/#features_4","title":"Features","text":"<ul> <li>\u2728 Adopt SQLModel, create models, start using it. PR #559 by @tiangolo.</li> <li>\u2728 Upgrade items router with new SQLModel models, simplified logic, and new FastAPI Annotated dependencies. PR #560 by @tiangolo.</li> <li>\u2728 Migrate from pgAdmin to Adminer. PR #692 by @tiangolo.</li> <li>\u2728 Add support for setting <code>POSTGRES_PORT</code>. PR #333 by @uepoch.</li> <li>\u2b06 Upgrade Flower version and command. PR #447 by @maurob.</li> <li>\ud83c\udfa8 Improve styles. PR #673 by @alejsdev.</li> <li>\ud83c\udfa8 Update theme. PR #666 by @alejsdev.</li> <li>\ud83d\udc77 Add continuous deployment and refactors needed for it. PR #667 by @tiangolo.</li> <li>\u2728 Create endpoint to show password recovery email content and update email template. PR #664 by @alejsdev.</li> <li>\ud83c\udfa8 Format with Prettier. PR #646 by @alejsdev.</li> <li>\u2705 Add tests to raise coverage to at least 90% and fix recover password logic. PR #632 by @estebanx64.</li> <li>\u2699\ufe0f Add Prettier and ESLint config with pre-commit. PR #640 by @alejsdev.</li> <li>\ud83d\udc77 Add coverage with Smokeshow to CI and badge. PR #638 by @estebanx64.</li> <li>\u2728 Migrate to TanStack Query (React Query) and TanStack Router. PR #637 by @alejsdev.</li> <li>\u2705 Add setup and teardown database for tests. PR #626 by @estebanx64.</li> <li>\u2728 Update new-frontend client. PR #625 by @alejsdev.</li> <li>\u2728 Add password reset functionality. PR #624 by @alejsdev.</li> <li>\u2728 Add private/public routing. PR #621 by @alejsdev.</li> <li>\ud83d\udd27 Add VS Code debug configs. PR #620 by @tiangolo.</li> <li>\u2728 Add <code>Not Found</code> page. PR #595 by @alejsdev.</li> <li>\u2728 Add new pages, components, panels, modals, and theme; refactor and improvements in existing components. PR #593 by @alejsdev.</li> <li>\u2728 Support delete own account and other tweaks. PR #614 by @alejsdev.</li> <li>\u2728 Restructure folders, allow editing of users/items, and implement other refactors and improvements. PR #603 by @alejsdev.</li> <li>\u2728 Add Copier, migrate from Cookiecutter, in a way that supports using the project as is, forking or cloning it. PR #612 by @tiangolo.</li> <li>\u2795 Replace black, isort, flake8, autoflake with ruff and upgrade mypy. PR #610 by @tiangolo.</li> <li>\u267b Refactor items and services endpoints to return count and data, and add CI tests. PR #599 by @estebanx64.</li> <li>\u2728 Add support for updating items and upgrade SQLModel to 0.0.16 (which supports model object updates). PR #601 by @tiangolo.</li> <li>\u2728 Add dark mode to new-frontend and conditional sidebar items. PR #600 by @alejsdev.</li> <li>\u2728 Migrate to RouterProvider and other refactors . PR #598 by @alejsdev.</li> <li>\u2728 Add delete_user; refactor delete_item. PR #594 by @alejsdev.</li> <li>\u2728 Add state store to new frontend. PR #592 by @alejsdev.</li> <li>\u2728 Add form validation to Admin, Items and Login. PR #616 by @alejsdev.</li> <li>\u2728 Add Sidebar to new frontend. PR #587 by @alejsdev.</li> <li>\u2728 Add Login to new frontend. PR #585 by @alejsdev.</li> <li>\u2728 Include schemas in generated frontend client. PR #584 by @alejsdev.</li> <li>\u2728 Regenerate frontend client with recent changes. PR #575 by @alejsdev.</li> <li>\u267b\ufe0f Refactor API in <code>utils.py</code>. PR #573 by @alejsdev.</li> <li>\u2728 Update code for login API. PR #571 by @tiangolo.</li> <li>\u2728 Add client in frontend and client generation. PR #569 by @alejsdev.</li> <li>\ud83d\udc33 Set up Docker config for new-frontend. PR #564 by @alejsdev.</li> <li>\u2728 Set up new frontend with Vite, TypeScript and React. PR #563 by @alejsdev.</li> <li>\ud83d\udccc Add NodeJS version management and instructions. PR #551 by @alejsdev.</li> <li>Add consistent errors for env vars not set. PR #200.</li> <li>Upgrade Traefik to version 2, keeping in sync with DockerSwarm.rocks. PR #199.</li> <li>Run tests with <code>TestClient</code>. PR #160.</li> </ul>"},{"location":"app/release-notes/#fixes_3","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix copier to handle string vars with spaces in quotes. PR #631 by @estebanx64.</li> <li>\ud83d\udc1b Fix allowing a user to update the email to the same email they already have. PR #696 by @alejsdev.</li> <li>\ud83d\udc1b Set up Sentry only when used. PR #671 by @tiangolo.</li> <li>\ud83d\udd25 Remove unnecessary validation. PR #662 by @alejsdev.</li> <li>\ud83d\udc1b Fix bug when editing own user. PR #651 by @alejsdev.</li> <li>\ud83d\udc1b Add <code>onClose</code> to <code>SidebarItems</code>. PR #589 by @alejsdev.</li> <li>\ud83d\udc1b Fix positional argument bug in <code>init_db.py</code>. PR #562 by @alejsdev.</li> <li>\ud83d\udccc Fix flower Docker image, pin version. PR #396 by @sanggusti.</li> <li>\ud83d\udc1b Fix Celery worker command. PR #443 by @bechtold.</li> <li>\ud83d\udc1b Fix Poetry installation in Dockerfile and upgrade Python version and packages to fix Docker build. PR #480 by @little7Li.</li> </ul>"},{"location":"app/release-notes/#refactors_4","title":"Refactors","text":"<ul> <li>\ud83d\udd27 Add missing dotenv variables. PR #554 by @tiangolo.</li> <li>\u23ea Revert \"\u2699\ufe0f Add Prettier and ESLint config with pre-commit\". PR #644 by @alejsdev.</li> <li>\ud83d\ude48 Add .prettierignore and include client folder. PR #648 by @alejsdev.</li> <li>\ud83c\udff7\ufe0f Add mypy to the GitHub Action for tests and fixed types in the whole project. PR #655 by @estebanx64.</li> <li>\ud83d\udd12\ufe0f Ensure the default values of \"changethis\" are not deployed. PR #698 by @tiangolo.</li> <li>\u25c0 Revert \"\ud83d\udcf8 Rename Dashboard to Home and update screenshots\". PR #697 by @alejsdev.</li> <li>\ud83d\udcf8 Rename Dashboard to Home and update screenshots. PR #693 by @alejsdev.</li> <li>\ud83d\udc1b Fixed items count when retrieving data for all items by user. PR #695 by @estebanx64.</li> <li>\ud83d\udd25 Remove Celery and Flower, they are currently not used nor recommended. PR #694 by @tiangolo.</li> <li>\u2705 Add test for deleting user without privileges. PR #690 by @alejsdev.</li> <li>\u267b\ufe0f Refactor user update. PR #689 by @alejsdev.</li> <li>\ud83d\udccc Add Poetry lock to git. PR #685 by @tiangolo.</li> <li>\ud83c\udfa8 Adjust color and spacing. PR #684 by @alejsdev.</li> <li>\ud83d\udc77 Avoid creating unnecessary *.pyc files with PYTHONDONTWRITEBYTECODE=1. PR #677 by @estebanx64.</li> <li>\ud83d\udd27 Add <code>SMTP_SSL</code> option for older SMTP servers. PR #365 by @Metrea.</li> <li>\u267b\ufe0f Refactor logic to allow running pytest tests locally. PR #683 by @tiangolo.</li> <li>\u267b Update error messages. PR #417 by @qu3vipon.</li> <li>\ud83d\udd27 Add a default Flower password. PR #682 by @tiangolo.</li> <li>\ud83d\udd27 Update VS Code debug config. PR #676 by @tiangolo.</li> <li>\u267b\ufe0f Refactor code structure for tests. PR #674 by @tiangolo.</li> <li>\ud83d\udd27 Set TanStack Router devtools only in dev mode. PR #668 by @alejsdev.</li> <li>\u267b\ufe0f Refactor email logic to allow re-using util functions for testing and development. PR #663 by @tiangolo.</li> <li>\ud83d\udcac Improve Delete Account description and confirmation. PR #661 by @alejsdev.</li> <li>\u267b\ufe0f Refactor email templates. PR #659 by @alejsdev.</li> <li>\ud83d\udcdd Update deployment files and docs. PR #660 by @tiangolo.</li> <li>\ud83d\udd25 Remove unused schemas. PR #656 by @alejsdev.</li> <li>\ud83d\udd25 Remove old frontend. PR #649 by @tiangolo.</li> <li>\u267b Move project source files to top level from src, update Sentry dependency. PR #630 by @estebanx64.</li> <li>\u267b Refactor Python folder tree. PR #629 by @estebanx64.</li> <li>\u267b\ufe0f Refactor old CRUD utils and tests. PR #622 by @alejsdev.</li> <li>\ud83d\udd27 Update .env to allow local debug for the backend. PR #618 by @tiangolo.</li> <li>\u267b\ufe0f Refactor and update CORS, remove trailing slash from new Pydantic v2. PR #617 by @tiangolo.</li> <li>\ud83c\udfa8 Format files with pre-commit and Ruff. PR #611 by @tiangolo.</li> <li>\ud83d\ude9a Refactor and simplify backend file structure. PR #609 by @tiangolo.</li> <li>\ud83d\udd25 Clean up old files no longer relevant. PR #608 by @tiangolo.</li> <li>\u267b Re-structure Docker Compose files, discard Docker Swarm specific logic. PR #607 by @tiangolo.</li> <li>\u267b\ufe0f Refactor update endpoints and regenerate client for new-frontend. PR #602 by @alejsdev.</li> <li>\u2728 Add Layout to App. PR #588 by @alejsdev.</li> <li>\u267b\ufe0f Re-enable user update path operations for frontend client generation. PR #574 by @alejsdev.</li> <li>\u267b\ufe0f Remove type ignores and add <code>response_model</code>. PR #572 by @alejsdev.</li> <li>\u267b\ufe0f Refactor Users API and dependencies. PR #561 by @alejsdev.</li> <li>\u267b\ufe0f Refactor frontend Docker build setup, use plain NodeJS, use custom Nginx config, fix build for old Vue. PR #555 by @tiangolo.</li> <li>\u267b\ufe0f Refactor project generation, discard cookiecutter, use plain git/clone/fork. PR #553 by @tiangolo.</li> <li>Refactor backend:</li> <li>Simplify configs for tools and format to better support editor integration.</li> <li>Add mypy configurations and plugins.</li> <li>Add types to all the codebase.</li> <li>Update types for SQLAlchemy models with plugin.</li> <li>Update and refactor CRUD utils.</li> <li>Refactor DB sessions to use dependencies with <code>yield</code>.</li> <li>Refactor dependencies, security, CRUD, models, schemas, etc. To simplify code and improve autocompletion.</li> <li>Change from PyJWT to Python-JOSE as it supports additional use cases.</li> <li>Fix JWT tokens using user email/ID as the subject in <code>sub</code>.</li> <li>PR #158.</li> <li>Simplify <code>docker-compose.*.yml</code> files, refactor deployment to reduce config files. PR #153.</li> <li>Simplify env var files, merge to a single <code>.env</code> file. PR #151.</li> </ul>"},{"location":"app/release-notes/#upgrades_3","title":"Upgrades","text":"<ul> <li>\ud83d\udccc Upgrade Poetry lock dependencies. PR #702 by @tiangolo.</li> <li>\u2b06\ufe0f Upgrade Python version and dependencies. PR #558 by @tiangolo.</li> <li>\u2b06 Bump tiangolo/issue-manager from 0.2.0 to 0.5.0. PR #591 by @dependabot[bot].</li> <li>Bump follow-redirects from 1.15.3 to 1.15.5 in /frontend. PR #654 by @dependabot[bot].</li> <li>Bump vite from 5.0.4 to 5.0.12 in /frontend. PR #653 by @dependabot[bot].</li> <li>Bump fastapi from 0.104.1 to 0.109.1 in /backend. PR #687 by @dependabot[bot].</li> <li>Bump python-multipart from 0.0.6 to 0.0.7 in /backend. PR #686 by @dependabot[bot].</li> <li>\u2b06 Add <code>uvicorn[standard]</code> to include <code>watchgod</code> and <code>uvloop</code>. PR #438 by @alonme.</li> <li>\u2b06 Upgrade code to support pydantic V2. PR #615 by @estebanx64.</li> </ul>"},{"location":"app/release-notes/#docs_3","title":"Docs","text":"<ul> <li>\ud83e\udd87 Add dark mode to <code>README.md</code>. PR #703 by @alejsdev.</li> <li>\ud83c\udf71 Update GitHub image. PR #701 by @tiangolo.</li> <li>\ud83c\udf71 Add GitHub image. PR #700 by @tiangolo.</li> <li>\ud83d\ude9a Rename project to Full Stack FastAPI Template. PR #699 by @tiangolo.</li> <li>\ud83d\udcdd Update <code>README.md</code>. PR #691 by @alejsdev.</li> <li>\u270f Fix typo in <code>development.md</code>. PR #309 by @graue70.</li> <li>\ud83d\udcdd Add docs for wildcard domains. PR #681 by @tiangolo.</li> <li>\ud83d\udcdd Add the required GitHub Actions secrets to docs. PR #679 by @tiangolo.</li> <li>\ud83d\udcdd Update <code>README.md</code> and <code>deployment.md</code>. PR #678 by @alejsdev.</li> <li>\ud83d\udcdd Update frontend <code>README.md</code>. PR #675 by @alejsdev.</li> <li>\ud83d\udcdd Update deployment docs to use a different directory for traefik-public. PR #670 by @tiangolo.</li> <li>\ud83d\udcf8 Add new screenshots . PR #657 by @alejsdev.</li> <li>\ud83d\udcdd Refactor README into separate README.md files for backend, frontend, deployment, development. PR #639 by @tiangolo.</li> <li>\ud83d\udcdd Update README. PR #628 by @tiangolo.</li> <li>\ud83d\udc77 Update GitHub Action latest-changes and move release notes to independent file. PR #619 by @tiangolo.</li> <li>\ud83d\udcdd Update internal README and referred files. PR #613 by @tiangolo.</li> <li>\ud83d\udcdd Update README with in construction notice. PR #552 by @tiangolo.</li> <li>Add docs about reporting test coverage in HTML. PR #161.</li> <li>Add docs about removing the frontend, for an API-only app. PR #156.</li> </ul>"},{"location":"app/release-notes/#internal_3","title":"Internal","text":"<ul> <li>\ud83d\udc77 Add Lint to GitHub Actions outside of tests. PR #688 by @tiangolo.</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.28.0 to 3.1.2. PR #643 by @dependabot[bot].</li> <li>\u2b06 Bump actions/upload-artifact from 3 to 4. PR #642 by @dependabot[bot].</li> <li>\u2b06 Bump actions/setup-python from 4 to 5. PR #641 by @dependabot[bot].</li> <li>\ud83d\udc77 Tweak test GitHub Action names. PR #672 by @tiangolo.</li> <li>\ud83d\udd27 Add <code>.gitattributes</code> file to ensure LF endings for <code>.sh</code> files. PR #658 by @estebanx64.</li> <li>\ud83d\ude9a Move new-frontend to frontend. PR #652 by @alejsdev.</li> <li>\ud83d\udd27 Add script for ESLint. PR #650 by @alejsdev.</li> <li>\u2699\ufe0f Add Prettier config. PR #647 by @alejsdev.</li> <li>\ud83d\udd27 Update pre-commit config. PR #645 by @alejsdev.</li> <li>\ud83d\udc77 Add dependabot. PR #547 by @tiangolo.</li> <li>\ud83d\udc77 Fix latest-changes GitHub Action token, strike 2. PR #546 by @tiangolo.</li> <li>\ud83d\udc77 Fix latest-changes GitHub Action token config. PR #545 by @tiangolo.</li> <li>\ud83d\udc77 Add latest-changes GitHub Action. PR #544 by @tiangolo.</li> <li>Update issue-manager. PR #211.</li> <li>Add GitHub Sponsors button. PR #201.</li> <li>Simplify scripts and development, update docs and configs. PR #155.</li> </ul>"},{"location":"app/release-notes/#050","title":"0.5.0","text":"<ul> <li>Make the Traefik public network a fixed default of <code>traefik-public</code> as done in DockerSwarm.rocks, to simplify development and iteration of the project generator. PR #150.</li> <li>Update to PostgreSQL 12. PR #148. by @RCheese.</li> <li>Use Poetry for package management. Initial PR #144 by @RCheese.</li> <li>Fix Windows line endings for shell scripts after project generation with Cookiecutter hooks. PR #149.</li> <li>Upgrade Vue CLI to version 4. PR #120 by @br3ndonland.</li> <li>Remove duplicate <code>login</code> tag. PR #135 by @Nonameentered.</li> <li>Fix showing email in dashboard when there's no user's full name. PR #129 by @rlonka.</li> <li>Format code with Black and Flake8. PR #121 by @br3ndonland.</li> <li>Simplify SQLAlchemy Base class. PR #117 by @airibarne.</li> <li>Update CRUD utils for users, handling password hashing. PR #106 by @mocsar.</li> <li>Use <code>.</code> instead of <code>source</code> for interoperability. PR #98 by @gucharbon.</li> <li>Use Pydantic's <code>BaseSettings</code> for settings/configs and env vars. PR #87 by @StephenBrown2.</li> <li>Remove <code>package-lock.json</code> to let everyone lock their own versions (depending on OS, etc).</li> <li>Simplify Traefik service labels PR #139.</li> <li>Add email validation. PR #40 by @kedod.</li> <li>Fix typo in README. PR #83 by @ashears.</li> <li>Fix typo in README. PR #80 by @abjoker.</li> <li>Fix function name <code>read_item</code> and response code. PR #74 by @jcaguirre89.</li> <li>Fix typo in comment. PR #70 by @daniel-butler.</li> <li>Fix Flower Docker configuration. PR #37 by @dmontagu.</li> <li>Add new CRUD utils based on DB and Pydantic models. Initial PR #23 by @ebreton.</li> <li>Add normal user testing Pytest fixture. PR #20 by @ebreton.</li> </ul>"},{"location":"app/release-notes/#040","title":"0.4.0","text":"<ul> <li> <p>Fix security on resetting a password. Receive token as body, not query. PR #34.</p> </li> <li> <p>Fix security on resetting a password. Receive it as body, not query. PR #33 by @dmontagu.</p> </li> <li> <p>Fix SQLAlchemy class lookup on initialization. PR #29 by @ebreton.</p> </li> <li> <p>Fix SQLAlchemy operation errors on database restart. PR #32 by @ebreton.</p> </li> <li> <p>Fix locations of scripts in generated README. PR #19 by @ebreton.</p> </li> <li> <p>Forward arguments from script to <code>pytest</code> inside container. PR #17 by @ebreton.</p> </li> <li> <p>Update development scripts.</p> </li> <li> <p>Read Alembic configs from env vars. PR #9 by @ebreton.</p> </li> <li> <p>Create DB Item objects from all Pydantic model's fields.</p> </li> <li> <p>Update Jupyter Lab installation and util script/environment variable for local development.</p> </li> </ul>"},{"location":"app/release-notes/#030","title":"0.3.0","text":"<ul> <li> <p>PR #14:</p> </li> <li> <p>Update CRUD utils to use types better.</p> </li> <li>Simplify Pydantic model names, from <code>UserInCreate</code> to <code>UserCreate</code>, etc.</li> <li>Upgrade packages.</li> <li>Add new generic \"Items\" models, crud utils, endpoints, and tests. To facilitate re-using them to create new functionality. As they are simple and generic (not like Users), it's easier to copy-paste and adapt them to each use case.</li> <li>Update endpoints/path operations to simplify code and use new utilities, prefix and tags in <code>include_router</code>.</li> <li>Update testing utils.</li> <li>Update linting rules, relax vulture to reduce false positives.</li> <li>Update migrations to include new Items.</li> <li> <p>Update project README.md with tips about how to start with backend.</p> </li> <li> <p>Upgrade Python to 3.7 as Celery is now compatible too. PR #10 by @ebreton.</p> </li> </ul>"},{"location":"app/release-notes/#022","title":"0.2.2","text":"<ul> <li>Fix frontend hijacking /docs in development. Using latest https://github.com/tiangolo/node-frontend with custom Nginx configs in frontend. PR #6.</li> </ul>"},{"location":"app/release-notes/#021","title":"0.2.1","text":"<ul> <li> <p>Fix documentation for path operation to get user by ID. PR #4 by @mpclarkson in FastAPI.</p> </li> <li> <p>Set <code>/start-reload.sh</code> as a command override for development by default.</p> </li> <li> <p>Update generated README.</p> </li> </ul>"},{"location":"app/release-notes/#020","title":"0.2.0","text":"<p>PR #2:</p> <ul> <li>Simplify and update backend <code>Dockerfile</code>s.</li> <li>Refactor and simplify backend code, improve naming, imports, modules and \"namespaces\".</li> <li>Improve and simplify Vuex integration with TypeScript accessors.</li> <li>Standardize frontend components layout, buttons order, etc.</li> <li>Add local development scripts (to develop this project generator itself).</li> <li>Add logs to startup modules to detect errors early.</li> <li>Improve FastAPI dependency utilities, to simplify and reduce code (to require a superuser).</li> </ul>"},{"location":"app/release-notes/#012","title":"0.1.2","text":"<ul> <li>Fix path operation to update self-user, set parameters as body payload.</li> </ul>"},{"location":"app/release-notes/#011","title":"0.1.1","text":"<p>Several bug fixes since initial publication, including:</p> <ul> <li>Order of path operations for users.</li> <li>Frontend sending login data in the correct format.</li> <li>Add https://localhost variants to CORS.</li> </ul>"},{"location":"app/backend/","title":"\ud83d\udd25 DevOps Demo Application - Backend","text":"<p>The backend of our DevOps demo application is built with FastAPI, providing a high-performance, easy-to-use API with automatic interactive documentation.</p>"},{"location":"app/backend/#table-of-contents","title":"\ud83d\udcbb Table of Contents","text":"<ul> <li>Features</li> <li>Requirements</li> <li>Development Setup</li> <li>Docker-based Development</li> <li>Local Development</li> <li>API Documentation</li> <li>Project Structure</li> <li>Database</li> <li>Testing</li> <li>Deployment</li> </ul>"},{"location":"app/backend/#features","title":"\u2728 Features","text":"<ul> <li>FastAPI Framework: High-performance, easy to learn, fast to code, ready for production</li> <li>SQLModel ORM: SQL databases in Python, designed for simplicity, compatibility, and robustness</li> <li>JWT Authentication: Secure authentication with JWT tokens</li> <li>Automatic API Documentation: Interactive API documentation with Swagger UI and ReDoc</li> <li>Dependency Injection: Clean and testable code with FastAPI's dependency injection system</li> <li>Async Support: Fully asynchronous API endpoints for high performance</li> <li>Comprehensive Testing: Pytest-based test suite with high coverage</li> </ul>"},{"location":"app/backend/#requirements","title":"\ud83d\udccd Requirements","text":"<ul> <li>Docker and Docker Compose</li> <li>Python 3.11+</li> <li>uv for Python package and environment management</li> <li>PostgreSQL (when running locally without Docker)</li> </ul>"},{"location":"app/backend/#development-setup","title":"\ud83d\udd27 Development Setup","text":""},{"location":"app/backend/#docker-based-development","title":"Docker-based Development","text":"<p>The easiest way to get started is using Docker Compose, which sets up all required services including the database.</p> <pre><code># From the project root directory\ndocker compose up -d\n</code></pre> <p>This will start:</p> <ul> <li>Backend API at http://api.localhost</li> <li>PostgreSQL database</li> <li>Adminer (database management) at http://adminer.localhost</li> </ul>"},{"location":"app/backend/#local-development","title":"Local Development","text":"<p>For a more responsive development experience, you can run the backend locally.</p> <ol> <li>Set up environment variables</li> </ol> <pre><code># From the project root directory\ncp .env.example .env\n# Edit .env with your preferred settings\n</code></pre> <ol> <li>Install dependencies</li> </ol> <pre><code># Navigate to backend directory\ncd backend\n\n# Create a virtual environment\nuv venv\n\n# Activate the virtual environment\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\nuv pip install -e .\n</code></pre> <ol> <li>Start the development server</li> </ol> <pre><code>uvicorn app.main:app --reload --host 0.0.0.0 --port 8000\n</code></pre>"},{"location":"app/backend/#api-documentation","title":"\ud83d\udcd6 API Documentation","text":"<p>FastAPI automatically generates interactive API documentation:</p> <ul> <li> <p>Swagger UI: http://localhost:8000/docs</p> </li> <li> <p>Interactive documentation with request/response examples</p> </li> <li> <p>Try out API endpoints directly from the browser</p> </li> <li> <p>ReDoc: http://localhost:8000/redoc</p> </li> <li>Alternative documentation interface</li> <li>More readable for complex APIs</li> </ul>"},{"location":"app/backend/#project-structure","title":"\ud83d\udcc2 Project Structure","text":"<pre><code>backend/\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 api/\n\u2502   \u2502   \u251c\u2500\u2500 deps.py         # Dependency injection\n\u2502   \u2502   \u2514\u2500\u2500 routes/         # API endpoints\n\u2502   \u251c\u2500\u2500 core/               # Core functionality\n\u2502   \u2502   \u251c\u2500\u2500 config.py       # Configuration\n\u2502   \u2502   \u2514\u2500\u2500 security.py     # Security utilities\n\u2502   \u251c\u2500\u2500 crud/               # CRUD operations\n\u2502   \u251c\u2500\u2500 db/                 # Database setup\n\u2502   \u251c\u2500\u2500 models/             # SQLModel models\n\u2502   \u251c\u2500\u2500 schemas/            # Pydantic schemas\n\u2502   \u251c\u2500\u2500 tests/              # Tests\n\u2502   \u2514\u2500\u2500 main.py             # Application entry point\n\u2514\u2500\u2500 pyproject.toml          # Project dependencies\n</code></pre>"},{"location":"app/backend/#database","title":"\ud83d\udcbe Database","text":""},{"location":"app/backend/#migrations","title":"Migrations","text":"<p>The application uses Alembic for database migrations:</p> <pre><code># Generate a new migration\nalembic revision --autogenerate -m \"description\"\n\n# Apply migrations\nalembic upgrade head\n</code></pre>"},{"location":"app/backend/#database-models","title":"Database Models","text":"<p>Models are defined using SQLModel, which combines SQLAlchemy and Pydantic:</p> <pre><code>from sqlmodel import Field, SQLModel\n\nclass User(SQLModel, table=True):\n    id: int = Field(default=None, primary_key=True)\n    email: str = Field(unique=True, index=True)\n    # ...\n</code></pre>"},{"location":"app/backend/#testing","title":"\ud83e\uddea Testing","text":"<p>The backend includes a comprehensive test suite using pytest:</p> <pre><code># Run all tests\npytest\n\n# Run tests with coverage report\npytest --cov=app\n\n# Run specific test file\npytest app/tests/api/routes/test_users.py\n</code></pre>"},{"location":"app/backend/#deployment","title":"\ud83d\ude80 Deployment","text":"<p>The backend is designed to be deployed as a Docker container to AWS ECS. The deployment is handled automatically by GitHub Actions when changes are pushed to the appropriate branches.</p> <p>For more information on the deployment process, see the CI/CD Pipeline section in the main README.</p>"},{"location":"app/deployment/guide/","title":"Deployment Guide for DevOps Demo Application","text":"<p>This document describes how to deploy the application to AWS ECS using GitHub Actions.</p>"},{"location":"app/deployment/guide/#prerequisites","title":"Prerequisites","text":""},{"location":"app/deployment/guide/#github-actions-secrets","title":"GitHub Actions Secrets","text":"<p>The following secrets need to be configured in your GitHub repository:</p>"},{"location":"app/deployment/guide/#cicd-pipeline","title":"CI/CD Pipeline","text":"<p>The CI/CD pipeline consists of the following stages:</p> <ol> <li>Build and Test: Builds the application and runs tests</li> <li>Build and Push Docker Images: Builds Docker images for frontend and backend and pushes them to ECR</li> <li>Deploy to Staging: Deploys the application to the staging environment</li> <li>Deploy to Production: Deploys the application to the production environment (manual approval required)</li> </ol>"},{"location":"app/deployment/guide/#aws-resources","title":"AWS Resources","text":"<p>The application requires the following AWS resources:</p>"},{"location":"app/deployment/guide/#infrastructure-as-code","title":"Infrastructure as Code","text":"<p>The AWS infrastructure is managed using Terraform in a separate repository. The Terraform code creates all the necessary AWS resources and configures them for the application.</p> <p>The ECS deployment uses the Docker images built and pushed by the GitHub Actions workflow.</p>"},{"location":"app/development/guide/","title":"Development Guide for DevOps Demo Application","text":"<p>This document describes how to set up and run the application for local development.</p>"},{"location":"app/development/guide/#prerequisites","title":"Prerequisites","text":""},{"location":"app/development/guide/#local-development-with-docker-compose","title":"Local Development with Docker Compose","text":"<p>The easiest way to run the application locally is using Docker Compose:</p>"},{"location":"app/development/makefile/","title":"Makefile System Documentation","text":"<p>This document describes the Makefile system used in our project for managing development, testing, deployment, and maintenance tasks.</p>"},{"location":"app/development/makefile/#overview","title":"Overview","text":"<p>The Makefile is the central interface for all aspects of our project. It serves as the primary and recommended way to interact with the codebase throughout its entire lifecycle - from initial setup and development to testing, deployment, and maintenance.</p> <p>All team members should use the Makefile commands for consistency, rather than running individual tools directly. This ensures that everyone follows the same workflows and processes, reducing errors and improving productivity.</p> <p>The Makefile system is organized into several sections, each handling a specific aspect of the project:</p> <ul> <li>Core Development</li> <li>Security</li> <li>Testing</li> <li>Accessibility</li> <li>CI/CD</li> <li>Documentation</li> <li>Docker Management</li> <li>Environment Management</li> <li>Maintenance</li> </ul>"},{"location":"app/development/makefile/#directory-structure","title":"Directory Structure","text":"<pre><code>make/\n\u251c\u2500\u2500 Makefile              # Main Makefile with core targets and includes\n\u251c\u2500\u2500 variables.mk          # Shared variables and help text\n\u251c\u2500\u2500 security.mk           # Security-related targets\n\u251c\u2500\u2500 testing.mk            # Testing-related targets\n\u251c\u2500\u2500 accessibility.mk      # Accessibility-related targets\n\u251c\u2500\u2500 ci.mk                 # CI/CD-related targets\n\u251c\u2500\u2500 maintenance.mk        # Maintenance-related targets\n\u251c\u2500\u2500 documentation.mk      # Documentation-related targets\n\u251c\u2500\u2500 docker.mk             # Docker-related targets\n\u2514\u2500\u2500 environment.mk        # Environment-related targets\n</code></pre>"},{"location":"app/development/makefile/#core-development-targets","title":"Core Development Targets","text":""},{"location":"app/development/makefile/#project-setup","title":"Project Setup","text":"<ul> <li><code>make start</code> - Initial setup after cloning the repository</li> <li><code>make branch</code> - Create a new branch using the interactive CLI</li> <li><code>make install</code> - Install all dependencies (backend and frontend)</li> <li><code>make dev</code> - Start development mode with hot reload</li> </ul>"},{"location":"app/development/makefile/#code-quality","title":"Code Quality","text":"<ul> <li><code>make format-backend</code> - Format backend code using Black</li> <li><code>make format-frontend</code> - Format frontend code using Prettier</li> <li><code>make format-all</code> - Format all code (backend and frontend)</li> <li><code>make lint-backend</code> - Lint backend code using Ruff</li> <li><code>make lint-frontend</code> - Lint frontend code using ESLint</li> <li><code>make lint-all</code> - Lint all code (backend and frontend)</li> <li><code>make style-backend</code> - Style check backend code</li> <li><code>make style-frontend</code> - Style check frontend code</li> <li><code>make style-all</code> - Style check all code</li> <li><code>make pretty</code> - Run all formatting, linting, and style checks</li> </ul>"},{"location":"app/development/makefile/#security-targets","title":"Security Targets","text":"<ul> <li><code>make security-backend</code> - Security check backend using Bandit</li> <li><code>make security-frontend</code> - Security check frontend using npm audit</li> <li><code>make security-all</code> - Security check all code</li> <li><code>make security-scan</code> - Run comprehensive security scan</li> </ul>"},{"location":"app/development/makefile/#testing-targets","title":"Testing Targets","text":"<ul> <li><code>make test-unit-backend</code> - Run backend unit tests</li> <li><code>make test-unit-frontend</code> - Run frontend unit tests</li> <li><code>make test-unit-all</code> - Run all unit tests</li> <li><code>make test-integration</code> - Run integration tests</li> <li><code>make test-e2e</code> - Run end-to-end tests</li> <li><code>make test-coverage</code> - Generate test coverage report</li> </ul>"},{"location":"app/development/makefile/#accessibility-targets","title":"Accessibility Targets","text":"<ul> <li><code>make a11y-audit</code> - Run accessibility audit</li> <li><code>make a11y-lighthouse</code> - Run Lighthouse performance checks</li> <li><code>make a11y-wcag</code> - Run WCAG compliance checks</li> <li><code>make a11y-report</code> - Generate accessibility report</li> </ul>"},{"location":"app/development/makefile/#cicd-targets","title":"CI/CD Targets","text":"<ul> <li><code>make ci-validate</code> - Run pre-commit checks</li> <li><code>make ci-build</code> - Run full CI pipeline locally</li> <li><code>make ci-test</code> - Run CI test suite</li> </ul>"},{"location":"app/development/makefile/#github-actions-workflow-testing","title":"GitHub Actions Workflow Testing","text":"<ul> <li><code>make act-test</code> - Show available GitHub Actions workflow tests</li> <li><code>make act-test-main</code> - Test main-branch.yml workflow</li> <li><code>make act-test-protection</code> - Test branch-protection.yml workflow</li> <li><code>make act-test-all</code> - Test all workflows</li> <li><code>make act-test-dry-run</code> - Dry run of workflows (no execution)</li> <li><code>make act-test-job</code> - Test specific job in a workflow (usage: <code>make act-test-job workflow=main-branch.yml job=lint event=pull_request</code>)</li> </ul>"},{"location":"app/development/makefile/#documentation-targets","title":"Documentation Targets","text":"<ul> <li><code>make docs</code> - Generate all documentation (API, frontend, backend, architecture)</li> <li><code>make docs-api</code> - Generate API documentation using pdoc</li> <li><code>make docs-frontend</code> - Generate frontend documentation</li> <li><code>make docs-backend</code> - Generate backend documentation</li> <li><code>make docs-architecture</code> - Generate architecture documentation</li> <li><code>make docs-serve</code> - Serve documentation locally</li> <li><code>make docs-validate</code> - Validate documentation</li> <li><code>make docs-clean</code> - Clean generated documentation</li> </ul>"},{"location":"app/development/makefile/#docker-management-targets","title":"Docker Management Targets","text":"<ul> <li><code>make docker-build</code> - Build all Docker containers</li> <li><code>make docker-build-frontend</code> - Build frontend container</li> <li><code>make docker-build-backend</code> - Build backend container</li> <li><code>make docker-push</code> - Push all containers to registry</li> <li><code>make docker-push-frontend</code> - Push frontend container</li> <li><code>make docker-push-backend</code> - Push backend container</li> <li><code>make docker-pull</code> - Pull all containers from registry</li> <li><code>make docker-pull-frontend</code> - Pull frontend container</li> <li><code>make docker-pull-backend</code> - Pull backend container</li> <li><code>make docker-prune</code> - Clean up Docker system</li> <li><code>make docker-logs</code> - Show Docker container logs</li> <li><code>make docker-stats</code> - Show Docker container stats</li> <li><code>make docker-shell</code> - Open shell in specified container</li> </ul>"},{"location":"app/development/makefile/#environment-management-targets","title":"Environment Management Targets","text":"<ul> <li><code>make env-dev</code> - Setup development environment</li> <li><code>make env-staging</code> - Setup staging environment</li> <li><code>make env-prod</code> - Setup production environment</li> <li><code>make env-switch</code> - Switch between environments</li> <li><code>make env-validate</code> - Validate environment configuration</li> <li><code>make env-secrets</code> - Generate environment secrets</li> <li><code>make env-backup</code> - Backup environment files</li> <li><code>make env-restore</code> - Restore environment from backup</li> </ul>"},{"location":"app/development/makefile/#maintenance-targets","title":"Maintenance Targets","text":"<ul> <li><code>make clean</code> - Clean temporary files</li> <li><code>make prune</code> - Clean Docker, Node, and Python artifacts</li> <li><code>make update</code> - Update all dependencies</li> </ul>"},{"location":"app/development/makefile/#common-workflows","title":"Common Workflows","text":""},{"location":"app/development/makefile/#starting-a-new-feature","title":"Starting a New Feature","text":"<pre><code>make branch  # Create a new feature branch\nmake install # Install dependencies\nmake dev     # Start development server\n</code></pre>"},{"location":"app/development/makefile/#running-tests","title":"Running Tests","text":"<pre><code>make test-unit-all    # Run all unit tests\nmake test-integration # Run integration tests\nmake test-e2e        # Run end-to-end tests\n</code></pre>"},{"location":"app/development/makefile/#code-quality-checks","title":"Code Quality Checks","text":"<pre><code>make pretty          # Run all formatting and linting\nmake security-all    # Run security checks\nmake a11y-audit      # Run accessibility checks\n</code></pre>"},{"location":"app/development/makefile/#documentation","title":"Documentation","text":"<pre><code>make docs           # Generate all documentation\nmake docs-serve     # Serve documentation locally\n</code></pre>"},{"location":"app/development/makefile/#docker-operations","title":"Docker Operations","text":"<pre><code>make docker-build   # Build containers\nmake docker-push    # Push to registry\nmake docker-prune   # Clean up Docker system\n</code></pre>"},{"location":"app/development/makefile/#cicd-workflow-testing","title":"CI/CD Workflow Testing","text":"<pre><code>make act-test           # Show available workflow tests\nmake act-test-dry-run   # Dry run of workflows without execution\nmake act-test-main      # Test main branch workflow\nmake act-test-job workflow=main-branch.yml job=lint event=pull_request  # Test specific job\n</code></pre>"},{"location":"app/development/makefile/#best-practices","title":"Best Practices","text":"<ol> <li>Always use the Makefile for all project tasks rather than running individual tools directly</li> <li>Always run <code>make pretty</code> before committing changes</li> <li>Run <code>make test-unit-all</code> before pushing changes</li> <li>Use <code>make branch</code> to create new branches</li> <li>Keep dependencies updated with <code>make update</code></li> <li>Clean up regularly with <code>make prune</code></li> <li>Test GitHub Actions workflows locally with <code>make act-test-*</code> commands before pushing to GitHub</li> <li>Use <code>make act-test-job</code> for testing specific jobs when debugging workflow issues</li> </ol>"},{"location":"app/development/makefile/#troubleshooting","title":"Troubleshooting","text":"<ol> <li>If a target fails, check the error message and dependencies</li> <li>Use <code>make clean</code> to remove temporary files</li> <li>For Docker issues, try <code>make docker-prune</code></li> <li>For environment issues, use <code>make env-validate</code></li> </ol>"},{"location":"app/development/makefile/#contributing","title":"Contributing","text":"<p>When adding new targets:</p> <ol> <li>Add the target to the appropriate section file</li> <li>Add help text in <code>variables.mk</code></li> <li>Update this documentation</li> <li>Test the new target using <code>scripts/test_makefile.sh</code></li> </ol>"},{"location":"app/development/makefile/#backend-commands","title":"Backend Commands","text":"<ul> <li><code>make backend-lint</code> - Run backend linting using Ruff</li> </ul>"},{"location":"app/development/scripts/","title":"Development Scripts","text":"<p>This document provides an overview of the utility scripts available in the project. These scripts are designed to streamline common development tasks and ensure consistency across different environments.</p>"},{"location":"app/development/scripts/#table-of-contents","title":"Table of Contents","text":""},{"location":"app/development/scripts/#deployment-scripts","title":"Deployment Scripts","text":""},{"location":"app/development/scripts/#deploy-appsh","title":"<code>deploy-app.sh</code>","text":"<p>A unified script for building, pushing, and deploying the application.</p> <p>Usage:</p>"},{"location":"app/docs/","title":"DevOps Demo Application Documentation","text":"<p>Welcome to the documentation for the DevOps Demo Application. This directory contains comprehensive documentation for all aspects of the project.</p>"},{"location":"app/docs/#documentation-structure","title":"Documentation Structure","text":"<ul> <li> <p>Development</p> </li> <li> <p>Development Guide - How to set up and run the application for local development</p> </li> <li> <p>Development Scripts - Utility scripts for development, testing, and deployment</p> </li> <li> <p>Deployment</p> </li> <li> <p>Deployment Guide - How to deploy the application to AWS ECS using GitHub Actions</p> </li> <li> <p>Workflows</p> </li> <li> <p>This directory will contain documentation for GitHub Actions workflows</p> </li> <li> <p>Git Hooks - Documentation for the pre-commit git hooks setup</p> </li> <li> <p>Release Notes - Comprehensive changelog of all project changes</p> </li> </ul>"},{"location":"app/docs/#component-specific-documentation","title":"Component-Specific Documentation","text":"<ul> <li>Backend README - Documentation specific to the backend application</li> <li>Frontend README - Documentation specific to the frontend application</li> </ul>"},{"location":"app/docs/#contributing-to-documentation","title":"Contributing to Documentation","text":"<p>When adding new documentation:</p> <ol> <li>Place it in the appropriate subdirectory based on its category</li> <li>Update this index file to include a link to the new documentation</li> <li>Follow the established Markdown formatting conventions</li> <li>Include clear headings, code examples, and explanations</li> </ol> <p>For substantial documentation changes, please create a feature branch and submit a pull request.</p>"},{"location":"app/docs/BRANCHING_STRATEGY/","title":"Updated Branching Strategy","text":""},{"location":"app/docs/BRANCHING_STRATEGY/#workflow-overview","title":"Workflow Overview","text":"<pre><code>graph TD\n    A[feat/*] --&gt;|Auto-PR| B(dev)\n    C[fix/*] --&gt;|Auto-PR| B\n    B --&gt;|Manual PR| D[main]\n\n    D --&gt;|Production| E[ghcr.io/org/repo:version]\n    D --&gt;|Latest| F[ghcr.io/org/repo:latest]\n    B --&gt;|Staging| G[ghcr.io/org/repo:version-stg]\n    B --&gt;|Staging Latest| H[ghcr.io/org/repo:latest-stg]\n    A --&gt;|Feature| I[ghcr.io/org/repo:commit-sha]\n    C --&gt;|Fix| I</code></pre> <ol> <li>Main Branch (<code>main</code>):</li> <li>Production-ready code</li> <li>Protected - no direct pushes</li> <li>Only accepts PRs from <code>dev</code> branch</li> <li> <p>Merge triggers:</p> <ul> <li>Production image build (ghcr.io/org/repo:version)</li> <li>Latest tag update (ghcr.io/org/repo:latest)</li> <li>Version tag (semver)</li> </ul> </li> <li> <p>Development Branch (<code>dev</code>):</p> </li> <li>Staging environment</li> <li>Accepts PRs from <code>feat/*</code> and <code>fix/*</code> branches</li> <li> <p>Merge triggers:</p> <ul> <li>Staging image build (ghcr.io/org/repo:version-stg)</li> <li>Auto-PR creation to <code>main</code></li> </ul> </li> <li> <p>Feature Branches (<code>feat/*</code>):</p> </li> <li>Created from <code>dev</code> branch</li> <li>Push triggers:<ul> <li>Auto-PR to <code>dev</code></li> <li>CI tests</li> </ul> </li> <li> <p>Naming: <code>feat/description</code> (e.g., <code>feat/user-auth</code>)</p> </li> <li> <p>Fix Branches (<code>fix/*</code>):</p> </li> <li>Created from <code>dev</code> branch</li> <li>Push triggers:<ul> <li>Auto-PR to <code>dev</code></li> <li>CI tests</li> </ul> </li> <li>Can use <code>-automerge</code> suffix for critical fixes</li> <li>Naming: <code>fix/description</code> (e.g., <code>fix/login-bug</code>)</li> </ol>"},{"location":"app/docs/BRANCHING_STRATEGY/#image-tagging-strategy","title":"Image Tagging Strategy","text":"Branch Type Image Tag Format Registry Location feat/fix :commit-sha ghcr.io/org/repo dev :version-stg ghcr.io/org/repo main :version + :latest ghcr.io/org/repo"},{"location":"app/docs/BRANCHING_STRATEGY/#implementation-requirements","title":"Implementation Requirements","text":"<ol> <li>GitHub Actions:</li> <li>Auto-PR creation on push</li> <li>Image building/pushing</li> <li>Version tagging</li> <li> <p>Status checks</p> </li> <li> <p>Branch Protection:</p> </li> <li><code>main</code>: Require PR, status checks, review</li> <li><code>dev</code>: Require PR, status checks</li> <li> <p><code>feat/fix</code>: Require status checks</p> </li> <li> <p>Scripts:</p> </li> <li>Updated <code>create-branch.js</code> to enforce naming</li> <li> <p>Pre-push hooks to prevent direct pushes to protected branches</p> </li> <li> <p>Version Management:</p> </li> <li>Semantic versioning</li> <li>Automated changelog generation</li> <li>Release notes</li> </ol>"},{"location":"app/docs/BRANCHING_STRATEGY/#setup-instructions","title":"Setup Instructions","text":"<pre><code># Install dependencies\npnpm install\n\n# Setup Git hooks\npre-commit install --hook-type pre-commit --hook-type commit-msg --hook-type pre-push\n</code></pre>"},{"location":"app/docs/BRANCHING_STRATEGY/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Always create branches using the interactive tool:    <pre><code>node scripts/create-branch.js\n</code></pre></p> </li> <li> <p>Keep branches focused and short-lived</p> </li> <li> <p>Use meaningful, descriptive branch names</p> </li> <li> <p>Regularly sync with upstream dev branch</p> </li> </ol>"},{"location":"app/docs/CHANGELOG/","title":"Changelog","text":""},{"location":"app/docs/CHANGELOG/#test-update","title":"Test Update","text":"<ul> <li>Initial commit by Test User on 2025-03-25</li> <li>Add test feature by Test User on 2025-03-25</li> </ul>"},{"location":"app/docs/VERSION-MANAGEMENT/","title":"Version Management","text":"<p>This document explains how version management works in this repository and how to avoid merge conflicts with the VERSION file.</p>"},{"location":"app/docs/VERSION-MANAGEMENT/#overview","title":"Overview","text":"<p>This repository uses semantic versioning (SemVer) for managing versions. The version is stored in two places:</p> <ol> <li>VERSION file: Used for Docker image tagging and Helm chart versioning</li> <li>package.json: Used for npm package versioning and semantic-release</li> </ol> <p>The version is automatically bumped based on the type of changes being made:</p> <ul> <li>Major version (X.0.0): Breaking changes (branches with \"breaking\" or \"!\" in the name)</li> <li>Minor version (0.X.0): New features (branches starting with \"feat/\")</li> <li>Patch version (0.0.X): Bug fixes and other changes (branches starting with \"fix/\")</li> </ul>"},{"location":"app/docs/VERSION-MANAGEMENT/#automatic-version-bumping","title":"Automatic Version Bumping","text":"<p>Version bumping happens automatically at two points in the workflow:</p> <ol> <li>When opening a PR to the <code>stg</code> branch:</li> <li>The VERSION file is bumped based on the branch name</li> <li>package.json is synchronized with the VERSION file</li> <li> <p>The PR title is updated to include the new version</p> </li> <li> <p>When merging a PR to the <code>main</code> branch (except for stg \u2192 main PRs):</p> </li> <li>package.json is bumped based on the branch name</li> <li>VERSION file is synchronized with package.json</li> <li>A GitHub Release is created with the new version</li> </ol>"},{"location":"app/docs/VERSION-MANAGEMENT/#automatic-conflict-resolution","title":"Automatic Conflict Resolution","text":"<p>To avoid merge conflicts in the VERSION file, we've implemented a custom Git merge driver that automatically resolves conflicts by keeping the higher version number.</p>"},{"location":"app/docs/VERSION-MANAGEMENT/#setup","title":"Setup","text":"<p>To set up the custom merge driver, run the following command:</p> <pre><code>./scripts/version-management/setup-version-merge.sh\n</code></pre> <p>This only needs to be done once per local repository.</p>"},{"location":"app/docs/VERSION-MANAGEMENT/#how-it-works","title":"How It Works","text":"<ol> <li>The <code>.gitattributes</code> file specifies that the VERSION file should use a custom merge driver called <code>version-merge</code>.</li> <li>The <code>scripts/version-management/version-merge.sh</code> script implements the merge driver logic, which:</li> <li>Compares the version numbers from both branches</li> <li>Keeps the higher version number</li> <li>Resolves the conflict automatically</li> </ol>"},{"location":"app/docs/VERSION-MANAGEMENT/#manual-conflict-resolution","title":"Manual Conflict Resolution","text":"<p>If you encounter a merge conflict in the VERSION file and haven't set up the custom merge driver, you should:</p> <ol> <li>Always keep the higher version number</li> <li>If the versions are equal, keep the current branch's version</li> </ol>"},{"location":"app/docs/VERSION-MANAGEMENT/#version-synchronization","title":"Version Synchronization","text":"<p>To ensure that the VERSION file and package.json always have the same version, we've implemented a synchronization script:</p> <pre><code># Sync VERSION file to package.json\nnode scripts/version-management/sync-versions.js to-package\n\n# Sync package.json to VERSION file\nnode scripts/version-management/sync-versions.js to-version\n\n# Automatically determine which file has the higher version and sync accordingly\nnode scripts/version-management/sync-versions.js auto\n</code></pre> <p>This script is automatically run in the CI/CD workflows, but you can also run it manually if needed.</p>"},{"location":"app/docs/VERSION-MANAGEMENT/#best-practices","title":"Best Practices","text":"<ol> <li>Set up the custom merge driver to avoid manual conflict resolution</li> <li>Don't manually edit the VERSION file unless absolutely necessary</li> <li>Use conventional commit messages to ensure proper version bumping</li> <li>If you must manually bump the version, always increment it (never decrement)</li> <li>Use the sync script if you notice that the VERSION file and package.json have different versions</li> </ol>"},{"location":"app/docs/api-docs/","title":"API Documentation","text":""},{"location":"app/docs/api-docs/#overview","title":"Overview","text":"<p>The FastAPI application provides a RESTful API with automatic OpenAPI documentation.</p>"},{"location":"app/docs/api-docs/#accessing-the-documentation","title":"Accessing the Documentation","text":"<p>When the application is running, you can access the API documentation at:</p> <ul> <li>Swagger UI: <code>http://localhost:8000/docs</code></li> <li>ReDoc: <code>http://localhost:8000/redoc</code></li> </ul>"},{"location":"app/docs/api-docs/#authentication","title":"Authentication","text":"<p>Most API endpoints require authentication. The API uses JWT tokens for authentication.</p>"},{"location":"app/docs/api-docs/#getting-a-token","title":"Getting a Token","text":"<pre><code>POST /api/v1/login/access-token\n</code></pre> <p>Request body: <pre><code>{\n  \"username\": \"user@example.com\",\n  \"password\": \"password\"\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\",\n  \"token_type\": \"bearer\"\n}\n</code></pre></p>"},{"location":"app/docs/api-docs/#using-the-token","title":"Using the Token","text":"<p>Include the token in the Authorization header:</p> <pre><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre>"},{"location":"app/docs/api-docs/#api-endpoints","title":"API Endpoints","text":"<p>The API is organized into the following sections:</p> <ul> <li><code>/api/v1/users</code> - User management</li> <li><code>/api/v1/items</code> - Item management</li> <li><code>/api/v1/login</code> - Authentication</li> </ul> <p>For detailed information about each endpoint, refer to the Swagger UI or ReDoc documentation.</p>"},{"location":"app/docs/ci-cd-workflow/","title":"CI/CD Workflow","text":"<p>This document describes the CI/CD workflow implemented in this project.</p>"},{"location":"app/docs/ci-cd-workflow/#overview","title":"Overview","text":"<p>The CI/CD pipeline automates the following process:</p> <ol> <li>Feature branch -&gt; Auto PR creation to staging</li> <li>PR checks (tests, linting, formatting, security)</li> <li>Merge to staging -&gt; Build and tag Docker images</li> <li>Auto PR creation from staging to main</li> <li>Merge to main -&gt; Retag images with semantic versioning</li> </ol>"},{"location":"app/docs/ci-cd-workflow/#workflow-details","title":"Workflow Details","text":""},{"location":"app/docs/ci-cd-workflow/#1-feature-branch-development","title":"1. Feature Branch Development","text":"<ul> <li>Create a feature branch with prefix <code>feat/</code> or a fix branch with prefix <code>fix/</code></li> <li>Push changes to the branch</li> <li>GitHub Actions automatically creates a PR to the <code>stg</code> branch</li> </ul>"},{"location":"app/docs/ci-cd-workflow/#2-pr-checks","title":"2. PR Checks","text":"<p>When a PR is created to the <code>stg</code> branch, the following checks are run: - Linting - Formatting - Security scanning - Tests (backend and frontend)</p>"},{"location":"app/docs/ci-cd-workflow/#3-merge-to-staging","title":"3. Merge to Staging","text":"<p>When a PR is merged to the <code>stg</code> branch: - Docker images are built for both backend and frontend - Images are tagged with:   - Git hash and branch type: <code>ghcr.io/repo-name-backend:&lt;git-hash&gt;-&lt;branch-type&gt;</code>   - Staging tag: <code>ghcr.io/repo-name-backend:stg</code> - Images are pushed to GitHub Container Registry (GHCR) - A PR is automatically created from <code>stg</code> to <code>main</code> - The feature branch is deleted</p>"},{"location":"app/docs/ci-cd-workflow/#4-merge-to-main","title":"4. Merge to Main","text":"<p>When a PR is merged to the <code>main</code> branch: - The staging images are pulled - Images are retagged with:   - Semantic version (based on branch type):     - <code>feat/</code> branches trigger a minor version bump (0.1.0 -&gt; 0.2.0)     - <code>fix/</code> branches trigger a patch version bump (0.1.0 -&gt; 0.1.1)   - Latest tag: <code>ghcr.io/repo-name-backend:latest</code> - The VERSION file is updated with the new version - A comment is added to the PR with the new version and image details</p>"},{"location":"app/docs/ci-cd-workflow/#semantic-versioning","title":"Semantic Versioning","text":"<p>The project follows semantic versioning (MAJOR.MINOR.PATCH): - MAJOR: Breaking changes (manually incremented) - MINOR: New features (automatically incremented for <code>feat/</code> branches) - PATCH: Bug fixes (automatically incremented for <code>fix/</code> branches)</p>"},{"location":"app/docs/ci-cd-workflow/#testing-the-workflow-locally","title":"Testing the Workflow Locally","text":"<p>You can test the CI/CD workflow locally using the following command:</p> <pre><code>make test-ci-workflow\n</code></pre> <p>Or test a specific workflow:</p> <pre><code>./scripts/test-ci-workflow.sh -w feature-branch-pr.yml -e push -b feat/my-feature\n</code></pre>"},{"location":"app/docs/ci-cd-workflow/#workflow-files","title":"Workflow Files","text":"<ul> <li><code>.github/workflows/feature-branch-pr.yml</code>: Creates PRs from feature branches to staging</li> <li><code>.github/workflows/pr-checks.yml</code>: Runs checks on PRs to staging</li> <li><code>.github/workflows/merge-to-staging.yml</code>: Builds and pushes images when PRs are merged to staging</li> <li><code>.github/workflows/merge-to-main.yml</code>: Retags images when PRs are merged to main</li> </ul>"},{"location":"app/docs/git-hooks/","title":"Git Hooks with pre-commit","text":"<p>This project uses pre-commit to manage Git hooks for code quality enforcement.</p>"},{"location":"app/docs/git-hooks/#what-is-pre-commit","title":"What is pre-commit?","text":"<p>pre-commit is a framework for managing and maintaining multi-language pre-commit hooks. It helps maintain code quality by running checks before commits and pushes, ensuring consistent code quality across the project.</p>"},{"location":"app/docs/git-hooks/#features","title":"Features","text":"<p>Our pre-commit configuration provides:</p> <ul> <li> <p>Pre-commit hooks:</p> </li> <li> <p>Code formatting with Black</p> </li> <li>Linting and auto-fixing with Ruff</li> <li>Security scanning with Bandit</li> <li>Trailing whitespace removal</li> <li>YAML validation</li> <li> <p>Merge conflict detection</p> </li> <li> <p>Pre-push hooks:</p> </li> <li> <p>Running tests with pytest</p> </li> <li> <p>Commit message validation:</p> </li> <li>Enforcing conventional commit format</li> </ul>"},{"location":"app/docs/git-hooks/#setup","title":"Setup","text":"<p>To set up pre-commit in your development environment:</p> <pre><code># Make the setup script executable\nchmod +x scripts/setup-precommit.sh\n\n# Run the setup script\n./scripts/setup-precommit.sh\n\n# Or install directly\npip install pre-commit\npre-commit install --hook-type pre-commit --hook-type commit-msg --hook-type pre-push\n</code></pre>"},{"location":"app/docs/git-hooks/#manual-usage","title":"Manual Usage","text":"<p>You can manually run the hooks:</p> <pre><code># Run all pre-commit hooks\npre-commit run --all-files\n\n# Run all pre-push hooks\npre-commit run --hook-stage pre-push --all-files\n\n# Run a specific hook\npre-commit run black --all-files\n</code></pre>"},{"location":"app/docs/git-hooks/#configuration","title":"Configuration","text":"<p>The pre-commit configuration is stored in <code>.pre-commit-config.yaml</code> at the root of the project. You can modify this file to add, remove, or customize hooks.</p>"},{"location":"app/docs/git-hooks/#skipping-hooks","title":"Skipping Hooks","text":"<p>In rare cases when you need to bypass the hooks:</p> <pre><code># Skip all hooks for a commit\ngit commit --no-verify -m \"Your message\"\n\n# Skip specific hooks\nSKIP=black,ruff git commit -m \"Your message\"\n</code></pre> <p>Note: Skipping hooks should be done only in exceptional circumstances, as it bypasses important code quality checks.</p>"},{"location":"app/docs/release-notes/","title":"Release Notes","text":""},{"location":"app/docs/release-notes/#latest-changes","title":"Latest Changes","text":""},{"location":"app/docs/release-notes/#features","title":"Features","text":"<ul> <li> <p>\u2728 Add development workflow automation. PR #2.</p> </li> <li> <p>Add interactive CLI for feature branch creation (<code>scripts/feature.sh</code>)</p> </li> <li>Implement automatic PR creation for feature branches</li> <li> <p>Add commit history to auto-generated PRs</p> </li> <li> <p>\u2728 Add comprehensive development workflow strategy. PR #1.</p> </li> <li>Implement branch strategy (feat/*, dev, main)</li> <li>Add pre-commit hooks for code quality</li> <li>Set up automated testing and deployment pipelines</li> <li>Document development guidelines</li> </ul>"},{"location":"app/docs/release-notes/#infrastructure","title":"Infrastructure","text":"<ul> <li>\ud83d\udd27 Update pre-commit configuration with comprehensive checks:</li> <li>Style checks (black, flake8, eslint, prettier)</li> <li>Security checks (bandit, safety, npm audit)</li> <li>Linting &amp; formatting for both backend and frontend</li> </ul>"},{"location":"app/docs/release-notes/#documentation","title":"Documentation","text":"<ul> <li>\ud83d\udcdd Add detailed development workflow documentation</li> <li>\ud83d\udcdd Add PR template for consistent reviews</li> <li>\ud83d\udcdd Update README with comprehensive development guidelines</li> </ul>"},{"location":"app/docs/release-notes/#fixes","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix required password validation when editing user fields. PR #1508 by @jpizquierdo.</li> </ul>"},{"location":"app/docs/release-notes/#refactors","title":"Refactors","text":"<ul> <li>\ud83c\udfa8 Add minor UI tweaks in Skeletons and other components. PR #1507 by @alejsdev.</li> <li>\ud83c\udfa8 Add minor UI tweaks. PR #1506 by @alejsdev.</li> </ul>"},{"location":"app/docs/release-notes/#080","title":"0.8.0","text":""},{"location":"app/docs/release-notes/#features_1","title":"Features","text":"<ul> <li>\ud83d\udec2 Migrate to Chakra UI v3 . PR #1496 by @alejsdev.</li> <li>\u2728 Add private, local only, API for usage in E2E tests. PR #1429 by @patrick91.</li> <li>\u2728 Migrate to latest openapi-ts. PR #1430 by @patrick91.</li> </ul>"},{"location":"app/docs/release-notes/#fixes_1","title":"Fixes","text":"<ul> <li>\ud83e\uddd1\u200d\ud83d\udd27 Replace correct value for 'htmlFor'. PR #1456 by @wesenbergg.</li> </ul>"},{"location":"app/docs/release-notes/#refactors_1","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Redirect the user to <code>login</code> if we get 401/403. PR #1501 by @alejsdev.</li> <li>\ud83d\udc1b Refactor reset password test to create normal user instead of using super user. PR #1499 by @alejsdev.</li> <li>\u267b\ufe0f Replace email types from <code>str</code> to <code>EmailStr</code> in <code>config.py</code>. PR #1492 by @jpizquierdo.</li> <li>\ud83d\udd27 Remove unused context from router creation. PR #1498 by @alejsdev.</li> <li>\u267b\ufe0f Remove redundant item deletion code leveraging cascade delete. PR #1481 by @nauanbek.</li> <li>\u270f\ufe0f Fix a couple of spelling mistakes. PR #1485 by @rjmunro.</li> <li>\ud83c\udfa8 Move <code>prefix</code> and <code>tags</code> to routers. PR #1439 by @patrick91.</li> <li>\u267b\ufe0f Remove modify id script in favor of openapi-ts config. PR #1434 by @patrick91.</li> <li>\ud83d\udc77 Improve Playwright CI speed: sharding (parallel runs), run in Docker to use cache, use env vars. PR #1405 by @tiangolo.</li> <li>\u267b\ufe0f Add PaginationFooter component. PR #1381 by @saltie2193.</li> <li>\u267b\ufe0f Refactored code to use encryption algorithm name from settings for consistency. PR #1160 by @sameeramin.</li> <li>\ud83d\udd0a Enable logging for email utils by default. PR #1374 by @ihmily.</li> <li>\ud83d\udd27 Add <code>ENV PYTHONUNBUFFERED=1</code> to log output directly to Docker. PR #1378 by @tiangolo.</li> <li>\ud83d\udca1 Remove unnecessary comment. PR #1260 by @sebhani.</li> </ul>"},{"location":"app/docs/release-notes/#upgrades","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Update Dockerfile to use uv version 0.5.11. PR #1454 by @alejsdev.</li> </ul>"},{"location":"app/docs/release-notes/#docs","title":"Docs","text":"<ul> <li>\ud83d\udcdd Removing deprecated manual client SDK step. PR #1494 by @chandy.</li> <li>\ud83d\udcdd Update Frontend README.md. PR #1462 by @getmarkus.</li> <li>\ud83d\udcdd Update <code>frontend/README.md</code> to also remove Playwright when removing Frontend. PR #1452 by @youben11.</li> <li>\ud83d\udcdd Update <code>deployment.md</code>, instructions to install GitHub Runner in non-root VMs. PR #1412 by @tiangolo.</li> <li>\ud83d\udcdd Add MailCatcher to <code>development.md</code>. PR #1387 by @tobiase.</li> </ul>"},{"location":"app/docs/release-notes/#internal","title":"Internal","text":"<ul> <li>\ud83d\udd27 Configure path alias for cleaner imports. PR #1497 by @alejsdev.</li> <li>Bump vite from 5.0.13 to 5.4.14 in /frontend. PR #1469 by @dependabot[bot].</li> <li>\u2b06 Bump astral-sh/setup-uv from 4 to 5. PR #1453 by @dependabot[bot].</li> <li>\u2b06 Bump astral-sh/setup-uv from 3 to 4. PR #1433 by @dependabot[bot].</li> <li>\u2b06 Bump tiangolo/latest-changes from 0.3.1 to 0.3.2. PR #1418 by @dependabot[bot].</li> <li>\ud83d\udc77 Update issue manager workflow. PR #1398 by @alejsdev.</li> <li>\ud83d\udc77 Fix smokeshow, checkout files on CI. PR #1395 by @tiangolo.</li> <li>\ud83d\udc77 Update <code>labeler.yml</code>. PR #1388 by @tiangolo.</li> <li>\ud83d\udd27 Add .auth playwright folder to <code>.gitignore</code>. PR #1383 by @justin-p.</li> <li>\u2b06\ufe0f Bump rollup from 4.6.1 to 4.22.5 in /frontend. PR #1379 by @dependabot[bot].</li> <li>\u2b06 Bump astral-sh/setup-uv from 2 to 3. PR #1364 by @dependabot[bot].</li> <li>\ud83d\udc77 Update pre-commit end-of-file-fixer hook to exclude email-templates. PR #1296 by @goabonga.</li> <li>\u2b06 Bump tiangolo/issue-manager from 0.5.0 to 0.5.1. PR #1332 by @dependabot[bot].</li> <li>\ud83d\udd27 Run task by the same Python environment used to run Copier. PR #1157 by @waketzheng.</li> <li>\ud83d\udc77 Tweak generate client to error out if there are errors. PR #1377 by @tiangolo.</li> <li>\ud83d\udc77 Generate and commit client only on same repo PRs, on forks, show the error. PR #1376 by @tiangolo.</li> </ul>"},{"location":"app/docs/release-notes/#071","title":"0.7.1","text":""},{"location":"app/docs/release-notes/#highlights","title":"Highlights","text":"<ul> <li>Migrate from Poetry to <code>uv</code>.</li> <li>Simplifications and improvements for Docker Compose files, Traefik Dockerfiles.</li> <li>Make the API use its own domain <code>api.example.com</code> and the frontend use <code>dashboard.example.com</code>. This would make it easier to deploy them separately if you needed that.</li> <li>The backend and frontend on Docker Compose now listen on the same port as the local development servers, this way you can stop the Docker Compose services and run the local development servers without changing the frontend configuration.</li> </ul>"},{"location":"app/docs/release-notes/#features_2","title":"Features","text":"<ul> <li>\ud83e\ude7a Add DB healthcheck. PR #1342 by @tiangolo.</li> </ul>"},{"location":"app/docs/release-notes/#refactors_2","title":"Refactors","text":"<ul> <li>\u267b\ufe0f Update settings to use top level <code>.env</code> file. PR #1359 by @tiangolo.</li> <li>\u2b06\ufe0f Migrate from Poetry to uv. PR #1356 by @tiangolo.</li> <li>\ud83d\udd25 Remove logic for development dependencies and Jupyter, it was never documented, and I no longer use that trick. PR #1355 by @tiangolo.</li> <li>\u267b\ufe0f Use Docker Compose <code>watch</code>. PR #1354 by @tiangolo.</li> <li>\ud83d\udd27 Use plain base official Python Docker image. PR #1351 by @tiangolo.</li> <li>\ud83d\ude9a Move location of scripts to simplify file structure. PR #1352 by @tiangolo.</li> <li>\u267b\ufe0f Refactor prestart (migrations), move that to its own container. PR #1350 by @tiangolo.</li> <li>\u267b\ufe0f Include <code>FRONTEND_HOST</code> in CORS origins by default. PR #1348 by @tiangolo.</li> <li>\u267b\ufe0f Simplify domains with <code>api.example.com</code> for API and <code>dashboard.example.com</code> for frontend, improve local development with <code>localhost</code>. PR #1344 by @tiangolo.</li> <li>\ud83d\udd25 Simplify Traefik, remove www-redirects that add complexity. PR #1343 by @tiangolo.</li> <li>\ud83d\udd25 Enable support for Arm Docker images in Mac, remove old patch. PR #1341 by @tiangolo.</li> <li>\u267b\ufe0f Remove duplicate information in the ItemCreate model. PR #1287 by @jjaakko.</li> </ul>"},{"location":"app/docs/release-notes/#upgrades_1","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Upgrade FastAPI. PR #1349 by @tiangolo.</li> </ul>"},{"location":"app/docs/release-notes/#docs_1","title":"Docs","text":"<ul> <li>\ud83d\udca1 Add comments to Dockerfile with uv references. PR #1357 by @tiangolo.</li> <li>\ud83d\udcdd Add Email Templates to <code>backend/README.md</code>. PR #1311 by @alejsdev.</li> </ul>"},{"location":"app/docs/release-notes/#internal_1","title":"Internal","text":"<ul> <li>\ud83d\udc77 Do not sync labels as it overrides manually added labels. PR #1307 by @tiangolo.</li> <li>\ud83d\udc77 Use uv cache on GitHub Actions. PR #1366 by @tiangolo.</li> <li>\ud83d\udc77 Update GitHub Actions format. PR #1363 by @tiangolo.</li> <li>\ud83d\udc77 Use <code>uv</code> for Python env to generate client. PR #1362 by @tiangolo.</li> <li>\ud83d\udc77 Run tests from Python environment (with <code>uv</code>), not from Docker container. PR #1361 by @tiangolo.</li> <li>\ud83d\udd28 Update <code>generate-client.sh</code> script, make it fail on errors, fix generation. PR #1360 by @tiangolo.</li> <li>\ud83d\udc77 Add GitHub Actions workflow to lint backend apart from tests. PR #1358 by @tiangolo.</li> <li>\ud83d\udc77 Improve playwright CI job. PR #1335 by @patrick91.</li> <li>\ud83d\udc77 Update <code>issue-manager.yml</code>. PR #1329 by @tiangolo.</li> <li>\ud83d\udc9a Set <code>include-hidden-files</code> to <code>True</code> when using the <code>upload-artifact</code> GH action. PR #1327 by @svlandeg.</li> <li>\ud83d\udc77\ud83c\udffb Auto-generate frontend client . PR #1320 by @alejsdev.</li> <li>\ud83d\udc1b Fix in <code>.github/labeler.yml</code>. PR #1322 by @alejsdev.</li> <li>\ud83d\udc77 Update <code>.github/labeler.yml</code>. PR #1321 by @alejsdev.</li> <li>\ud83d\udc77 Improve GitHub Actions workflows for local testing with act. PR by @jaronschulz.</li> <li>\ud83d\udc77 Update <code>latest-changes</code> GitHub Action. PR #1315 by @tiangolo.</li> <li>\ud83d\udc77 Update configs for labeler. PR #1308 by @tiangolo.</li> <li>\ud83d\udc77 Update GitHub Action labeler to add only one label. PR #1304 by @tiangolo.</li> <li>\u2b06\ufe0f Bump axios from 1.6.2 to 1.7.4 in /frontend. PR #1301 by @dependabot[bot].</li> <li>\ud83d\udc77 Update GitHub Action labeler dependencies. PR #1302 by @tiangolo.</li> <li>\ud83d\udc77 Update GitHub Action labeler permissions. PR #1300 by @tiangolo.</li> <li>\ud83d\udc77 Add GitHub Action label-checker. PR #1299 by @tiangolo.</li> <li>\ud83d\udc77 Add GitHub Action labeler. PR #1298 by @tiangolo.</li> <li>\ud83d\udc77 Add GitHub Action add-to-project. PR #1297 by @tiangolo.</li> <li>\ud83d\udc77 Update issue-manager. PR #1288 by @tiangolo.</li> </ul>"},{"location":"app/docs/release-notes/#070","title":"0.7.0","text":"<p>Lots of new things! \ud83c\udf81</p> <ul> <li>E2E tests with Playwright.</li> <li>Mailcatcher configuration, to develop and test email handling.</li> <li>Pagination.</li> <li>UUIDs for database keys.</li> <li>New user sign up.</li> <li>Support for deploying to multiple environments (staging, prod).</li> <li>Many refactors and improvements.</li> <li>Several dependency upgrades.</li> </ul>"},{"location":"app/docs/release-notes/#features_3","title":"Features","text":"<ul> <li>\u2728 Add User Settings e2e tests. PR #1271 by @alejsdev.</li> <li>\u2728 Add Reset Password e2e tests. PR #1270 by @alejsdev.</li> <li>\u2728 Add Sign Up e2e tests. PR #1268 by @alejsdev.</li> <li>\u2728 Add Sign Up and make <code>OPEN_USER_REGISTRATION=True</code> by default. PR #1265 by @alejsdev.</li> <li>\u2728 Add Login e2e tests. PR #1264 by @alejsdev.</li> <li>\u2728 Add initial setup for frontend / end-to-end tests with Playwright. PR #1261 by @alejsdev.</li> <li>\u2728 Add mailcatcher configuration. PR #1244 by @patrick91.</li> <li>\u2728 Introduce pagination in items. PR #1239 by @patrick91.</li> <li>\ud83d\uddc3\ufe0f Add max_length validation for database models and input data. PR #1233 by @estebanx64.</li> <li>\u2728 Add TanStack React Query devtools in dev build. PR #1217 by @tomerb.</li> <li>\u2728 Add support for deploying multiple environments (staging, production) to the same server. PR #1128 by @tiangolo.</li> <li>\ud83d\udc77 Update CI GitHub Actions to allow running in private repos. PR #1125 by @tiangolo.</li> </ul>"},{"location":"app/docs/release-notes/#fixes_2","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix welcome page to show logged-in user. PR #1218 by @tomerb.</li> <li>\ud83d\udc1b Fix local Traefik proxy network config to fix Gateway Timeouts. PR #1184 by @JoelGotsch.</li> <li>\u267b\ufe0f Fix tests when first superuser password is changed in .env. PR #1165 by @billzhong.</li> <li>\ud83d\udc1b Fix bug when resetting password. PR #1171 by @alejsdev.</li> <li>\ud83d\udc1b Fix 403 when the frontend has a directory without an index.html. PR #1094 by @tiangolo.</li> </ul>"},{"location":"app/docs/release-notes/#refactors_3","title":"Refactors","text":"<ul> <li>\ud83d\udea8 Fix Docker build warning. PR #1283 by @erip.</li> <li>\u267b\ufe0f Regenerate client to use UUID instead of id integers and update frontend. PR #1281 by @rehanabdul.</li> <li>\u267b\ufe0f Tweaks in frontend. PR #1273 by @alejsdev.</li> <li>\u267b\ufe0f Add random password util and refactor tests. PR #1277 by @alejsdev.</li> <li>\u267b\ufe0f Refactor models to use cascade delete relationships . PR #1276 by @alejsdev.</li> <li>\ud83d\udd25 Remove <code>USERS_OPEN_REGISTRATION</code> config, make registration enabled by default. PR #1274 by @alejsdev.</li> <li>\ud83d\udd27 Reuse database url from config in alembic setup. PR #1229 by @patrick91.</li> <li>\ud83d\udd27 Update Playwright config and tests to use env variables. PR #1266 by @alejsdev.</li> <li>\u267b\ufe0f Edit refactor db models to use UUID's instead of integer ID's. PR #1259 by @estebanx64.</li> <li>\u267b\ufe0f Update form inputs width. PR #1263 by @alejsdev.</li> <li>\u267b\ufe0f Replace deprecated utcnow() with now(timezone.utc) in utils module. PR #1247 by @jalvarezz13.</li> <li>\ud83c\udfa8 Format frontend. PR #1262 by @alejsdev.</li> <li>\u267b\ufe0f Abstraction of specific AddModal component out of the Navbar. PR #1246 by @ajbloureiro.</li> <li>\u267b\ufe0f Update <code>login.tsx</code> to prevent error if username or password are empty. PR #1257 by @jmondaud.</li> <li>\u267b\ufe0f Refactor recover password. PR #1242 by @alejsdev.</li> <li>\ud83c\udfa8 Format and lint . PR #1243 by @alejsdev.</li> <li>\ud83c\udfa8 Run biome after OpenAPI client generation. PR #1226 by @tomerb.</li> <li>\u267b\ufe0f Update DeleteConfirmation component to use new service. PR #1224 by @alejsdev.</li> <li>\u267b\ufe0f Update client services. PR #1223 by @alejsdev.</li> <li>\u2692\ufe0f Add minor frontend tweaks. PR #1210 by @alejsdev.</li> <li>\ud83d\ude9a Move assets to public folder. PR #1206 by @alejsdev.</li> <li>\u267b\ufe0f Refactor redirect labels to simplify removing the frontend. PR #1208 by @tiangolo.</li> <li>\ud83d\udd12\ufe0f Refactor migrate from python-jose to PyJWT. PR #1203 by @estebanx64.</li> <li>\ud83d\udd25 Remove duplicated code. PR #1185 by @alejsdev.</li> <li>\u267b\ufe0f Add delete_user_me endpoint and corresponding test cases. PR #1179 by @alejsdev.</li> <li>\u2705 Update test to add verification database records. PR #1178 by @estebanx64.</li> <li>\ud83d\udeb8 Use <code>useSuspenseQuery</code> to fetch members and show skeleton. PR #1174 by @patrick91.</li> <li>\ud83c\udfa8 Format Utils. PR #1173 by @alejsdev.</li> <li>\u2728 Use suspense for items page. PR #1167 by @patrick91.</li> <li>\ud83d\udeb8 Mark login field as required. PR #1166 by @patrick91.</li> <li>\ud83d\udeb8 Improve login. PR #1163 by @patrick91.</li> <li>\ud83e\udd45 Handle AxiosErrors in Login page. PR #1162 by @patrick91.</li> <li>\ud83c\udfa8 Format frontend. PR #1161 by @alejsdev.</li> <li>\u267b\ufe0f Regenerate frontend client. PR #1156 by @alejsdev.</li> <li>\u267b\ufe0f Refactor rename ModelsOut to ModelsPublic. PR #1154 by @estebanx64.</li> <li>\u267b\ufe0f Migrate frontend client generation from <code>openapi-typescript-codegen</code> to <code>@hey-api/openapi-ts</code>. PR #1151 by @alejsdev.</li> <li>\ud83d\udd25 Remove unused exports and update dependencies. PR #1146 by @alejsdev.</li> <li>\ud83d\udd27 Update sentry dns initialization following the environment settings. PR #1145 by @estebanx64.</li> <li>\u267b\ufe0f Refactor and tweaks, rename <code>UserCreateOpen</code> to <code>UserRegister</code> and others. PR #1143 by @alejsdev.</li> <li>\ud83c\udfa8 Format imports. PR #1140 by @alejsdev.</li> <li>\u267b\ufe0f Refactor and remove <code>React.FC</code>. PR #1139 by @alejsdev.</li> <li>\u267b\ufe0f Add email pattern and refactor in frontend. PR #1138 by @alejsdev.</li> <li>\ud83e\udd45 Set up Sentry for FastAPI applications. PR #1136 by @estebanx64.</li> <li>\ud83d\udd25 Remove deprecated Docker Compose version key. PR #1129 by @tiangolo.</li> <li>\ud83c\udfa8 Format with Biome . PR #1097 by @alejsdev.</li> <li>\ud83c\udfa8 Update quote style in biome formatter. PR #1095 by @alejsdev.</li> <li>\u267b\ufe0f Replace ESLint and Prettier with Biome to format and lint frontend. PR #719 by @santigandolfo.</li> <li>\ud83c\udfa8 Replace buttons styling for variants for consistency. PR #722 by @alejsdev.</li> <li>\ud83d\udee0\ufe0f Improve <code>modify-openapi-operationids.js</code>. PR #720 by @alejsdev.</li> <li>\u267b\ufe0f Replace pytest-mock with unittest.mock and remove pytest-cov. PR #717 by @estebanx64.</li> <li>\ud83d\udee0\ufe0f Minor changes in frontend. PR #715 by @alejsdev.</li> <li>\u267b Update Docker image to prevent errors in M1 Macs. PR #710 by @dudil.</li> <li>\u270f Fix typo in variable names in <code>backend/app/api/routes/items.py</code> and <code>backend/app/api/routes/users.py</code>. PR #711 by @disrupted.</li> </ul>"},{"location":"app/docs/release-notes/#upgrades_2","title":"Upgrades","text":"<ul> <li>\u2b06\ufe0f Update SQLModel to version <code>&gt;=0.0.21</code>. PR #1275 by @alejsdev.</li> <li>\u2b06\ufe0f Upgrade Traefik. PR #1241 by @tiangolo.</li> <li>\u2b06\ufe0f Bump requests from 2.31.0 to 2.32.0 in /backend. PR #1211 by @dependabot[bot].</li> <li>\u2b06\ufe0f Bump jinja2 from 3.1.3 to 3.1.4 in /backend. PR #1196 by @dependabot[bot].</li> <li>Bump gunicorn from 21.2.0 to 22.0.0 in /backend. PR #1176 by @dependabot[bot].</li> <li>Bump idna from 3.6 to 3.7 in /backend. PR #1168 by @dependabot[bot].</li> <li>\ud83c\udd99 Update React Query to TanStack Query. PR #1153 by @patrick91.</li> <li>Bump vite from 5.0.12 to 5.0.13 in /frontend. PR #1149 by @dependabot[bot].</li> <li>Bump follow-redirects from 1.15.5 to 1.15.6 in /frontend. PR #734 by @dependabot[bot].</li> </ul>"},{"location":"app/docs/release-notes/#docs_2","title":"Docs","text":"<ul> <li>\ud83d\udcdd Update links from tiangolo repo to fastapi org repo. PR #1285 by @tiangolo.</li> <li>\ud83d\udcdd Add End-to-End Testing with Playwright to frontend <code>README.md</code>. PR #1279 by @alejsdev.</li> <li>\ud83d\udcdd Update release-notes.md. PR #1220 by @alejsdev.</li> <li>\u270f\ufe0f Update <code>README.md</code>. PR #1205 by @Craz1k0ek.</li> <li>\u270f\ufe0f Fix Adminer URL in <code>deployment.md</code>. PR #1194 by @PhilippWu.</li> <li>\ud83d\udcdd Add <code>Enabling Open User Registration</code> to backend docs. PR #1191 by @alejsdev.</li> <li>\ud83d\udcdd Update release-notes.md. PR #1164 by @alejsdev.</li> <li>\ud83d\udcdd Update <code>README.md</code>. PR #716 by @alejsdev.</li> <li>\ud83d\udcdd Update instructions to clone for a private repo, including updates. PR #1127 by @tiangolo.</li> <li>\ud83d\udcdd Add docs about CI keys, LATEST_CHANGES and SMOKESHOW_AUTH_KEY. PR #1126 by @tiangolo.</li> <li>\u270f\ufe0f Fix file path in <code>backend/README.md</code> when not wanting to use migrations. PR #1116 by @leonlowitzki.</li> <li>\ud83d\udcdd Add documentation for pre-commit and code linting. PR #718 by @estebanx64.</li> <li>\ud83d\udcdd Fix localhost URLs in <code>development.md</code>. PR #1099 by @efonte.</li> <li>\u270f Update header titles for consistency. PR #708 by @codesmith-emmy.</li> <li>\ud83d\udcdd Update <code>README.md</code>, dark mode screenshot position. PR #706 by @alejsdev.</li> </ul>"},{"location":"app/docs/release-notes/#internal_2","title":"Internal","text":"<ul> <li>\ud83d\udd27 Update deploy workflows to exclude the main repository. PR #1284 by @alejsdev.</li> <li>\ud83d\udc77 Update issue-manager.yml GitHub Action permissions. PR #1278 by @tiangolo.</li> <li>\u2b06\ufe0f Bump setuptools from 69.1.1 to 70.0.0 in /backend. PR #1255 by @dependabot[bot].</li> <li>\u2b06\ufe0f Bump certifi from 2024.2.2 to 2024.7.4 in /backend. PR #1250 by @dependabot[bot].</li> <li>\u2b06\ufe0f Bump urllib3 from 2.2.1 to 2.2.2 in /backend. PR #1235 by @dependabot[bot].</li> <li>\ud83d\udd27 Ignore <code>src/routeTree.gen.ts</code> in biome. PR #1175 by @patrick91.</li> <li>\ud83d\udc77 Update Smokeshow download artifact GitHub Action. PR #1198 by @tiangolo.</li> <li>\ud83d\udd27 Update Node.js version in <code>.nvmrc</code>. PR #1192 by @alejsdev.</li> <li>\ud83d\udd25 Remove ESLint and Prettier from pre-commit config. PR #1096 by @alejsdev.</li> <li>\ud83d\udd27 Update mypy config to ignore .venv directories. PR #1155 by @tiangolo.</li> <li>\ud83d\udea8 Enable <code>ARG001</code> to prevent unused arguments. PR #1152 by @patrick91.</li> <li>\ud83d\udd25 Remove isort configuration, since we use Ruff now. PR #1144 by @patrick91.</li> <li>\ud83d\udd27 Update pre-commit config to exclude generated client folder. PR #1150 by @alejsdev.</li> <li>\ud83d\udd27 Change <code>.nvmrc</code> format. PR #1148 by @patrick91.</li> <li>\ud83c\udfa8 Ignore alembic from ruff lint and format. PR #1131 by @estebanx64.</li> <li>\ud83d\udd27 Add GitHub templates for discussions and issues, and security policy. PR #1105 by @alejsdev.</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 3.1.2 to 3.1.4. PR #1103 by @dependabot[bot].</li> <li>\ud83d\udd27 Add Biome to pre-commit config. PR #1098 by @alejsdev.</li> <li>\ud83d\udd25 Delete leftover celery file. PR #727 by @dr-neptune.</li> <li>\u2699\ufe0f Update pre-commit config with Prettier and ESLint. PR #714 by @alejsdev.</li> </ul>"},{"location":"app/docs/release-notes/#060","title":"0.6.0","text":"<p>Latest FastAPI, Pydantic, SQLModel \ud83d\ude80</p> <p>Brand new frontend with React, TS, Vite, Chakra UI, TanStack Query/Router, generated client/SDK \ud83c\udfa8</p> <p>CI/CD - GitHub Actions \ud83e\udd16</p> <p>Test cov &gt; 90% \u2705</p>"},{"location":"app/docs/release-notes/#features_4","title":"Features","text":"<ul> <li>\u2728 Adopt SQLModel, create models, start using it. PR #559 by @tiangolo.</li> <li>\u2728 Upgrade items router with new SQLModel models, simplified logic, and new FastAPI Annotated dependencies. PR #560 by @tiangolo.</li> <li>\u2728 Migrate from pgAdmin to Adminer. PR #692 by @tiangolo.</li> <li>\u2728 Add support for setting <code>POSTGRES_PORT</code>. PR #333 by @uepoch.</li> <li>\u2b06 Upgrade Flower version and command. PR #447 by @maurob.</li> <li>\ud83c\udfa8 Improve styles. PR #673 by @alejsdev.</li> <li>\ud83c\udfa8 Update theme. PR #666 by @alejsdev.</li> <li>\ud83d\udc77 Add continuous deployment and refactors needed for it. PR #667 by @tiangolo.</li> <li>\u2728 Create endpoint to show password recovery email content and update email template. PR #664 by @alejsdev.</li> <li>\ud83c\udfa8 Format with Prettier. PR #646 by @alejsdev.</li> <li>\u2705 Add tests to raise coverage to at least 90% and fix recover password logic. PR #632 by @estebanx64.</li> <li>\u2699\ufe0f Add Prettier and ESLint config with pre-commit. PR #640 by @alejsdev.</li> <li>\ud83d\udc77 Add coverage with Smokeshow to CI and badge. PR #638 by @estebanx64.</li> <li>\u2728 Migrate to TanStack Query (React Query) and TanStack Router. PR #637 by @alejsdev.</li> <li>\u2705 Add setup and teardown database for tests. PR #626 by @estebanx64.</li> <li>\u2728 Update new-frontend client. PR #625 by @alejsdev.</li> <li>\u2728 Add password reset functionality. PR #624 by @alejsdev.</li> <li>\u2728 Add private/public routing. PR #621 by @alejsdev.</li> <li>\ud83d\udd27 Add VS Code debug configs. PR #620 by @tiangolo.</li> <li>\u2728 Add <code>Not Found</code> page. PR #595 by @alejsdev.</li> <li>\u2728 Add new pages, components, panels, modals, and theme; refactor and improvements in existing components. PR #593 by @alejsdev.</li> <li>\u2728 Support delete own account and other tweaks. PR #614 by @alejsdev.</li> <li>\u2728 Restructure folders, allow editing of users/items, and implement other refactors and improvements. PR #603 by @alejsdev.</li> <li>\u2728 Add Copier, migrate from Cookiecutter, in a way that supports using the project as is, forking or cloning it. PR #612 by @tiangolo.</li> <li>\u2795 Replace black, isort, flake8, autoflake with ruff and upgrade mypy. PR #610 by @tiangolo.</li> <li>\u267b Refactor items and services endpoints to return count and data, and add CI tests. PR #599 by @estebanx64.</li> <li>\u2728 Add support for updating items and upgrade SQLModel to 0.0.16 (which supports model object updates). PR #601 by @tiangolo.</li> <li>\u2728 Add dark mode to new-frontend and conditional sidebar items. PR #600 by @alejsdev.</li> <li>\u2728 Migrate to RouterProvider and other refactors . PR #598 by @alejsdev.</li> <li>\u2728 Add delete_user; refactor delete_item. PR #594 by @alejsdev.</li> <li>\u2728 Add state store to new frontend. PR #592 by @alejsdev.</li> <li>\u2728 Add form validation to Admin, Items and Login. PR #616 by @alejsdev.</li> <li>\u2728 Add Sidebar to new frontend. PR #587 by @alejsdev.</li> <li>\u2728 Add Login to new frontend. PR #585 by @alejsdev.</li> <li>\u2728 Include schemas in generated frontend client. PR #584 by @alejsdev.</li> <li>\u2728 Regenerate frontend client with recent changes. PR #575 by @alejsdev.</li> <li>\u267b\ufe0f Refactor API in <code>utils.py</code>. PR #573 by @alejsdev.</li> <li>\u2728 Update code for login API. PR #571 by @tiangolo.</li> <li>\u2728 Add client in frontend and client generation. PR #569 by @alejsdev.</li> <li>\ud83d\udc33 Set up Docker config for new-frontend. PR #564 by @alejsdev.</li> <li>\u2728 Set up new frontend with Vite, TypeScript and React. PR #563 by @alejsdev.</li> <li>\ud83d\udccc Add NodeJS version management and instructions. PR #551 by @alejsdev.</li> <li>Add consistent errors for env vars not set. PR #200.</li> <li>Upgrade Traefik to version 2, keeping in sync with DockerSwarm.rocks. PR #199.</li> <li>Run tests with <code>TestClient</code>. PR #160.</li> </ul>"},{"location":"app/docs/release-notes/#fixes_3","title":"Fixes","text":"<ul> <li>\ud83d\udc1b Fix copier to handle string vars with spaces in quotes. PR #631 by @estebanx64.</li> <li>\ud83d\udc1b Fix allowing a user to update the email to the same email they already have. PR #696 by @alejsdev.</li> <li>\ud83d\udc1b Set up Sentry only when used. PR #671 by @tiangolo.</li> <li>\ud83d\udd25 Remove unnecessary validation. PR #662 by @alejsdev.</li> <li>\ud83d\udc1b Fix bug when editing own user. PR #651 by @alejsdev.</li> <li>\ud83d\udc1b Add <code>onClose</code> to <code>SidebarItems</code>. PR #589 by @alejsdev.</li> <li>\ud83d\udc1b Fix positional argument bug in <code>init_db.py</code>. PR #562 by @alejsdev.</li> <li>\ud83d\udccc Fix flower Docker image, pin version. PR #396 by @sanggusti.</li> <li>\ud83d\udc1b Fix Celery worker command. PR #443 by @bechtold.</li> <li>\ud83d\udc1b Fix Poetry installation in Dockerfile and upgrade Python version and packages to fix Docker build. PR #480 by @little7Li.</li> </ul>"},{"location":"app/docs/release-notes/#refactors_4","title":"Refactors","text":"<ul> <li>\ud83d\udd27 Add missing dotenv variables. PR #554 by @tiangolo.</li> <li>\u23ea Revert \"\u2699\ufe0f Add Prettier and ESLint config with pre-commit\". PR #644 by @alejsdev.</li> <li>\ud83d\ude48 Add .prettierignore and include client folder. PR #648 by @alejsdev.</li> <li>\ud83c\udff7\ufe0f Add mypy to the GitHub Action for tests and fixed types in the whole project. PR #655 by @estebanx64.</li> <li>\ud83d\udd12\ufe0f Ensure the default values of \"changethis\" are not deployed. PR #698 by @tiangolo.</li> <li>\u25c0 Revert \"\ud83d\udcf8 Rename Dashboard to Home and update screenshots\". PR #697 by @alejsdev.</li> <li>\ud83d\udcf8 Rename Dashboard to Home and update screenshots. PR #693 by @alejsdev.</li> <li>\ud83d\udc1b Fixed items count when retrieving data for all items by user. PR #695 by @estebanx64.</li> <li>\ud83d\udd25 Remove Celery and Flower, they are currently not used nor recommended. PR #694 by @tiangolo.</li> <li>\u2705 Add test for deleting user without privileges. PR #690 by @alejsdev.</li> <li>\u267b\ufe0f Refactor user update. PR #689 by @alejsdev.</li> <li>\ud83d\udccc Add Poetry lock to git. PR #685 by @tiangolo.</li> <li>\ud83c\udfa8 Adjust color and spacing. PR #684 by @alejsdev.</li> <li>\ud83d\udc77 Avoid creating unnecessary *.pyc files with PYTHONDONTWRITEBYTECODE=1. PR #677 by @estebanx64.</li> <li>\ud83d\udd27 Add <code>SMTP_SSL</code> option for older SMTP servers. PR #365 by @Metrea.</li> <li>\u267b\ufe0f Refactor logic to allow running pytest tests locally. PR #683 by @tiangolo.</li> <li>\u267b Update error messages. PR #417 by @qu3vipon.</li> <li>\ud83d\udd27 Add a default Flower password. PR #682 by @tiangolo.</li> <li>\ud83d\udd27 Update VS Code debug config. PR #676 by @tiangolo.</li> <li>\u267b\ufe0f Refactor code structure for tests. PR #674 by @tiangolo.</li> <li>\ud83d\udd27 Set TanStack Router devtools only in dev mode. PR #668 by @alejsdev.</li> <li>\u267b\ufe0f Refactor email logic to allow re-using util functions for testing and development. PR #663 by @tiangolo.</li> <li>\ud83d\udcac Improve Delete Account description and confirmation. PR #661 by @alejsdev.</li> <li>\u267b\ufe0f Refactor email templates. PR #659 by @alejsdev.</li> <li>\ud83d\udcdd Update deployment files and docs. PR #660 by @tiangolo.</li> <li>\ud83d\udd25 Remove unused schemas. PR #656 by @alejsdev.</li> <li>\ud83d\udd25 Remove old frontend. PR #649 by @tiangolo.</li> <li>\u267b Move project source files to top level from src, update Sentry dependency. PR #630 by @estebanx64.</li> <li>\u267b Refactor Python folder tree. PR #629 by @estebanx64.</li> <li>\u267b\ufe0f Refactor old CRUD utils and tests. PR #622 by @alejsdev.</li> <li>\ud83d\udd27 Update .env to allow local debug for the backend. PR #618 by @tiangolo.</li> <li>\u267b\ufe0f Refactor and update CORS, remove trailing slash from new Pydantic v2. PR #617 by @tiangolo.</li> <li>\ud83c\udfa8 Format files with pre-commit and Ruff. PR #611 by @tiangolo.</li> <li>\ud83d\ude9a Refactor and simplify backend file structure. PR #609 by @tiangolo.</li> <li>\ud83d\udd25 Clean up old files no longer relevant. PR #608 by @tiangolo.</li> <li>\u267b Re-structure Docker Compose files, discard Docker Swarm specific logic. PR #607 by @tiangolo.</li> <li>\u267b\ufe0f Refactor update endpoints and regenerate client for new-frontend. PR #602 by @alejsdev.</li> <li>\u2728 Add Layout to App. PR #588 by @alejsdev.</li> <li>\u267b\ufe0f Re-enable user update path operations for frontend client generation. PR #574 by @alejsdev.</li> <li>\u267b\ufe0f Remove type ignores and add <code>response_model</code>. PR #572 by @alejsdev.</li> <li>\u267b\ufe0f Refactor Users API and dependencies. PR #561 by @alejsdev.</li> <li>\u267b\ufe0f Refactor frontend Docker build setup, use plain NodeJS, use custom Nginx config, fix build for old Vue. PR #555 by @tiangolo.</li> <li>\u267b\ufe0f Refactor project generation, discard cookiecutter, use plain git/clone/fork. PR #553 by @tiangolo.</li> <li>Refactor backend:</li> <li>Simplify configs for tools and format to better support editor integration.</li> <li>Add mypy configurations and plugins.</li> <li>Add types to all the codebase.</li> <li>Update types for SQLAlchemy models with plugin.</li> <li>Update and refactor CRUD utils.</li> <li>Refactor DB sessions to use dependencies with <code>yield</code>.</li> <li>Refactor dependencies, security, CRUD, models, schemas, etc. To simplify code and improve autocompletion.</li> <li>Change from PyJWT to Python-JOSE as it supports additional use cases.</li> <li>Fix JWT tokens using user email/ID as the subject in <code>sub</code>.</li> <li>PR #158.</li> <li>Simplify <code>docker-compose.*.yml</code> files, refactor deployment to reduce config files. PR #153.</li> <li>Simplify env var files, merge to a single <code>.env</code> file. PR #151.</li> </ul>"},{"location":"app/docs/release-notes/#upgrades_3","title":"Upgrades","text":"<ul> <li>\ud83d\udccc Upgrade Poetry lock dependencies. PR #702 by @tiangolo.</li> <li>\u2b06\ufe0f Upgrade Python version and dependencies. PR #558 by @tiangolo.</li> <li>\u2b06 Bump tiangolo/issue-manager from 0.2.0 to 0.5.0. PR #591 by @dependabot[bot].</li> <li>Bump follow-redirects from 1.15.3 to 1.15.5 in /frontend. PR #654 by @dependabot[bot].</li> <li>Bump vite from 5.0.4 to 5.0.12 in /frontend. PR #653 by @dependabot[bot].</li> <li>Bump fastapi from 0.104.1 to 0.109.1 in /backend. PR #687 by @dependabot[bot].</li> <li>Bump python-multipart from 0.0.6 to 0.0.7 in /backend. PR #686 by @dependabot[bot].</li> <li>\u2b06 Add <code>uvicorn[standard]</code> to include <code>watchgod</code> and <code>uvloop</code>. PR #438 by @alonme.</li> <li>\u2b06 Upgrade code to support pydantic V2. PR #615 by @estebanx64.</li> </ul>"},{"location":"app/docs/release-notes/#docs_3","title":"Docs","text":"<ul> <li>\ud83e\udd87 Add dark mode to <code>README.md</code>. PR #703 by @alejsdev.</li> <li>\ud83c\udf71 Update GitHub image. PR #701 by @tiangolo.</li> <li>\ud83c\udf71 Add GitHub image. PR #700 by @tiangolo.</li> <li>\ud83d\ude9a Rename project to Full Stack FastAPI Template. PR #699 by @tiangolo.</li> <li>\ud83d\udcdd Update <code>README.md</code>. PR #691 by @alejsdev.</li> <li>\u270f Fix typo in <code>development.md</code>. PR #309 by @graue70.</li> <li>\ud83d\udcdd Add docs for wildcard domains. PR #681 by @tiangolo.</li> <li>\ud83d\udcdd Add the required GitHub Actions secrets to docs. PR #679 by @tiangolo.</li> <li>\ud83d\udcdd Update <code>README.md</code> and <code>deployment.md</code>. PR #678 by @alejsdev.</li> <li>\ud83d\udcdd Update frontend <code>README.md</code>. PR #675 by @alejsdev.</li> <li>\ud83d\udcdd Update deployment docs to use a different directory for traefik-public. PR #670 by @tiangolo.</li> <li>\ud83d\udcf8 Add new screenshots . PR #657 by @alejsdev.</li> <li>\ud83d\udcdd Refactor README into separate README.md files for backend, frontend, deployment, development. PR #639 by @tiangolo.</li> <li>\ud83d\udcdd Update README. PR #628 by @tiangolo.</li> <li>\ud83d\udc77 Update GitHub Action latest-changes and move release notes to independent file. PR #619 by @tiangolo.</li> <li>\ud83d\udcdd Update internal README and referred files. PR #613 by @tiangolo.</li> <li>\ud83d\udcdd Update README with in construction notice. PR #552 by @tiangolo.</li> <li>Add docs about reporting test coverage in HTML. PR #161.</li> <li>Add docs about removing the frontend, for an API-only app. PR #156.</li> </ul>"},{"location":"app/docs/release-notes/#internal_3","title":"Internal","text":"<ul> <li>\ud83d\udc77 Add Lint to GitHub Actions outside of tests. PR #688 by @tiangolo.</li> <li>\u2b06 Bump dawidd6/action-download-artifact from 2.28.0 to 3.1.2. PR #643 by @dependabot[bot].</li> <li>\u2b06 Bump actions/upload-artifact from 3 to 4. PR #642 by @dependabot[bot].</li> <li>\u2b06 Bump actions/setup-python from 4 to 5. PR #641 by @dependabot[bot].</li> <li>\ud83d\udc77 Tweak test GitHub Action names. PR #672 by @tiangolo.</li> <li>\ud83d\udd27 Add <code>.gitattributes</code> file to ensure LF endings for <code>.sh</code> files. PR #658 by @estebanx64.</li> <li>\ud83d\ude9a Move new-frontend to frontend. PR #652 by @alejsdev.</li> <li>\ud83d\udd27 Add script for ESLint. PR #650 by @alejsdev.</li> <li>\u2699\ufe0f Add Prettier config. PR #647 by @alejsdev.</li> <li>\ud83d\udd27 Update pre-commit config. PR #645 by @alejsdev.</li> <li>\ud83d\udc77 Add dependabot. PR #547 by @tiangolo.</li> <li>\ud83d\udc77 Fix latest-changes GitHub Action token, strike 2. PR #546 by @tiangolo.</li> <li>\ud83d\udc77 Fix latest-changes GitHub Action token config. PR #545 by @tiangolo.</li> <li>\ud83d\udc77 Add latest-changes GitHub Action. PR #544 by @tiangolo.</li> <li>Update issue-manager. PR #211.</li> <li>Add GitHub Sponsors button. PR #201.</li> <li>Simplify scripts and development, update docs and configs. PR #155.</li> </ul>"},{"location":"app/docs/release-notes/#050","title":"0.5.0","text":"<ul> <li>Make the Traefik public network a fixed default of <code>traefik-public</code> as done in DockerSwarm.rocks, to simplify development and iteration of the project generator. PR #150.</li> <li>Update to PostgreSQL 12. PR #148. by @RCheese.</li> <li>Use Poetry for package management. Initial PR #144 by @RCheese.</li> <li>Fix Windows line endings for shell scripts after project generation with Cookiecutter hooks. PR #149.</li> <li>Upgrade Vue CLI to version 4. PR #120 by @br3ndonland.</li> <li>Remove duplicate <code>login</code> tag. PR #135 by @Nonameentered.</li> <li>Fix showing email in dashboard when there's no user's full name. PR #129 by @rlonka.</li> <li>Format code with Black and Flake8. PR #121 by @br3ndonland.</li> <li>Simplify SQLAlchemy Base class. PR #117 by @airibarne.</li> <li>Update CRUD utils for users, handling password hashing. PR #106 by @mocsar.</li> <li>Use <code>.</code> instead of <code>source</code> for interoperability. PR #98 by @gucharbon.</li> <li>Use Pydantic's <code>BaseSettings</code> for settings/configs and env vars. PR #87 by @StephenBrown2.</li> <li>Remove <code>package-lock.json</code> to let everyone lock their own versions (depending on OS, etc).</li> <li>Simplify Traefik service labels PR #139.</li> <li>Add email validation. PR #40 by @kedod.</li> <li>Fix typo in README. PR #83 by @ashears.</li> <li>Fix typo in README. PR #80 by @abjoker.</li> <li>Fix function name <code>read_item</code> and response code. PR #74 by @jcaguirre89.</li> <li>Fix typo in comment. PR #70 by @daniel-butler.</li> <li>Fix Flower Docker configuration. PR #37 by @dmontagu.</li> <li>Add new CRUD utils based on DB and Pydantic models. Initial PR #23 by @ebreton.</li> <li>Add normal user testing Pytest fixture. PR #20 by @ebreton.</li> </ul>"},{"location":"app/docs/release-notes/#040","title":"0.4.0","text":"<ul> <li> <p>Fix security on resetting a password. Receive token as body, not query. PR #34.</p> </li> <li> <p>Fix security on resetting a password. Receive it as body, not query. PR #33 by @dmontagu.</p> </li> <li> <p>Fix SQLAlchemy class lookup on initialization. PR #29 by @ebreton.</p> </li> <li> <p>Fix SQLAlchemy operation errors on database restart. PR #32 by @ebreton.</p> </li> <li> <p>Fix locations of scripts in generated README. PR #19 by @ebreton.</p> </li> <li> <p>Forward arguments from script to <code>pytest</code> inside container. PR #17 by @ebreton.</p> </li> <li> <p>Update development scripts.</p> </li> <li> <p>Read Alembic configs from env vars. PR #9 by @ebreton.</p> </li> <li> <p>Create DB Item objects from all Pydantic model's fields.</p> </li> <li> <p>Update Jupyter Lab installation and util script/environment variable for local development.</p> </li> </ul>"},{"location":"app/docs/release-notes/#030","title":"0.3.0","text":"<ul> <li> <p>PR #14:</p> </li> <li> <p>Update CRUD utils to use types better.</p> </li> <li>Simplify Pydantic model names, from <code>UserInCreate</code> to <code>UserCreate</code>, etc.</li> <li>Upgrade packages.</li> <li>Add new generic \"Items\" models, crud utils, endpoints, and tests. To facilitate re-using them to create new functionality. As they are simple and generic (not like Users), it's easier to copy-paste and adapt them to each use case.</li> <li>Update endpoints/path operations to simplify code and use new utilities, prefix and tags in <code>include_router</code>.</li> <li>Update testing utils.</li> <li>Update linting rules, relax vulture to reduce false positives.</li> <li>Update migrations to include new Items.</li> <li> <p>Update project README.md with tips about how to start with backend.</p> </li> <li> <p>Upgrade Python to 3.7 as Celery is now compatible too. PR #10 by @ebreton.</p> </li> </ul>"},{"location":"app/docs/release-notes/#022","title":"0.2.2","text":"<ul> <li>Fix frontend hijacking /docs in development. Using latest https://github.com/tiangolo/node-frontend with custom Nginx configs in frontend. PR #6.</li> </ul>"},{"location":"app/docs/release-notes/#021","title":"0.2.1","text":"<ul> <li> <p>Fix documentation for path operation to get user by ID. PR #4 by @mpclarkson in FastAPI.</p> </li> <li> <p>Set <code>/start-reload.sh</code> as a command override for development by default.</p> </li> <li> <p>Update generated README.</p> </li> </ul>"},{"location":"app/docs/release-notes/#020","title":"0.2.0","text":"<p>PR #2:</p> <ul> <li>Simplify and update backend <code>Dockerfile</code>s.</li> <li>Refactor and simplify backend code, improve naming, imports, modules and \"namespaces\".</li> <li>Improve and simplify Vuex integration with TypeScript accessors.</li> <li>Standardize frontend components layout, buttons order, etc.</li> <li>Add local development scripts (to develop this project generator itself).</li> <li>Add logs to startup modules to detect errors early.</li> <li>Improve FastAPI dependency utilities, to simplify and reduce code (to require a superuser).</li> </ul>"},{"location":"app/docs/release-notes/#012","title":"0.1.2","text":"<ul> <li>Fix path operation to update self-user, set parameters as body payload.</li> </ul>"},{"location":"app/docs/release-notes/#011","title":"0.1.1","text":"<p>Several bug fixes since initial publication, including:</p> <ul> <li>Order of path operations for users.</li> <li>Frontend sending login data in the correct format.</li> <li>Add https://localhost variants to CORS.</li> </ul>"},{"location":"app/docs/deployment/guide/","title":"Deployment Guide for DevOps Demo Application","text":"<p>This document describes how to deploy the application to AWS ECS using GitHub Actions.</p>"},{"location":"app/docs/deployment/guide/#prerequisites","title":"Prerequisites","text":""},{"location":"app/docs/deployment/guide/#github-actions-secrets","title":"GitHub Actions Secrets","text":"<p>The following secrets need to be configured in your GitHub repository:</p>"},{"location":"app/docs/deployment/guide/#cicd-pipeline","title":"CI/CD Pipeline","text":"<p>The CI/CD pipeline consists of the following stages:</p> <ol> <li>Build and Test: Builds the application and runs tests</li> <li>Build and Push Docker Images: Builds Docker images for frontend and backend and pushes them to ECR</li> <li>Deploy to Staging: Deploys the application to the staging environment</li> <li>Deploy to Production: Deploys the application to the production environment (manual approval required)</li> </ol>"},{"location":"app/docs/deployment/guide/#aws-resources","title":"AWS Resources","text":"<p>The application requires the following AWS resources:</p>"},{"location":"app/docs/deployment/guide/#infrastructure-as-code","title":"Infrastructure as Code","text":"<p>The AWS infrastructure is managed using Terraform in a separate repository. The Terraform code creates all the necessary AWS resources and configures them for the application.</p> <p>The ECS deployment uses the Docker images built and pushed by the GitHub Actions workflow.</p>"},{"location":"app/docs/development/guide/","title":"Development Guide for DevOps Demo Application","text":"<p>This document describes how to set up and run the application for local development.</p>"},{"location":"app/docs/development/guide/#prerequisites","title":"Prerequisites","text":""},{"location":"app/docs/development/guide/#local-development-with-docker-compose","title":"Local Development with Docker Compose","text":"<p>The easiest way to run the application locally is using Docker Compose:</p>"},{"location":"app/docs/development/makefile/","title":"Makefile System Documentation","text":"<p>This document describes the Makefile system used in our project for managing development, testing, deployment, and maintenance tasks.</p>"},{"location":"app/docs/development/makefile/#overview","title":"Overview","text":"<p>The Makefile is the central interface for all aspects of our project. It serves as the primary and recommended way to interact with the codebase throughout its entire lifecycle - from initial setup and development to testing, deployment, and maintenance.</p> <p>All team members should use the Makefile commands for consistency, rather than running individual tools directly. This ensures that everyone follows the same workflows and processes, reducing errors and improving productivity.</p> <p>The Makefile system is organized into several sections, each handling a specific aspect of the project:</p> <ul> <li>Core Development</li> <li>Security</li> <li>Testing</li> <li>Accessibility</li> <li>CI/CD</li> <li>Documentation</li> <li>Docker Management</li> <li>Environment Management</li> <li>Maintenance</li> </ul>"},{"location":"app/docs/development/makefile/#directory-structure","title":"Directory Structure","text":"<pre><code>make/\n\u251c\u2500\u2500 Makefile              # Main Makefile with core targets and includes\n\u251c\u2500\u2500 variables.mk          # Shared variables and help text\n\u251c\u2500\u2500 security.mk           # Security-related targets\n\u251c\u2500\u2500 testing.mk            # Testing-related targets\n\u251c\u2500\u2500 accessibility.mk      # Accessibility-related targets\n\u251c\u2500\u2500 ci.mk                 # CI/CD-related targets\n\u251c\u2500\u2500 maintenance.mk        # Maintenance-related targets\n\u251c\u2500\u2500 documentation.mk      # Documentation-related targets\n\u251c\u2500\u2500 docker.mk             # Docker-related targets\n\u2514\u2500\u2500 environment.mk        # Environment-related targets\n</code></pre>"},{"location":"app/docs/development/makefile/#core-development-targets","title":"Core Development Targets","text":""},{"location":"app/docs/development/makefile/#project-setup","title":"Project Setup","text":"<ul> <li><code>make start</code> - Initial setup after cloning the repository</li> <li><code>make branch</code> - Create a new branch using the interactive CLI</li> <li><code>make install</code> - Install all dependencies (backend and frontend)</li> <li><code>make dev</code> - Start development mode with hot reload</li> </ul>"},{"location":"app/docs/development/makefile/#code-quality","title":"Code Quality","text":"<ul> <li><code>make format-backend</code> - Format backend code using Black</li> <li><code>make format-frontend</code> - Format frontend code using Prettier</li> <li><code>make format-all</code> - Format all code (backend and frontend)</li> <li><code>make lint-backend</code> - Lint backend code using Ruff</li> <li><code>make lint-frontend</code> - Lint frontend code using ESLint</li> <li><code>make lint-all</code> - Lint all code (backend and frontend)</li> <li><code>make style-backend</code> - Style check backend code</li> <li><code>make style-frontend</code> - Style check frontend code</li> <li><code>make style-all</code> - Style check all code</li> <li><code>make pretty</code> - Run all formatting, linting, and style checks</li> </ul>"},{"location":"app/docs/development/makefile/#security-targets","title":"Security Targets","text":"<ul> <li><code>make security-backend</code> - Security check backend using Bandit</li> <li><code>make security-frontend</code> - Security check frontend using npm audit</li> <li><code>make security-all</code> - Security check all code</li> <li><code>make security-scan</code> - Run comprehensive security scan</li> </ul>"},{"location":"app/docs/development/makefile/#testing-targets","title":"Testing Targets","text":"<ul> <li><code>make test-unit-backend</code> - Run backend unit tests</li> <li><code>make test-unit-frontend</code> - Run frontend unit tests</li> <li><code>make test-unit-all</code> - Run all unit tests</li> <li><code>make test-integration</code> - Run integration tests</li> <li><code>make test-e2e</code> - Run end-to-end tests</li> <li><code>make test-coverage</code> - Generate test coverage report</li> </ul>"},{"location":"app/docs/development/makefile/#accessibility-targets","title":"Accessibility Targets","text":"<ul> <li><code>make a11y-audit</code> - Run accessibility audit</li> <li><code>make a11y-lighthouse</code> - Run Lighthouse performance checks</li> <li><code>make a11y-wcag</code> - Run WCAG compliance checks</li> <li><code>make a11y-report</code> - Generate accessibility report</li> </ul>"},{"location":"app/docs/development/makefile/#cicd-targets","title":"CI/CD Targets","text":"<ul> <li><code>make ci-validate</code> - Run pre-commit checks</li> <li><code>make ci-build</code> - Run full CI pipeline locally</li> <li><code>make ci-test</code> - Run CI test suite</li> </ul>"},{"location":"app/docs/development/makefile/#github-actions-workflow-testing","title":"GitHub Actions Workflow Testing","text":"<ul> <li><code>make act-test</code> - Show available GitHub Actions workflow tests</li> <li><code>make act-test-main</code> - Test main-branch.yml workflow</li> <li><code>make act-test-protection</code> - Test branch-protection.yml workflow</li> <li><code>make act-test-all</code> - Test all workflows</li> <li><code>make act-test-dry-run</code> - Dry run of workflows (no execution)</li> <li><code>make act-test-job</code> - Test specific job in a workflow (usage: <code>make act-test-job workflow=main-branch.yml job=lint event=pull_request</code>)</li> </ul>"},{"location":"app/docs/development/makefile/#documentation-targets","title":"Documentation Targets","text":"<ul> <li><code>make docs</code> - Generate all documentation (API, frontend, backend, architecture)</li> <li><code>make docs-api</code> - Generate API documentation using pdoc</li> <li><code>make docs-frontend</code> - Generate frontend documentation</li> <li><code>make docs-backend</code> - Generate backend documentation</li> <li><code>make docs-architecture</code> - Generate architecture documentation</li> <li><code>make docs-serve</code> - Serve documentation locally</li> <li><code>make docs-validate</code> - Validate documentation</li> <li><code>make docs-clean</code> - Clean generated documentation</li> </ul>"},{"location":"app/docs/development/makefile/#docker-management-targets","title":"Docker Management Targets","text":"<ul> <li><code>make docker-build</code> - Build all Docker containers</li> <li><code>make docker-build-frontend</code> - Build frontend container</li> <li><code>make docker-build-backend</code> - Build backend container</li> <li><code>make docker-push</code> - Push all containers to registry</li> <li><code>make docker-push-frontend</code> - Push frontend container</li> <li><code>make docker-push-backend</code> - Push backend container</li> <li><code>make docker-pull</code> - Pull all containers from registry</li> <li><code>make docker-pull-frontend</code> - Pull frontend container</li> <li><code>make docker-pull-backend</code> - Pull backend container</li> <li><code>make docker-prune</code> - Clean up Docker system</li> <li><code>make docker-logs</code> - Show Docker container logs</li> <li><code>make docker-stats</code> - Show Docker container stats</li> <li><code>make docker-shell</code> - Open shell in specified container</li> </ul>"},{"location":"app/docs/development/makefile/#environment-management-targets","title":"Environment Management Targets","text":"<ul> <li><code>make env-dev</code> - Setup development environment</li> <li><code>make env-staging</code> - Setup staging environment</li> <li><code>make env-prod</code> - Setup production environment</li> <li><code>make env-switch</code> - Switch between environments</li> <li><code>make env-validate</code> - Validate environment configuration</li> <li><code>make env-secrets</code> - Generate environment secrets</li> <li><code>make env-backup</code> - Backup environment files</li> <li><code>make env-restore</code> - Restore environment from backup</li> </ul>"},{"location":"app/docs/development/makefile/#maintenance-targets","title":"Maintenance Targets","text":"<ul> <li><code>make clean</code> - Clean temporary files</li> <li><code>make prune</code> - Clean Docker, Node, and Python artifacts</li> <li><code>make update</code> - Update all dependencies</li> </ul>"},{"location":"app/docs/development/makefile/#common-workflows","title":"Common Workflows","text":""},{"location":"app/docs/development/makefile/#starting-a-new-feature","title":"Starting a New Feature","text":"<pre><code>make branch  # Create a new feature branch\nmake install # Install dependencies\nmake dev     # Start development server\n</code></pre>"},{"location":"app/docs/development/makefile/#running-tests","title":"Running Tests","text":"<pre><code>make test-unit-all    # Run all unit tests\nmake test-integration # Run integration tests\nmake test-e2e        # Run end-to-end tests\n</code></pre>"},{"location":"app/docs/development/makefile/#code-quality-checks","title":"Code Quality Checks","text":"<pre><code>make pretty          # Run all formatting and linting\nmake security-all    # Run security checks\nmake a11y-audit      # Run accessibility checks\n</code></pre>"},{"location":"app/docs/development/makefile/#documentation","title":"Documentation","text":"<pre><code>make docs           # Generate all documentation\nmake docs-serve     # Serve documentation locally\n</code></pre>"},{"location":"app/docs/development/makefile/#docker-operations","title":"Docker Operations","text":"<pre><code>make docker-build   # Build containers\nmake docker-push    # Push to registry\nmake docker-prune   # Clean up Docker system\n</code></pre>"},{"location":"app/docs/development/makefile/#cicd-workflow-testing","title":"CI/CD Workflow Testing","text":"<pre><code>make act-test           # Show available workflow tests\nmake act-test-dry-run   # Dry run of workflows without execution\nmake act-test-main      # Test main branch workflow\nmake act-test-job workflow=main-branch.yml job=lint event=pull_request  # Test specific job\n</code></pre>"},{"location":"app/docs/development/makefile/#best-practices","title":"Best Practices","text":"<ol> <li>Always use the Makefile for all project tasks rather than running individual tools directly</li> <li>Always run <code>make pretty</code> before committing changes</li> <li>Run <code>make test-unit-all</code> before pushing changes</li> <li>Use <code>make branch</code> to create new branches</li> <li>Keep dependencies updated with <code>make update</code></li> <li>Clean up regularly with <code>make prune</code></li> <li>Test GitHub Actions workflows locally with <code>make act-test-*</code> commands before pushing to GitHub</li> <li>Use <code>make act-test-job</code> for testing specific jobs when debugging workflow issues</li> </ol>"},{"location":"app/docs/development/makefile/#troubleshooting","title":"Troubleshooting","text":"<ol> <li>If a target fails, check the error message and dependencies</li> <li>Use <code>make clean</code> to remove temporary files</li> <li>For Docker issues, try <code>make docker-prune</code></li> <li>For environment issues, use <code>make env-validate</code></li> </ol>"},{"location":"app/docs/development/makefile/#contributing","title":"Contributing","text":"<p>When adding new targets:</p> <ol> <li>Add the target to the appropriate section file</li> <li>Add help text in <code>variables.mk</code></li> <li>Update this documentation</li> <li>Test the new target using <code>scripts/test_makefile.sh</code></li> </ol>"},{"location":"app/docs/development/makefile/#backend-commands","title":"Backend Commands","text":"<ul> <li><code>make backend-lint</code> - Run backend linting using Ruff</li> </ul>"},{"location":"app/docs/development/scripts/","title":"Development Scripts","text":"<p>This document provides an overview of the utility scripts available in the project. These scripts are designed to streamline common development tasks and ensure consistency across different environments.</p>"},{"location":"app/docs/development/scripts/#table-of-contents","title":"Table of Contents","text":""},{"location":"app/docs/development/scripts/#deployment-scripts","title":"Deployment Scripts","text":""},{"location":"app/docs/development/scripts/#deploy-appsh","title":"<code>deploy-app.sh</code>","text":"<p>A unified script for building, pushing, and deploying the application.</p> <p>Usage:</p>"},{"location":"app/docs/workflow/github-actions/","title":"GitHub Actions Workflow","text":"<p>This document describes the GitHub Actions workflows used in the FastAPI project.</p>"},{"location":"app/docs/workflow/github-actions/#cicd-pipeline","title":"CI/CD Pipeline","text":"<p>The CI/CD pipeline consists of the following steps:</p> <ol> <li>Build: Builds the application and runs linting</li> <li>Test: Runs unit and integration tests</li> <li>Deploy: Deploys the application to the appropriate environment</li> </ol>"},{"location":"app/docs/workflow/github-actions/#workflow-files","title":"Workflow Files","text":"<p>The following workflow files are defined:</p> <ul> <li><code>ci.yml</code>: Continuous Integration workflow</li> <li><code>cd.yml</code>: Continuous Deployment workflow</li> <li><code>release.yml</code>: Release workflow</li> <li><code>deploy-docs.yml</code>: Documentation deployment workflow</li> </ul>"},{"location":"app/docs/workflow/github-actions/#environment-configuration","title":"Environment Configuration","text":"<p>The workflows use the following environments:</p> <ul> <li>Development</li> <li>Staging</li> <li>Production</li> </ul> <p>Each environment has its own configuration and secrets.</p>"},{"location":"app/docs/workflows/github-actions/","title":"GitHub Actions Workflows","text":"<p>This document provides an overview of the GitHub Actions workflows used in this project, including best practices for local testing and troubleshooting.</p>"},{"location":"app/docs/workflows/github-actions/#workflow-overview","title":"Workflow Overview","text":"<p>The project uses several GitHub Actions workflows to automate testing, building, and deployment:</p> <ol> <li>Test Docker Compose - Tests the Docker Compose setup</li> <li>Generate API Client - Automatically generates the frontend API client</li> <li>Format and Lint - Runs code formatting and linting checks</li> <li>Feature Branch Checks - Runs tests on feature branches</li> <li>Deploy to Staging - Deploys to the staging environment</li> <li>Deploy to Production - Deploys to the production environment</li> <li>Automerge - Automatically merges fix branches with the <code>-automerge</code> suffix to the dev branch after tests pass</li> </ol>"},{"location":"app/docs/workflows/github-actions/#local-testing-with-act","title":"Local Testing with Act","text":"<p>You can test GitHub Actions workflows locally using our consolidated testing script:</p>"},{"location":"app/docs/workflows/github-structure/","title":"GitHub Directory Structure","text":"<p>This document outlines the consolidated structure for the <code>.github</code> directory and explains the organization of GitHub Actions workflows.</p>"},{"location":"app/docs/workflows/github-structure/#directory-structure","title":"Directory Structure","text":"<pre><code>.github/\n\u251c\u2500\u2500 workflows/\n\u2502   \u251c\u2500\u2500 branch/                # Branch-specific workflows\n\u2502   \u2502   \u251c\u2500\u2500 feature.yml        # Feature branch checks\n\u2502   \u2502   \u251c\u2500\u2500 dev.yml            # Development branch workflows\n\u2502   \u2502   \u2514\u2500\u2500 main.yml           # Main branch workflows\n\u2502   \u251c\u2500\u2500 deploy/                # Deployment workflows\n\u2502   \u2502   \u251c\u2500\u2500 staging.yml        # Staging deployment\n\u2502   \u2502   \u2514\u2500\u2500 production.yml     # Production deployment\n\u2502   \u251c\u2500\u2500 testing/               # Testing workflows\n\u2502   \u2502   \u251c\u2500\u2500 backend.yml        # Backend tests\n\u2502   \u2502   \u251c\u2500\u2500 frontend.yml       # Frontend tests\n\u2502   \u2502   \u251c\u2500\u2500 integration.yml    # Integration tests\n\u2502   \u2502   \u2514\u2500\u2500 e2e.yml            # End-to-end tests\n\u2502   \u251c\u2500\u2500 ci/                    # CI utilities\n\u2502   \u2502   \u251c\u2500\u2500 lint.yml           # Linting workflows\n\u2502   \u2502   \u251c\u2500\u2500 security.yml       # Security scanning\n\u2502   \u2502   \u2514\u2500\u2500 generate-client.yml # API client generation\n\u2502   \u2514\u2500\u2500 _shared/               # Reusable components\n\u2502       \u251c\u2500\u2500 actions.yml        # Reusable actions\n\u2502       \u2514\u2500\u2500 jobs.yml           # Reusable jobs\n\u251c\u2500\u2500 CODEOWNERS                 # Code ownership definitions\n\u251c\u2500\u2500 dependabot.yml             # Dependabot configuration\n\u251c\u2500\u2500 labeler.yml                # PR labeler configuration\n\u2514\u2500\u2500 pull_request_template.md   # PR template\n</code></pre>"},{"location":"app/docs/workflows/github-structure/#workflow-organization","title":"Workflow Organization","text":""},{"location":"app/docs/workflows/github-structure/#branch-based-workflows","title":"Branch-Based Workflows","text":"<p>These workflows are triggered based on branch activity:</p> <ul> <li> <p>feature.yml: Triggered on pushes to <code>feat/*</code> and <code>fix/*</code> branches</p> </li> <li> <p>Style checks (black, flake8, eslint, prettier)</p> </li> <li>Security checks (bandit, npm audit, pip-audit)</li> <li>Linting &amp; formatting</li> <li> <p>Unit tests</p> </li> <li> <p>dev.yml: Triggered on pushes to <code>dev</code> branch</p> </li> <li> <p>Minimal test suite (unit, linting, security)</p> </li> <li> <p>Staging deployment</p> </li> <li> <p>main.yml: Triggered on pushes to <code>main</code> branch</p> </li> <li>Complete test suite</li> <li>Security scans</li> <li>Dependency checks</li> </ul>"},{"location":"app/docs/workflows/github-structure/#deployment-workflows","title":"Deployment Workflows","text":"<ul> <li> <p>staging.yml: Deploys to staging environment</p> </li> <li> <p>Triggered by successful <code>dev</code> branch workflow</p> </li> <li> <p>Uses AWS ECS for deployment</p> </li> <li> <p>production.yml: Deploys to production environment</p> </li> <li>Triggered by release tags on <code>main</code> branch</li> <li>Uses AWS ECS for deployment</li> </ul>"},{"location":"app/docs/workflows/github-structure/#testing-workflows","title":"Testing Workflows","text":"<p>Specialized workflows for different types of tests:</p> <ul> <li>backend.yml: Backend unit and integration tests</li> <li>frontend.yml: Frontend unit tests</li> <li>integration.yml: API and service integration tests</li> <li>e2e.yml: End-to-end tests with Playwright</li> </ul>"},{"location":"app/docs/workflows/github-structure/#ci-utilities","title":"CI Utilities","text":"<ul> <li>lint.yml: Code linting and formatting checks</li> <li>security.yml: Security scanning and vulnerability checks</li> <li>generate-client.yml: Generates TypeScript client from OpenAPI spec</li> </ul>"},{"location":"app/docs/workflows/github-structure/#shared-components","title":"Shared Components","text":"<ul> <li>actions.yml: Reusable GitHub Actions steps</li> <li>jobs.yml: Reusable job definitions for common tasks</li> </ul>"},{"location":"app/docs/workflows/github-structure/#implementation-plan","title":"Implementation Plan","text":"<ol> <li>Create the new directory structure</li> <li>Migrate existing workflows to the new structure</li> <li>Update workflow references and dependencies</li> <li>Test workflows with <code>act</code> to ensure they work correctly</li> <li>Update documentation to reflect the new structure</li> </ol>"},{"location":"app/docs/workflows/github-structure/#benefits","title":"Benefits","text":"<ul> <li>Improved organization: Workflows are grouped by purpose</li> <li>Better maintainability: Easier to find and update specific workflows</li> <li>Reduced duplication: Shared components reduce code duplication</li> <li>Clearer workflow paths: Branch-based organization matches development workflow</li> </ul>"},{"location":"app/frontend/","title":"\ud83d\udd79\ufe0f DevOps Demo Application - Frontend","text":"<p>The frontend of our DevOps demo application is a modern, responsive web interface built with cutting-edge technologies:</p> <ul> <li>Vite: Next-generation frontend tooling</li> <li>React: Component-based UI library</li> <li>TypeScript: Type-safe JavaScript</li> <li>TanStack Query: Data fetching and state management</li> <li>TanStack Router: Type-safe routing</li> <li>Chakra UI: Accessible component library</li> </ul>"},{"location":"app/frontend/#table-of-contents","title":"\ud83d\udcbb Table of Contents","text":"<ul> <li>Features</li> <li>Requirements</li> <li>Development Setup</li> <li>Docker-based Development</li> <li>Local Development</li> <li>Project Structure</li> <li>Testing</li> <li>Building for Production</li> <li>Deployment</li> </ul>"},{"location":"app/frontend/#features","title":"\u2728 Features","text":"<ul> <li>Modern React with Hooks: Functional components and React hooks</li> <li>Type-safe Development: Full TypeScript integration</li> <li>Responsive Design: Mobile-first approach with Chakra UI</li> <li>Efficient Data Fetching: TanStack Query for API interactions</li> <li>Declarative Routing: Type-safe routing with TanStack Router</li> <li>Dark/Light Mode: Built-in theme support</li> <li>Authentication: JWT-based authentication flow</li> </ul>"},{"location":"app/frontend/#requirements","title":"\ud83d\udccd Requirements","text":"<ul> <li>Node.js 18+ (use nvm or fnm for version management)</li> <li>pnpm (recommended package manager for faster, more efficient builds)</li> <li>Docker (optional, for containerized development)</li> </ul>"},{"location":"app/frontend/#development-setup","title":"\ud83d\udd27 Development Setup","text":""},{"location":"app/frontend/#docker-based-development","title":"Docker-based Development","text":"<p>The easiest way to get started is using Docker Compose from the project root:</p> <pre><code># From the project root directory\ndocker compose up -d\n</code></pre> <p>This will start:</p> <ul> <li>Frontend at http://dashboard.localhost</li> <li>Backend API at http://api.localhost</li> <li>Database and other services</li> </ul>"},{"location":"app/frontend/#local-development","title":"Local Development","text":"<p>For a more responsive development experience, you can run the frontend locally.</p> <ol> <li>Node.js Version Management</li> </ol> <p>Before you begin, ensure that you have either the Node Version Manager (nvm) or Fast Node Manager (fnm) installed:</p> <pre><code># Install fnm (recommended)\n# macOS with Homebrew\nbrew install fnm\n\n# Or install nvm\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash\n</code></pre> <ol> <li>Install Dependencies</li> </ol> <pre><code># Navigate to frontend directory\ncd frontend\n\n# Use the correct Node.js version\nfnm use    # or: nvm use\n\n# Install dependencies\npnpm install\n</code></pre> <ol> <li>Start Development Server</li> </ol> <pre><code>pnpm dev\n</code></pre> <p>The development server will start at http://localhost:5173 with hot module replacement enabled.</p>"},{"location":"app/frontend/#project-structure","title":"\ud83d\udcc2 Project Structure","text":"<pre><code>frontend/\n\u251c\u2500\u2500 public/              # Static assets\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 api/              # API client and hooks\n\u2502   \u251c\u2500\u2500 components/       # Reusable UI components\n\u2502   \u251c\u2500\u2500 features/          # Feature-specific components\n\u2502   \u251c\u2500\u2500 hooks/             # Custom React hooks\n\u2502   \u251c\u2500\u2500 lib/               # Utilities and helpers\n\u2502   \u251c\u2500\u2500 providers/         # Context providers\n\u2502   \u251c\u2500\u2500 routes/            # Application routes\n\u2502   \u251c\u2500\u2500 theme/             # Chakra UI theme customization\n\u2502   \u251c\u2500\u2500 types/             # TypeScript type definitions\n\u2502   \u251c\u2500\u2500 App.tsx            # Main application component\n\u2502   \u2514\u2500\u2500 main.tsx           # Application entry point\n\u251c\u2500\u2500 .eslintrc.js         # ESLint configuration\n\u251c\u2500\u2500 package.json         # Dependencies and scripts\n\u251c\u2500\u2500 tsconfig.json        # TypeScript configuration\n\u2514\u2500\u2500 vite.config.ts        # Vite configuration\n</code></pre>"},{"location":"app/frontend/#testing","title":"\ud83e\uddea Testing","text":"<p>The frontend includes a test suite using Vitest and React Testing Library:</p> <pre><code># Run tests\nnpm test\n\n# Run tests with coverage\nnpm test -- --coverage\n\n# Run tests in watch mode\nnpm test -- --watch\n</code></pre>"},{"location":"app/frontend/#building-for-production","title":"\ud83d\udcbe Building for Production","text":"<p>To create a production build:</p> <pre><code>npm run build\n</code></pre> <p>The build output will be in the <code>dist</code> directory. You can preview the production build locally:</p> <pre><code>npm run preview\n</code></pre>"},{"location":"app/frontend/#deployment","title":"\ud83d\ude80 Deployment","text":"<p>The frontend is designed to be deployed as a static site or as a Docker container. The deployment is handled automatically by GitHub Actions when changes are pushed to the appropriate branches.</p>"},{"location":"app/frontend/#environment-variables","title":"Environment Variables","text":"<p>The frontend uses environment variables for configuration. In development, these are defined in <code>.env.development</code>. For production, they are injected during the build process.</p> <p>Key environment variables:</p> Variable Purpose Example <code>VITE_API_URL</code> Backend API URL <code>https://api.example.com</code> <code>VITE_APP_ENV</code> Application environment <code>production</code> <p>For more information on the deployment process, see the CI/CD Pipeline section in the main README.</p>"},{"location":"app/logging/","title":"Application Logging","text":""},{"location":"app/logging/#overview","title":"Overview","text":"<p>This directory contains the logging configuration for the FastAPI application. The logging system is based on structured JSON logging with ELK stack integration.</p>"},{"location":"app/logging/#components","title":"Components","text":"<ul> <li>Logstash: Collects and processes logs</li> <li>Elasticsearch: Stores and indexes logs</li> <li>Kibana: Visualizes logs and provides dashboards</li> <li>Filebeat: Ships logs from the application to Logstash</li> </ul>"},{"location":"app/logging/#log-levels","title":"Log Levels","text":"<p>The following log levels are used:</p> <ul> <li>DEBUG: Detailed information for debugging</li> <li>INFO: General information about application operation</li> <li>WARNING: Potential issues that don't prevent the application from working</li> <li>ERROR: Errors that prevent specific operations from working</li> <li>CRITICAL: Critical errors that prevent the application from working</li> </ul>"},{"location":"app/logging/#log-format","title":"Log Format","text":"<p>Logs are formatted as JSON with the following fields:</p> <ul> <li><code>timestamp</code>: ISO 8601 timestamp</li> <li><code>level</code>: Log level</li> <li><code>message</code>: Log message</li> <li><code>logger</code>: Logger name</li> <li><code>request_id</code>: Unique request identifier</li> <li><code>user_id</code>: User identifier (if authenticated)</li> <li><code>path</code>: Request path</li> <li><code>method</code>: HTTP method</li> <li><code>status_code</code>: HTTP status code</li> <li><code>duration_ms</code>: Request duration in milliseconds</li> <li><code>exception</code>: Exception details (if applicable)</li> </ul>"},{"location":"app/logging/#setup","title":"Setup","text":"<p>The logging system is automatically set up when you run:</p> <pre><code>make logging-up\n</code></pre>"},{"location":"app/logging/#accessing-logs","title":"Accessing Logs","text":"<p>Once the logging system is running, you can access the logs at:</p> <ul> <li>Kibana: <code>http://localhost:5601</code></li> </ul>"},{"location":"app/logging/#configuration","title":"Configuration","text":"<p>The logging configuration can be customized by editing the following files:</p> <ul> <li><code>logstash/pipeline/*.conf</code>: Logstash pipeline configuration</li> <li><code>elasticsearch/config/*.yml</code>: Elasticsearch configuration</li> <li><code>kibana/config/*.yml</code>: Kibana configuration</li> <li><code>filebeat/filebeat.yml</code>: Filebeat configuration</li> </ul>"},{"location":"app/logging/#integration-with-monitoring","title":"Integration with Monitoring","text":"<p>The logging system is integrated with the monitoring system. Metrics about log volume and errors are available in the monitoring dashboards.</p>"},{"location":"app/monitoring/","title":"Application Monitoring","text":""},{"location":"app/monitoring/#overview","title":"Overview","text":"<p>This directory contains the monitoring configuration for the FastAPI application. The monitoring system is based on Prometheus and Grafana.</p>"},{"location":"app/monitoring/#components","title":"Components","text":"<ul> <li>Prometheus: Collects and stores metrics</li> <li>Grafana: Visualizes metrics and provides dashboards</li> <li>Prometheus FastAPI Instrumentator: Adds FastAPI-specific metrics</li> </ul>"},{"location":"app/monitoring/#metrics","title":"Metrics","text":"<p>The following metrics are collected:</p> <ul> <li>HTTP request count</li> <li>HTTP request duration</li> <li>HTTP request size</li> <li>HTTP response size</li> <li>HTTP status codes</li> <li>Database query count</li> <li>Database query duration</li> <li>Memory usage</li> <li>CPU usage</li> </ul>"},{"location":"app/monitoring/#dashboards","title":"Dashboards","text":"<p>The following dashboards are available:</p> <ul> <li>Application Overview: General application metrics</li> <li>HTTP Requests: Detailed HTTP request metrics</li> <li>Database: Database performance metrics</li> <li>System Resources: CPU, memory, and disk usage</li> </ul>"},{"location":"app/monitoring/#setup","title":"Setup","text":"<p>The monitoring system is automatically set up when you run:</p> <pre><code>make monitoring-up\n</code></pre>"},{"location":"app/monitoring/#accessing-dashboards","title":"Accessing Dashboards","text":"<p>Once the monitoring system is running, you can access the dashboards at:</p> <ul> <li>Grafana: <code>http://localhost:3000</code></li> <li>Prometheus: <code>http://localhost:9090</code></li> </ul>"},{"location":"app/monitoring/#configuration","title":"Configuration","text":"<p>The monitoring configuration can be customized by editing the following files:</p> <ul> <li><code>prometheus.yml</code>: Prometheus configuration</li> <li><code>grafana/dashboards/*.json</code>: Grafana dashboards</li> <li><code>grafana/datasources/*.yml</code>: Grafana data sources</li> </ul>"},{"location":"app/monitoring/#integration-with-alerts","title":"Integration with Alerts","text":"<p>The monitoring system is integrated with the alerting system. Alerts are configured in:</p> <ul> <li><code>prometheus/alerts.yml</code>: Alert rules</li> <li><code>alertmanager/config.yml</code>: Alert manager configuration</li> </ul>"},{"location":"app/scripts/","title":"Scripts Directory","text":"<p>This directory contains utility scripts for the project, organized by functionality.</p>"},{"location":"app/scripts/#directory-structure","title":"Directory Structure","text":"<pre><code>scripts/\n\u251c\u2500\u2500 branch/           # Branch management scripts\n\u2502   \u251c\u2500\u2500 create-branch.ts       # Interactive branch creation CLI\n\u2502   \u251c\u2500\u2500 feature.sh             # Feature branch creation script\n\u2502   \u2514\u2500\u2500 block-main-push.py     # Git hook to prevent direct pushes to main/dev\n\u251c\u2500\u2500 test/             # Testing scripts\n\u2502   \u251c\u2500\u2500 test-app.ts            # Test application runner\n\u2502   \u251c\u2500\u2500 test-workflow.sh       # GitHub workflow tester\n\u2502   \u251c\u2500\u2500 test-workflow-selector.ts # Interactive workflow selector\n\u2502   \u251c\u2500\u2500 test-local.sh          # Run local tests\n\u2502   \u251c\u2500\u2500 run-tests.sh           # Run tests with test environment variables\n\u2502   \u2514\u2500\u2500 diagnose-act.sh        # Diagnose GitHub Actions local runner\n\u251c\u2500\u2500 dev/              # Development tools\n\u2502   \u251c\u2500\u2500 dev-generate-client.sh # API client generator\n\u2502   \u251c\u2500\u2500 setup-precommit.ts     # Pre-commit hooks setup\n\u2502   \u2514\u2500\u2500 setup-project.sh       # Set up project directory structure\n\u251c\u2500\u2500 ci/               # CI/CD scripts\n\u2502   \u251c\u2500\u2500 test-ci-workflow.sh    # CI/CD workflow tester\n\u2502   \u2514\u2500\u2500 deploy-app.sh          # Build, push, and deploy application\n\u251c\u2500\u2500 docs/             # Documentation scripts\n\u2502   \u2514\u2500\u2500 update-docs.sh         # Update documentation files\n\u2514\u2500\u2500 utils/            # Utility functions\n    \u251c\u2500\u2500 index.ts               # String utilities\n    \u2514\u2500\u2500 __tests__/             # Tests for utilities\n        \u2514\u2500\u2500 string-utils.test.ts\n</code></pre>"},{"location":"app/scripts/#testing","title":"Testing","text":"<p>All scripts have corresponding tests in their respective <code>__tests__</code> directories. Tests are written using:</p> <ul> <li>TypeScript/JavaScript: Vitest for TS/JS files</li> <li>Python: unittest for Python files</li> <li>Shell: Bats (Bash Automated Testing System) for shell scripts</li> </ul> <p>To run all tests:</p> <pre><code>make test-scripts\n</code></pre> <p>Or run specific test types:</p> <pre><code>cd scripts\npnpm test:ts    # Run TypeScript tests\npnpm test:py    # Run Python tests\npnpm test:sh    # Run Shell script tests\n</code></pre>"},{"location":"app/scripts/#bats-testing-for-shell-scripts","title":"Bats Testing for Shell Scripts","text":"<p>Bats is a testing framework for Bash scripts. To use it:</p>"},{"location":"app/scripts/#installation","title":"Installation","text":"<pre><code># Using Homebrew (macOS)\nbrew install bats-core\n\n# Using npm\nnpm install -g bats\n\n# Manual installation\ngit clone https://github.com/bats-core/bats-core.git\ncd bats-core\n./install.sh /usr/local\n</code></pre>"},{"location":"app/scripts/#running-bats-tests","title":"Running Bats Tests","text":"<pre><code># Run a single test file\nbats scripts/test/__tests__/diagnose-act.bats\n\n# Run all Bats tests\nfind scripts -name \"*.bats\" | xargs bats\n</code></pre>"},{"location":"app/scripts/#bats-test-structure","title":"Bats Test Structure","text":"<p>Each Bats test file follows this structure:</p> <pre><code>#!/usr/bin/env bats\n\n# Setup - runs before each test\nsetup() {\n  # Create a temporary test environment\n}\n\n# Teardown - runs after each test\nteardown() {\n  # Clean up the test environment\n}\n\n# Test case\n@test \"my script does something correctly\" {\n  # Run the script or function\n  run my_script.sh\n\n  # Check the output\n  [ \"$status\" -eq 0 ]\n  [[ \"$output\" == *\"expected output\"* ]]\n}\n</code></pre>"},{"location":"app/scripts/#branch-management-scripts","title":"Branch Management Scripts","text":""},{"location":"app/scripts/#create-branchts","title":"create-branch.ts","text":"<p>Interactive CLI for creating feature and fix branches following the project's branching strategy.</p> <pre><code># Interactive mode\nnode scripts/branch/create-branch.ts\n\n# Non-interactive mode\nnode scripts/branch/create-branch.ts --type feat --name \"new-feature\"\nnode scripts/branch/create-branch.ts --type fix --name \"bug-fix\" --automerge\n</code></pre>"},{"location":"app/scripts/#featuresh","title":"feature.sh","text":"<p>Shell script for creating feature branches with additional validation.</p> <pre><code>./scripts/branch/feature.sh\n</code></pre>"},{"location":"app/scripts/#block-main-pushpy","title":"block-main-push.py","text":"<p>Git pre-push hook to prevent direct pushes to protected branches (main, dev).</p>"},{"location":"app/scripts/#test-scripts","title":"Test Scripts","text":""},{"location":"app/scripts/#test-appts","title":"test-app.ts","text":"<p>Unified interface for running tests in local or CI environments.</p> <pre><code>node scripts/test/test-app.ts local\nnode scripts/test/test-app.ts ci\n</code></pre>"},{"location":"app/scripts/#test-workflowsh","title":"test-workflow.sh","text":"<p>Tests GitHub Actions workflows locally using act.</p> <pre><code>./scripts/test/test-workflow.sh -w workflow_file.yml -e push\n</code></pre>"},{"location":"app/scripts/#test-workflow-selectorts","title":"test-workflow-selector.ts","text":"<p>Interactive selector for testing GitHub workflows.</p> <pre><code>node scripts/test/test-workflow-selector.ts\n</code></pre>"},{"location":"app/scripts/#test-localsh","title":"test-local.sh","text":"<p>Runs local tests for both backend and frontend.</p> <pre><code>./scripts/test/test-local.sh\n</code></pre>"},{"location":"app/scripts/#run-testssh","title":"run-tests.sh","text":"<p>Runs tests with test environment variables. Used by pre-commit hooks.</p> <pre><code>./scripts/test/run-tests.sh\n</code></pre>"},{"location":"app/scripts/#diagnose-actsh","title":"diagnose-act.sh","text":"<p>Diagnoses issues with GitHub Actions local runner (act).</p> <pre><code>./scripts/test/diagnose-act.sh\n</code></pre>"},{"location":"app/scripts/#development-tools","title":"Development Tools","text":""},{"location":"app/scripts/#dev-generate-clientsh","title":"dev-generate-client.sh","text":"<p>Generates TypeScript client code from OpenAPI specification.</p> <pre><code>./scripts/dev/dev-generate-client.sh\n</code></pre>"},{"location":"app/scripts/#setup-precommitts","title":"setup-precommit.ts","text":"<p>Installs and configures pre-commit hooks for the project.</p> <pre><code>node scripts/dev/setup-precommit.ts\n</code></pre>"},{"location":"app/scripts/#setup-projectsh","title":"setup-project.sh","text":"<p>Sets up the project directory structure.</p> <pre><code>./scripts/dev/setup-project.sh\n</code></pre>"},{"location":"app/scripts/#cicd-scripts","title":"CI/CD Scripts","text":""},{"location":"app/scripts/#test-ci-workflowsh","title":"test-ci-workflow.sh","text":"<p>Tests the complete CI/CD workflow pipeline using GitHub Actions local runner.</p> <pre><code>./scripts/ci/test-ci-workflow.sh\n</code></pre>"},{"location":"app/scripts/#deploy-appsh","title":"deploy-app.sh","text":"<p>Unified script for building, pushing, and deploying the application.</p> <pre><code>./scripts/ci/deploy-app.sh [build|push|deploy|all]\n</code></pre>"},{"location":"app/scripts/#documentation-scripts","title":"Documentation Scripts","text":""},{"location":"app/scripts/#update-docssh","title":"update-docs.sh","text":"<p>Updates documentation files like the changelog.</p> <pre><code>./scripts/docs/update-docs.sh\n</code></pre>"},{"location":"app/scripts/#utilities","title":"Utilities","text":""},{"location":"app/scripts/#utilsindexts","title":"utils/index.ts","text":"<p>Contains string utility functions:</p> <ul> <li><code>paramCase</code>: Converts a string to param-case (lowercase with hyphens)</li> </ul>"},{"location":"app/workflows/github-actions/","title":"GitHub Actions Workflows","text":"<p>This document provides an overview of the GitHub Actions workflows used in this project, including best practices for local testing and troubleshooting.</p>"},{"location":"app/workflows/github-actions/#workflow-overview","title":"Workflow Overview","text":"<p>The project uses several GitHub Actions workflows to automate testing, building, and deployment:</p> <ol> <li>Test Docker Compose - Tests the Docker Compose setup</li> <li>Generate API Client - Automatically generates the frontend API client</li> <li>Format and Lint - Runs code formatting and linting checks</li> <li>Feature Branch Checks - Runs tests on feature branches</li> <li>Deploy to Staging - Deploys to the staging environment</li> <li>Deploy to Production - Deploys to the production environment</li> <li>Automerge - Automatically merges fix branches with the <code>-automerge</code> suffix to the dev branch after tests pass</li> </ol>"},{"location":"app/workflows/github-actions/#local-testing-with-act","title":"Local Testing with Act","text":"<p>You can test GitHub Actions workflows locally using our consolidated testing script:</p>"},{"location":"app/workflows/github-structure/","title":"GitHub Directory Structure","text":"<p>This document outlines the consolidated structure for the <code>.github</code> directory and explains the organization of GitHub Actions workflows.</p>"},{"location":"app/workflows/github-structure/#directory-structure","title":"Directory Structure","text":"<pre><code>.github/\n\u251c\u2500\u2500 workflows/\n\u2502   \u251c\u2500\u2500 branch/                # Branch-specific workflows\n\u2502   \u2502   \u251c\u2500\u2500 feature.yml        # Feature branch checks\n\u2502   \u2502   \u251c\u2500\u2500 dev.yml            # Development branch workflows\n\u2502   \u2502   \u2514\u2500\u2500 main.yml           # Main branch workflows\n\u2502   \u251c\u2500\u2500 deploy/                # Deployment workflows\n\u2502   \u2502   \u251c\u2500\u2500 staging.yml        # Staging deployment\n\u2502   \u2502   \u2514\u2500\u2500 production.yml     # Production deployment\n\u2502   \u251c\u2500\u2500 testing/               # Testing workflows\n\u2502   \u2502   \u251c\u2500\u2500 backend.yml        # Backend tests\n\u2502   \u2502   \u251c\u2500\u2500 frontend.yml       # Frontend tests\n\u2502   \u2502   \u251c\u2500\u2500 integration.yml    # Integration tests\n\u2502   \u2502   \u2514\u2500\u2500 e2e.yml            # End-to-end tests\n\u2502   \u251c\u2500\u2500 ci/                    # CI utilities\n\u2502   \u2502   \u251c\u2500\u2500 lint.yml           # Linting workflows\n\u2502   \u2502   \u251c\u2500\u2500 security.yml       # Security scanning\n\u2502   \u2502   \u2514\u2500\u2500 generate-client.yml # API client generation\n\u2502   \u2514\u2500\u2500 _shared/               # Reusable components\n\u2502       \u251c\u2500\u2500 actions.yml        # Reusable actions\n\u2502       \u2514\u2500\u2500 jobs.yml           # Reusable jobs\n\u251c\u2500\u2500 CODEOWNERS                 # Code ownership definitions\n\u251c\u2500\u2500 dependabot.yml             # Dependabot configuration\n\u251c\u2500\u2500 labeler.yml                # PR labeler configuration\n\u2514\u2500\u2500 pull_request_template.md   # PR template\n</code></pre>"},{"location":"app/workflows/github-structure/#workflow-organization","title":"Workflow Organization","text":""},{"location":"app/workflows/github-structure/#branch-based-workflows","title":"Branch-Based Workflows","text":"<p>These workflows are triggered based on branch activity:</p> <ul> <li> <p>feature.yml: Triggered on pushes to <code>feat/*</code> and <code>fix/*</code> branches</p> </li> <li> <p>Style checks (black, flake8, eslint, prettier)</p> </li> <li>Security checks (bandit, npm audit, pip-audit)</li> <li>Linting &amp; formatting</li> <li> <p>Unit tests</p> </li> <li> <p>dev.yml: Triggered on pushes to <code>dev</code> branch</p> </li> <li> <p>Minimal test suite (unit, linting, security)</p> </li> <li> <p>Staging deployment</p> </li> <li> <p>main.yml: Triggered on pushes to <code>main</code> branch</p> </li> <li>Complete test suite</li> <li>Security scans</li> <li>Dependency checks</li> </ul>"},{"location":"app/workflows/github-structure/#deployment-workflows","title":"Deployment Workflows","text":"<ul> <li> <p>staging.yml: Deploys to staging environment</p> </li> <li> <p>Triggered by successful <code>dev</code> branch workflow</p> </li> <li> <p>Uses AWS ECS for deployment</p> </li> <li> <p>production.yml: Deploys to production environment</p> </li> <li>Triggered by release tags on <code>main</code> branch</li> <li>Uses AWS ECS for deployment</li> </ul>"},{"location":"app/workflows/github-structure/#testing-workflows","title":"Testing Workflows","text":"<p>Specialized workflows for different types of tests:</p> <ul> <li>backend.yml: Backend unit and integration tests</li> <li>frontend.yml: Frontend unit tests</li> <li>integration.yml: API and service integration tests</li> <li>e2e.yml: End-to-end tests with Playwright</li> </ul>"},{"location":"app/workflows/github-structure/#ci-utilities","title":"CI Utilities","text":"<ul> <li>lint.yml: Code linting and formatting checks</li> <li>security.yml: Security scanning and vulnerability checks</li> <li>generate-client.yml: Generates TypeScript client from OpenAPI spec</li> </ul>"},{"location":"app/workflows/github-structure/#shared-components","title":"Shared Components","text":"<ul> <li>actions.yml: Reusable GitHub Actions steps</li> <li>jobs.yml: Reusable job definitions for common tasks</li> </ul>"},{"location":"app/workflows/github-structure/#implementation-plan","title":"Implementation Plan","text":"<ol> <li>Create the new directory structure</li> <li>Migrate existing workflows to the new structure</li> <li>Update workflow references and dependencies</li> <li>Test workflows with <code>act</code> to ensure they work correctly</li> <li>Update documentation to reflect the new structure</li> </ol>"},{"location":"app/workflows/github-structure/#benefits","title":"Benefits","text":"<ul> <li>Improved organization: Workflows are grouped by purpose</li> <li>Better maintainability: Easier to find and update specific workflows</li> <li>Reduced duplication: Shared components reduce code duplication</li> <li>Clearer workflow paths: Branch-based organization matches development workflow</li> </ul>"},{"location":"infra/","title":"FastAPI Project Infrastructure","text":"<p>Infrastructure as Code (IaC) repository for managing the FastAPI project infrastructure using Terraform with OIDC authentication for secure GitHub Actions integration.</p>"},{"location":"infra/#project-overview","title":"\ud83d\udccb Project Overview","text":"<p>This repository contains the infrastructure code for the FastAPI project, organized into three main components:</p> Component Description Bootstrap Sets up foundational AWS resources (S3, DynamoDB, IAM) Terraform Modules Reusable infrastructure components (VPC, EKS, ArgoCD, etc.) Environment Deployments Environment-specific configurations (Development, Staging, Production)"},{"location":"infra/#architecture","title":"\ud83c\udfd7\ufe0f Architecture","text":""},{"location":"infra/#directory-structure","title":"\ud83d\udcc1 Directory Structure","text":"Directory Description <code>bootstrap/</code> Infrastructure bootstrap code <code>bootstrap/environments/</code> Environment-specific bootstrap configurations <code>bootstrap/modules/</code> Reusable bootstrap Terraform modules <code>bootstrap/scripts/</code> Utility scripts for bootstrap setup <code>terraform/modules/</code> Reusable infrastructure modules <code>terraform/modules/argo/</code> ArgoCD deployment module <code>terraform/modules/eks/</code> EKS cluster module <code>terraform/modules/external-secrets/</code> External Secrets Operator module <code>terraform/modules/ghcr-access/</code> GitHub Container Registry access module <code>terraform/modules/iam/</code> IAM roles and policies module <code>terraform/modules/k8s-resources/</code> Kubernetes resources module <code>terraform/modules/oidc/</code> OIDC provider module <code>terraform/modules/rds/</code> RDS database module <code>terraform/modules/security/</code> Security groups module <code>terraform/modules/vpc/</code> VPC network module <code>terraform/environments/</code> Environment-specific deployments <code>terraform/environments/clean-deploy/</code> Clean deployment approach <code>terraform/environments/clean-deploy/development/</code> Development environment configuration <code>terraform/environments/clean-deploy/staging/</code> Staging environment configuration <code>terraform/environments/clean-deploy/production/</code> Production environment configuration"},{"location":"infra/#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"infra/#prerequisites","title":"Prerequisites","text":"<ol> <li>AWS CLI: Installed and configured with appropriate credentials</li> <li>Terraform: Version 1.5.7 or later</li> <li>kubectl: For interacting with Kubernetes clusters</li> <li>GitHub Account: For OIDC authentication</li> </ol>"},{"location":"infra/#environment-setup","title":"Environment Setup","text":"<ol> <li>Clone the repository</li> </ol> <pre><code>git clone https://github.com/datascientest-fastAPI-project-group-25/fastAPI-project-infra.git\ncd fastAPI-project-infra\n</code></pre> <ol> <li>Set up AWS credentials</li> </ol> <pre><code>aws configure\n# Enter your AWS Access Key ID, Secret Access Key, and default region\n</code></pre>"},{"location":"infra/#setting-up-terraform-state","title":"Setting up Terraform State","text":"<pre><code># Create S3 bucket and DynamoDB table for Terraform state\n./setup-state.sh\n</code></pre>"},{"location":"infra/#deploying-with-oidc-authentication","title":"Deploying with OIDC Authentication","text":"<pre><code># Deploy infrastructure with OIDC authentication\n./deploy-with-oidc.sh\n</code></pre>"},{"location":"infra/#staged-deployment","title":"Staged Deployment","text":"<p>For more control, you can deploy each component separately:</p> <pre><code># Deploy IAM resources\ncd terraform/environments/clean-deploy/development\nterraform init \\\n  -backend-config=\"bucket=fastapi-project-terraform-state-YOUR_AWS_ACCOUNT_ID\" \\\n  -backend-config=\"key=fastapi/infra/dev/terraform.tfstate\" \\\n  -backend-config=\"region=us-east-1\" \\\n  -backend-config=\"dynamodb_table=terraform-state-lock-dev\"\nterraform apply -target=module.iam\n\n# Deploy VPC\nterraform apply -target=module.vpc\n\n# Deploy security groups\nterraform apply -target=module.security\n\n# Deploy EKS cluster\nterraform apply -target=module.eks\n\n# Deploy Kubernetes resources\nterraform apply -target=module.k8s_resources\n\n# Deploy ArgoCD\nterraform apply -target=module.argocd\n\n# Deploy External Secrets Operator\nterraform apply -target=module.external_secrets\n\n# Deploy GHCR access\nterraform apply -target=module.ghcr_access\n</code></pre> <p>For more information, see the Clean Deploy README.</p>"},{"location":"infra/#make-commands","title":"\ud83d\udee0\ufe0f Make Commands","text":""},{"location":"infra/#root-makefile-commands","title":"Root Makefile Commands","text":"Command Description <code>make ENV=aws tf_plan</code> Run Terraform plan for AWS environment <code>make tf_plan</code> Run Terraform plan for LocalStack environment (default) <code>make ENV=test test</code> Run tests using test environment <code>make ENV=local-test act_mock</code> Run GitHub Actions locally with Act <code>make git_feature</code> Create a new feature branch <code>make git_fix</code> Create a new fix branch <code>make git_commit</code> Commit changes in logical groups <code>make git_push</code> Push current branch to remote <code>make git_merge_main</code> Merge current branch to main branch <code>make git_status</code> Show git status <code>make help</code> Show all available commands"},{"location":"infra/#bootstrap-makefile-commands","title":"Bootstrap Makefile Commands","text":"Command Description <code>make -C bootstrap start-localstack</code> Start LocalStack container <code>make -C bootstrap local-init</code> Initialize Terraform for LocalStack <code>make -C bootstrap local-apply</code> Apply changes to LocalStack <code>make -C bootstrap aws-prepare</code> Package Lambda for AWS deployment <code>make -C bootstrap aws-bootstrap-dryrun</code> Run AWS bootstrap dry run <code>make -C bootstrap help</code> Show all bootstrap commands"},{"location":"infra/#docker-based-bootstrap-commands","title":"Docker-based Bootstrap Commands","text":"Command Description <code>make -C bootstrap docker-build</code> Build Docker images for AWS and LocalStack <code>make -C bootstrap docker-aws</code> Start AWS environment in Docker <code>make -C bootstrap docker-localstack</code> Start LocalStack environment in Docker <code>make -C bootstrap docker-aws-setup-state</code> Set up Terraform state in AWS using Docker <code>make -C bootstrap docker-aws-bootstrap-dryrun</code> Run AWS bootstrap dry run in Docker <code>make -C bootstrap docker-localstack-bootstrap-dryrun</code> Run LocalStack bootstrap dry run in Docker <code>make -C bootstrap docker-test</code> Test both Docker environments <code>make -C bootstrap docker-clean</code> Clean up Docker resources"},{"location":"infra/#aws-authentication","title":"\ud83d\udd10 AWS Authentication","text":""},{"location":"infra/#oidc-authentication","title":"OIDC Authentication","text":"<p>This project uses OpenID Connect (OIDC) for secure authentication between GitHub Actions and AWS, eliminating the need for long-lived AWS credentials.</p>"},{"location":"infra/#benefits-of-oidc","title":"Benefits of OIDC","text":"Benefit Description No Stored Secrets No AWS credentials stored in GitHub Secrets Short-lived Credentials Temporary credentials generated on-demand Fine-grained Permissions Precise control over which repositories and branches can access AWS resources Reduced Risk Eliminates risk of leaked credentials"},{"location":"infra/#required-configuration","title":"Required Configuration","text":"Resource Description OIDC Provider AWS IAM OIDC provider for GitHub Actions IAM Role Role with appropriate permissions that GitHub Actions can assume Trust Relationship Policy that allows specific GitHub repositories to assume the role"},{"location":"infra/#setup-process","title":"Setup Process","text":"<ol> <li>Create OIDC Provider</li> <li>This is automatically created by the <code>setup-state.sh</code> script</li> <li> <p>Or manually create an OIDC provider with URL <code>https://token.actions.githubusercontent.com</code></p> </li> <li> <p>Create IAM Role</p> </li> <li>This is automatically created by the <code>setup-state.sh</code> script</li> <li>Or manually create a role with appropriate permissions and trust relationship</li> </ol>"},{"location":"infra/#usage-in-workflows","title":"Usage in Workflows","text":"<p>The GitHub Actions workflows automatically use OIDC authentication:</p> <pre><code>permissions:\n  id-token: write  # Required for OIDC authentication\n  contents: read\n\njobs:\n  deploy:\n    steps:\n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v2\n        with:\n          role-to-assume: arn:aws:iam::123456789012:role/github-actions-role\n          aws-region: us-east-1\n</code></pre>"},{"location":"infra/#security-best-practices","title":"Security Best Practices","text":"Practice Description Restrict by Repository Limit which repositories can assume the role Restrict by Branch Limit which branches can assume the role Least Privilege Grant only the permissions needed for the workflow Monitor Activity Watch for unusual AWS account activity Regular Audits Periodically review OIDC configurations and permissions"},{"location":"infra/#environment-configuration","title":"\ud83c\udf0d Environment Configuration","text":""},{"location":"infra/#environment-structure","title":"Environment Structure","text":"<p>The infrastructure is organized into three environments, each with its own configuration:</p> Environment Purpose Characteristics Development For development and testing Lightweight, in-cluster PostgreSQL Staging Pre-production testing Mirrors production with smaller resources, RDS PostgreSQL Production Live environment High availability, RDS PostgreSQL with multi-AZ"},{"location":"infra/#configuration-files","title":"Configuration Files","text":"Location Purpose <code>terraform/environments/clean-deploy/development/</code> Development environment configuration <code>terraform/environments/clean-deploy/staging/</code> Staging environment configuration <code>terraform/environments/clean-deploy/production/</code> Production environment configuration <code>terraform/environments/clean-deploy/development/terraform.tfvars</code> Development-specific variables <code>terraform/environments/clean-deploy/staging/terraform.tfvars</code> Staging-specific variables <code>terraform/environments/clean-deploy/production/terraform.tfvars</code> Production-specific variables"},{"location":"infra/#terraform-variables","title":"Terraform Variables","text":"<p>Each environment has its own set of variables defined in <code>terraform.tfvars</code> files:</p> <pre><code># Example Development Variables (development/terraform.tfvars)\nproject_name    = \"fastapi-project\"\nenvironment     = \"dev\"\naws_region      = \"us-east-1\"\ncidr            = \"10.0.0.0/16\"\ndb_username     = \"postgres\"\ndb_password     = \"postgres123\"\ngithub_token    = \"ghp_xxxxxxxxxxxxxxxxxxxx\"\n\n# Cluster Configuration\neks_cluster_name = \"fastapi-project-eks-dev\"\neks_cluster_version = \"1.27\"\neks_instance_types = [\"t3.small\"]\n</code></pre>"},{"location":"infra/#environment-specific-differences","title":"Environment-Specific Differences","text":"Feature Development Staging Production Database In-cluster PostgreSQL RDS PostgreSQL RDS PostgreSQL (Multi-AZ) Instance Types t3.small t3.medium t3.large Node Count 2 2 3 CIDR Range 10.0.0.0/16 10.1.0.0/16 10.2.0.0/16 Self-healing Basic Enhanced Full Monitoring Basic Enhanced Comprehensive"},{"location":"infra/#development-workflow","title":"\ud83d\udd04 Development Workflow","text":"<ol> <li>Bootstrap infrastructure provides foundational resources</li> <li>Deploy main infrastructure using bootstrapped resources</li> <li>Test changes locally using LocalStack</li> <li>Contribute by creating pull requests</li> </ol>"},{"location":"infra/#git-workflow","title":"\ud83c\udf3f Git Workflow","text":"<p>This project follows a trunk-based development model to maintain code quality and facilitate collaboration.</p>"},{"location":"infra/#branch-structure","title":"Branch Structure","text":"<ul> <li><code>main</code>: Production branch (protected)</li> <li><code>feat/*</code>: Feature branches</li> <li><code>fix/*</code>: Bug fix branches</li> </ul>"},{"location":"infra/#folder-based-environments","title":"Folder-Based Environments","text":"<p>Instead of using separate branches for different environments, we use folder-based environments:</p> <ul> <li><code>terraform/environments/clean-deploy/development/</code>: Configuration for the development environment.</li> <li><code>terraform/environments/clean-deploy/staging/</code>: Configuration for the staging environment.</li> <li><code>terraform/environments/clean-deploy/production/</code>: Configuration for the production environment.</li> </ul>"},{"location":"infra/#git-commands","title":"Git Commands","text":"Command Description <code>make git_feature</code> Create a new feature branch <code>make git_fix</code> Create a new fix branch <code>make git_commit</code> Commit changes in logical groups <code>make git_push</code> Push current branch to remote <code>make git_merge_main</code> Merge current branch to main branch <code>make git_status</code> Show git status <p>For detailed information about the Git workflow, see BRANCHING.md.</p> <p>An example script demonstrating the Git workflow is available in examples/git-workflow-example.sh.</p>"},{"location":"infra/#license","title":"\ud83d\udcc4 License","text":"<p>See LICENSE file.</p>"},{"location":"infra/BRANCHING/","title":"Git Branching Strategy","text":"<p>This document outlines the Git branching strategy for the fastAPI-project-infra repository.</p>"},{"location":"infra/BRANCHING/#branch-structure","title":"Branch Structure","text":"<p>The repository follows a simplified trunk-based development model:</p> <ul> <li><code>main</code>: The production branch. All code in this branch should be stable and deployable.</li> <li><code>feat/*</code>: Feature branches for new features or enhancements.</li> <li><code>fix/*</code>: Fix branches for bug fixes.</li> </ul>"},{"location":"infra/BRANCHING/#environment-structure","title":"Environment Structure","text":"<p>Instead of using separate branches for different environments, we use folder-based environments:</p> <ul> <li><code>environments/stg/</code>: Configuration for the staging environment.</li> <li><code>environments/prod/</code>: Configuration for the production environment.</li> </ul>"},{"location":"infra/BRANCHING/#workflow","title":"Workflow","text":""},{"location":"infra/BRANCHING/#creating-a-new-feature-branch","title":"Creating a New Feature Branch","text":"<p>To create a new feature branch:</p> <pre><code>make git_feature\n</code></pre> <p>You will be prompted to enter a feature name. Use hyphens instead of spaces (e.g., <code>new-security-module</code>).</p>"},{"location":"infra/BRANCHING/#creating-a-new-fix-branch","title":"Creating a New Fix Branch","text":"<p>To create a new fix branch:</p> <pre><code>make git_fix\n</code></pre> <p>You will be prompted to enter a fix name. Use hyphens instead of spaces (e.g., <code>broken-terraform-module</code>).</p>"},{"location":"infra/BRANCHING/#committing-changes-in-logical-groups","title":"Committing Changes in Logical Groups","text":"<p>To commit changes in logical groups:</p> <pre><code>make git_commit\n</code></pre> <p>This will: 1. Show you all available files to commit 2. Prompt you to enter the files you want to commit (space-separated, or <code>.</code> for all) 3. Show you the files staged for commit 4. Prompt you to enter a commit message</p>"},{"location":"infra/BRANCHING/#pushing-your-branch","title":"Pushing Your Branch","text":"<p>To push your branch to the remote repository:</p> <pre><code>make git_push\n</code></pre>"},{"location":"infra/BRANCHING/#merging-to-main-branch","title":"Merging to Main Branch","text":"<p>When your feature or fix is complete, merge it to the main branch:</p> <pre><code>make git_merge_main\n</code></pre> <p>This will: 1. Checkout the main branch 2. Merge your current branch into main 3. Push the main branch to the remote repository 4. Return to your original branch</p>"},{"location":"infra/BRANCHING/#checking-status","title":"Checking Status","text":"<p>To check the status of your Git repository:</p> <pre><code>make git_status\n</code></pre>"},{"location":"infra/BRANCHING/#best-practices","title":"Best Practices","text":"<ol> <li>Keep branches focused: Each branch should address a single feature or fix.</li> <li>Commit in logical groups: Use <code>make git_commit</code> to commit related changes together.</li> <li>Write descriptive commit messages: Clearly explain what changes were made and why.</li> <li>Regularly pull from main: Keep your feature or fix branch up to date with the latest changes in main.</li> <li>Delete branches after merging: Clean up branches that have been merged to keep the repository tidy.</li> </ol>"},{"location":"infra/BRANCHING/#branch-protection","title":"Branch Protection","text":"<p>The <code>main</code> branch is protected and requires pull requests to be reviewed before merging. Direct pushes to <code>main</code> are not allowed.</p> <p>Feature branches should be thoroughly tested before creating a pull request to merge into <code>main</code>.</p>"},{"location":"infra/bootstrap-README/","title":"Bootstrap Environments","text":"<p>This directory contains the bootstrap environments for the FastAPI project infrastructure. The bootstrap environments are used to set up the initial infrastructure required for the project.</p>"},{"location":"infra/bootstrap-README/#dockerized-environments","title":"Dockerized Environments","text":"<p>The bootstrap environments have been dockerized to ensure they can run on any system. The following environments are available:</p> <ol> <li>AWS Environment: Used to set up infrastructure in AWS</li> <li>Localstack Environment: Used to set up infrastructure locally using Localstack</li> </ol>"},{"location":"infra/bootstrap-README/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker</li> <li>Docker Compose</li> </ul>"},{"location":"infra/bootstrap-README/#usage","title":"Usage","text":""},{"location":"infra/bootstrap-README/#building-the-docker-images","title":"Building the Docker Images","text":"<pre><code>cd bootstrap\nmake docker-build\n</code></pre>"},{"location":"infra/bootstrap-README/#aws-environment","title":"AWS Environment","text":"<p>To start the AWS environment:</p> <pre><code>cd bootstrap\nmake docker-aws\n</code></pre> <p>This will start a Docker container with the AWS environment and open a bash shell. From there, you can run AWS CLI commands and Terraform commands.</p> <p>To set up the Terraform state resources in AWS:</p> <pre><code>cd bootstrap\nmake docker-aws-setup-state\n</code></pre> <p>To run a bootstrap dryrun in AWS:</p> <pre><code>cd bootstrap\nmake docker-aws-bootstrap-dryrun\n</code></pre>"},{"location":"infra/bootstrap-README/#localstack-environment","title":"Localstack Environment","text":"<p>To start the Localstack environment:</p> <pre><code>cd bootstrap\nmake docker-localstack\n</code></pre> <p>This will start a Docker container with the Localstack environment and open a bash shell. From there, you can run AWS CLI commands and Terraform commands against Localstack.</p> <p>To run a bootstrap dryrun in Localstack:</p> <pre><code>cd bootstrap\nmake docker-localstack-bootstrap-dryrun\n</code></pre>"},{"location":"infra/bootstrap-README/#testing-the-environments","title":"Testing the Environments","text":"<p>To test both environments:</p> <pre><code>cd bootstrap\nmake docker-test\n</code></pre> <p>This will run a test script that builds the Docker images, runs the bootstrap dryrun for both environments, and cleans up the Docker resources.</p>"},{"location":"infra/bootstrap-README/#cleaning-up","title":"Cleaning Up","text":"<p>To clean up the Docker resources:</p> <pre><code>cd bootstrap\nmake docker-clean\n</code></pre>"},{"location":"infra/bootstrap-README/#environment-variables","title":"Environment Variables","text":"<p>The Docker containers use environment variables for configuration. The following environment variables are used:</p>"},{"location":"infra/bootstrap-README/#aws-environment_1","title":"AWS Environment","text":""},{"location":"infra/bootstrap-README/#authentication-methods","title":"Authentication Methods","text":"<p>The bootstrap environment supports two authentication methods for AWS:</p> <ol> <li>Role-Based Authentication (Recommended)</li> <li>User-Based Authentication (Legacy)</li> </ol>"},{"location":"infra/bootstrap-README/#role-based-authentication","title":"Role-Based Authentication","text":"<p>Role-based authentication uses AWS IAM roles to provide temporary credentials, which is more secure and easier to manage across multiple users and machines. This approach is recommended for team environments.</p> <p>Required environment variables: - <code>AWS_ACCOUNT_ID</code>: Your AWS account ID - <code>AWS_BOOTSTRAP_ROLE_NAME</code>: Name of the IAM role to assume (default: FastAPIProjectBootstrapInfraRole) - <code>AWS_DEFAULT_REGION</code>: AWS region (default: us-east-1)</p> <p>To use role-based authentication:</p> <ol> <li>Ensure the role exists in your AWS account with appropriate permissions</li> <li>Set up your AWS CLI with credentials that have permission to assume the role</li> <li>Set the required environment variables</li> </ol> <pre><code>export AWS_ACCOUNT_ID=your-account-id\nexport AWS_BOOTSTRAP_ROLE_NAME=FastAPIProjectBootstrapInfraRole\n</code></pre> <p>The bootstrap script will automatically attempt to assume the role if <code>AWS_BOOTSTRAP_ROLE_NAME</code> is set.</p>"},{"location":"infra/bootstrap-README/#user-based-authentication-legacy","title":"User-Based Authentication (Legacy)","text":"<p>If you prefer to use direct AWS credentials:</p> <ul> <li><code>AWS_ACCESS_KEY_ID</code>: AWS access key ID (default: dummy-key)</li> <li><code>AWS_SECRET_ACCESS_KEY</code>: AWS secret access key (default: dummy-secret)</li> <li><code>AWS_DEFAULT_REGION</code>: AWS region (default: us-east-1)</li> <li><code>AWS_ACCOUNT_ID</code>: AWS account ID (default: 000000000000)</li> <li><code>PROJECT_NAME</code>: Project name (default: fastapi-project)</li> <li><code>ENVIRONMENT</code>: Environment name (default: dev)</li> </ul> <p>Note: For actual AWS operations to succeed, you need to set real AWS credentials. The default values are provided only to prevent warnings when running Docker Compose commands without setting these environment variables. They won't allow actual AWS operations to succeed.</p> <p>You can set these environment variables in several ways:</p> <ol> <li> <p>Environment variables in your shell:    <pre><code>export AWS_ACCESS_KEY_ID=your-access-key\nexport AWS_SECRET_ACCESS_KEY=your-secret-key\nexport AWS_ACCOUNT_ID=your-account-id\n</code></pre></p> </li> <li> <p>Create a .env file:    <pre><code># Create a .env file in the bootstrap directory\necho \"AWS_ACCESS_KEY_ID=your-access-key\" &gt; .env\necho \"AWS_SECRET_ACCESS_KEY=your-secret-key\" &gt;&gt; .env\necho \"AWS_ACCOUNT_ID=your-account-id\" &gt;&gt; .env\n</code></pre></p> </li> <li> <p>Copy and modify the example files:    <pre><code># Copy the example files and modify them with your credentials\ncp .env.base.example .env.base\n# Edit .env.base with your credentials\n</code></pre></p> </li> </ol>"},{"location":"infra/bootstrap-README/#localstack-environment_1","title":"Localstack Environment","text":"<ul> <li><code>AWS_ACCESS_KEY_ID</code>: AWS access key ID (default: test)</li> <li><code>AWS_SECRET_ACCESS_KEY</code>: AWS secret access key (default: test)</li> <li><code>AWS_DEFAULT_REGION</code>: AWS region (default: eu-west-2)</li> <li><code>AWS_ACCOUNT_ID</code>: AWS account ID (default: 000000000000)</li> <li><code>PROJECT_NAME</code>: Project name (default: fastapi-project)</li> <li><code>ENVIRONMENT</code>: Environment name (default: dev)</li> <li><code>LOCALSTACK_ENDPOINT</code>: Localstack endpoint (default: http://localstack:4566)</li> </ul>"},{"location":"infra/bootstrap-README/#docker-compose","title":"Docker Compose","text":"<p>The Docker Compose file defines the following services:</p> <ol> <li><code>aws</code>: AWS environment</li> <li><code>localstack-env</code>: Localstack environment</li> <li><code>localstack</code>: Localstack service</li> </ol> <p>The AWS environment mounts the local AWS credentials to allow access to AWS resources. The Localstack environment depends on the Localstack service and uses it for AWS emulation.</p>"},{"location":"infra/monitoring/","title":"Infrastructure Monitoring","text":""},{"location":"infra/monitoring/#overview","title":"Overview","text":"<p>This directory contains the monitoring configuration for the infrastructure. The monitoring system tracks the health and performance of the infrastructure components, including AWS resources, Kubernetes clusters, and networking.</p>"},{"location":"infra/monitoring/#components","title":"Components","text":"<ul> <li>Prometheus: Collects and stores metrics</li> <li>Grafana: Visualizes metrics and provides dashboards</li> <li>Alertmanager: Manages alerts and notifications</li> <li>CloudWatch Exporter: Provides AWS-specific metrics</li> <li>Node Exporter: Provides host-level metrics</li> <li>Blackbox Exporter: Provides network probing metrics</li> </ul>"},{"location":"infra/monitoring/#metrics","title":"Metrics","text":"<p>The following metrics are collected:</p> <ul> <li>AWS resource usage</li> <li>Kubernetes cluster health</li> <li>Node resource usage</li> <li>Network connectivity</li> <li>Service availability</li> <li>Cost metrics</li> <li>Security metrics</li> </ul>"},{"location":"infra/monitoring/#dashboards","title":"Dashboards","text":"<p>The following dashboards are available:</p> <ul> <li>Infrastructure Overview: General infrastructure metrics</li> <li>AWS Resources: Detailed AWS resource metrics</li> <li>Kubernetes: Kubernetes cluster metrics</li> <li>Network: Network connectivity metrics</li> <li>Cost: Cost analysis metrics</li> <li>Security: Security posture metrics</li> </ul>"},{"location":"infra/monitoring/#setup","title":"Setup","text":"<p>The monitoring system is automatically set up during the infrastructure provisioning. You can also set it up manually:</p> <pre><code>terraform apply -target=module.monitoring\n</code></pre>"},{"location":"infra/monitoring/#accessing-dashboards","title":"Accessing Dashboards","text":"<p>Once the monitoring system is running, you can access the dashboards at:</p> <ul> <li>Grafana: <code>https://grafana.&lt;your-domain&gt;</code></li> <li>Prometheus: <code>https://prometheus.&lt;your-domain&gt;</code></li> </ul>"},{"location":"infra/monitoring/#configuration","title":"Configuration","text":"<p>The monitoring configuration can be customized by editing the following files:</p> <ul> <li><code>terraform/modules/monitoring/*.tf</code>: Terraform configuration</li> <li><code>terraform/modules/monitoring/templates/*.yaml</code>: Kubernetes resources</li> <li><code>terraform/modules/monitoring/dashboards/*.json</code>: Grafana dashboards</li> </ul>"},{"location":"infra/monitoring/#integration-with-logging","title":"Integration with Logging","text":"<p>The monitoring system is integrated with the logging system. Metrics about log volume and errors are available in the monitoring dashboards.</p>"},{"location":"release/","title":"FastAPI Project Release","text":"<p>This repository contains the Kubernetes manifests, Helm charts, and Argo CD configurations for deploying the FastAPI application.</p>"},{"location":"release/#documentation","title":"Documentation","text":"<p>Detailed documentation is available in the <code>docs/</code> directory:</p> <ul> <li>Release Strategy - Comprehensive guide to the release strategy</li> <li>Quick Start Guide - Quick start guide for new team members</li> <li>Troubleshooting - Solutions to common issues</li> </ul>"},{"location":"release/#repository-structure","title":"Repository Structure","text":"<pre><code>.\n\u251c\u2500\u2500 charts/                    # Helm charts\n\u2502   \u2514\u2500\u2500 fastapi/              # FastAPI application Helm chart\n\u2502       \u251c\u2500\u2500 Chart.yaml        # Chart metadata\n\u2502       \u251c\u2500\u2500 values.yaml       # Default values\n\u2502       \u2514\u2500\u2500 templates/        # Helm templates\n\u2502           \u251c\u2500\u2500 _helpers.tpl\n\u2502           \u251c\u2500\u2500 backend-deployment.yaml\n\u2502           \u251c\u2500\u2500 configmap.yaml\n\u2502           \u251c\u2500\u2500 frontend-deployment.yaml\n\u2502           \u251c\u2500\u2500 ingress.yaml\n\u2502           \u251c\u2500\u2500 postgres-statefulset.yaml\n\u2502           \u251c\u2500\u2500 services.yaml\n\u2502           \u2514\u2500\u2500 db-init-script-configmap.yaml  # Database initialization and migrations\n\u251c\u2500\u2500 config/                   # Environment-specific configurations\n\u2502   \u251c\u2500\u2500 argocd/              # Argo CD Application manifests\n\u2502   \u2502   \u251c\u2500\u2500 staging.yaml     # Staging environment\n\u2502   \u2502   \u2514\u2500\u2500 production.yaml  # Production environment\n\u2502   \u2514\u2500\u2500 helm/                # Environment-specific Helm values\n\u2502       \u251c\u2500\u2500 values.yaml      # Default values (development)\n\u2502       \u251c\u2500\u2500 staging.yaml     # Staging environment\n\u2502       \u2514\u2500\u2500 production.yaml  # Production environment\n\u251c\u2500\u2500 scripts/                  # Deployment and maintenance scripts\n\u2502   \u251c\u2500\u2500 deploy-dev.sh        # Development deployment script\n\u2502   \u251c\u2500\u2500 deploy-prod.sh       # Production deployment script\n\u2502   \u251c\u2500\u2500 cleanup.sh           # Environment cleanup script\n\u2502   \u251c\u2500\u2500 setup-argocd.sh      # ArgoCD setup script\n\u2502   \u2514\u2500\u2500 setup-argocd-integration.sh # ArgoCD CI/CD integration script\n\u2514\u2500\u2500 .github/                 # GitHub Actions workflows\n    \u2514\u2500\u2500 workflows/\n        \u251c\u2500\u2500 helm-deploy.yml  # Deployment workflow\n        \u251c\u2500\u2500 helm-test.yml    # Helm chart testing workflow\n        \u251c\u2500\u2500 pr-automation.yml # PR automation workflow with branch deletion on merge\n        \u251c\u2500\u2500 helm-argocd-test.yml # ArgoCD configuration testing workflow\n        \u2514\u2500\u2500 argocd-integration.yml # ArgoCD integration workflow\n</code></pre>"},{"location":"release/#prerequisites","title":"Prerequisites","text":"<p>The project uses several tools that will be automatically checked and installed as needed. To begin:</p> <pre><code>make init\n</code></pre> <p>This command will: 1. Detect your operating system (macOS, Linux, or Windows) 2. Install Bun (JavaScript/TypeScript runtime) if not present 3. Check for and help you install other required tools:    - Git (Version control)    - Docker (Container runtime)    - Kubectl (Kubernetes CLI)    - k3d (Local Kubernetes)    - Helm (Kubernetes package manager)</p> <p>The initialization process is platform-aware and will provide appropriate installation instructions for your system.</p> <p>For macOS users with Homebrew, you can install all required tools with: <pre><code>brew install git docker kubectl k3d helm\n</code></pre></p> <p>You'll also need: - Kubernetes cluster - Argo CD installed - GitHub Container Registry access</p>"},{"location":"release/#release-strategy","title":"Release Strategy","text":"<p>This project follows a streamlined release strategy with feature/fix branches that merge directly into the main branch:</p> <ol> <li>Development Workflow:</li> <li>Create feature/fix branches from main (<code>feat/*</code> or <code>fix/*</code>)</li> <li>Push changes to GitHub to automatically create a PR</li> <li>PR triggers tests and validation workflows</li> <li> <p>After review and approval, merge to main</p> </li> <li> <p>Deployment Process:</p> </li> <li>Main branch changes trigger deployment to staging</li> <li>After validation in staging, promote to production</li> <li> <p>ArgoCD manages the deployment process</p> </li> <li> <p>Environments:</p> </li> <li>Staging: Pre-production environment for validation</li> <li>Production: Live environment</li> </ol>"},{"location":"release/#environment-overview","title":"Environment Overview","text":""},{"location":"release/#development","title":"Development","text":"<ul> <li>Branch: <code>main</code></li> <li>Values: <code>config/helm/values.yaml</code></li> <li>Features:</li> <li>Debug mode enabled</li> <li>Minimal resources</li> <li>Local development optimized</li> </ul>"},{"location":"release/#staging","title":"Staging","text":"<ul> <li>Branch: <code>stg</code></li> <li>Values: <code>config/helm/staging.yaml</code></li> <li>Features:</li> <li>Debugging enabled</li> <li>Moderate resource limits</li> <li>Automated deployments</li> <li>Single replica per service</li> </ul>"},{"location":"release/#production","title":"Production","text":"<ul> <li>Branch: <code>main</code></li> <li>Values: <code>config/helm/production.yaml</code></li> <li>Features:</li> <li>Debugging disabled</li> <li>High resource limits</li> <li>Multiple replicas</li> <li>Autoscaling enabled</li> <li>Enhanced security</li> <li>TLS enabled</li> </ul>"},{"location":"release/#deployment-methods","title":"Deployment Methods","text":""},{"location":"release/#using-scripts","title":"Using Scripts","text":"<p>The repository includes several utility scripts to manage deployments:</p> <pre><code># Deploy to development environment\n./scripts/deploy-dev.sh\n\n# Deploy to production environment\n./scripts/deploy-prod.sh\n\n# Clean up environments\n./scripts/cleanup.sh dev    # Clean development environment\n./scripts/cleanup.sh prod   # Clean production environment\n./scripts/cleanup.sh all    # Clean all environments\n</code></pre>"},{"location":"release/#using-docker-platform-agnostic-setup","title":"Using Docker (Platform-Agnostic Setup)","text":"<p>For a consistent setup experience across different platforms (Linux, macOS, Windows), you can use the Docker-based setup:</p> <pre><code># Set up a local k3d cluster using Docker\nmake setup-k3d-docker\n</code></pre> <p>This method uses a Docker container that includes all the necessary tools (k3d, kubectl, Helm) and runs the setup script inside the container. This approach ensures that the setup process is consistent regardless of the host operating system.</p> <p>Requirements: - Docker - Docker Compose</p> <p>The Docker-based setup automatically: 1. Builds a container with all required tools 2. Sets up a local k3d cluster 3. Installs ArgoCD 4. Configures the necessary components</p>"},{"location":"release/#using-github-actions","title":"Using GitHub Actions","text":"<p>The project uses GitHub Actions for CI/CD with the following workflows:</p> <ol> <li>PR Automation (<code>pr-automation.yml</code>)</li> <li>Triggers on pushes to feature/ and fix/ branches</li> <li>Automatically creates a PR if one doesn't exist</li> <li>Adds appropriate labels and descriptions</li> <li> <p>Deletes branches automatically after PR is merged</p> </li> <li> <p>ArgoCD Configuration Tests (<code>helm-argocd-test.yml</code>)</p> </li> <li>Triggers on PR creation and updates affecting ArgoCD configurations</li> <li>Validates ArgoCD application manifests</li> <li>Prepares deployment manifests for testing</li> <li> <p>Focuses specifically on ArgoCD-related configurations</p> </li> <li> <p>Helm Chart Test (<code>helm-test.yml</code>)</p> </li> <li>Triggers on pull requests and pushes to main</li> <li>Validates Helm charts across all environments</li> <li>Runs comprehensive chart-testing</li> <li> <p>Tests chart installation in a Kind cluster</p> </li> <li> <p>Helm Chart Deploy (<code>helm-deploy.yml</code>)</p> </li> <li>Deploys to development, staging, and production environments</li> <li>Supports manual triggering with environment selection</li> <li>Includes validation and verification steps</li> <li> <p>Manages environment-specific configurations</p> </li> <li> <p>ArgoCD Integration (<code>argocd-integration.yml</code>)</p> </li> <li>Manually triggered workflow for ArgoCD integration</li> <li>Configures ArgoCD applications for different environments</li> <li>Manages deployment synchronization</li> <li>Provides deployment status and URLs</li> </ol>"},{"location":"release/#deployment-process","title":"Deployment Process","text":"<ol> <li>Images are built and pushed to GitHub Container Registry (ghcr.io/datascientest-fastapi-project-group-25)</li> <li>CI pipeline updates image tags in the appropriate values file</li> <li>Argo CD detects changes and syncs the application</li> </ol>"},{"location":"release/#initial-setup","title":"Initial Setup","text":"<ol> <li> <p>Install Argo CD:    <pre><code>kubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n</code></pre></p> </li> <li> <p>Configure GitHub Container Registry credentials:    <pre><code>kubectl create secret docker-registry ghcr-secret \\\n  --docker-server=ghcr.io \\\n  --docker-username=&lt;github-username&gt; \\\n  --docker-password=&lt;github-pat&gt; \\\n  --namespace=fastapi-helm\n</code></pre></p> </li> <li> <p>Set up ArgoCD API key for CI/CD integration and store it as a GitHub secret:    <pre><code># Run the setup script to configure ArgoCD, generate an API key, and store it as a GitHub secret\n./scripts/setup-argocd-github.sh\n</code></pre></p> </li> <li> <p>Apply Argo CD applications:    <pre><code># For staging\nkubectl apply -f config/argocd/staging.yaml\n\n# For production\nkubectl apply -f config/argocd/production.yaml\n</code></pre></p> </li> </ol>"},{"location":"release/#argocd-integration","title":"ArgoCD Integration","text":"<p>The repository includes scripts and workflows for ArgoCD integration:</p> <ol> <li>Manual Setup:</li> <li>Use <code>./scripts/setup-argocd-github.sh</code> to install and configure ArgoCD</li> <li>Generate an API key for CI/CD integration</li> <li> <p>Automatically store the API key and server URL as GitHub secrets (<code>ARGOCD_AUTH_TOKEN</code> and <code>ARGOCD_SERVER</code>)</p> </li> <li> <p>CI/CD Integration:</p> </li> <li>The <code>argocd-integration.yml</code> workflow configures ArgoCD applications</li> <li>Main branch changes trigger deployment to staging</li> <li> <p>After validation, changes can be promoted to production</p> </li> <li> <p>PR Testing:</p> </li> <li>When a PR is created, the <code>helm-argocd-test.yml</code> workflow validates Helm charts and ArgoCD configurations</li> <li>The workflow prepares deployment manifests for testing</li> <li>These manifests can be used for manual testing or review</li> </ol>"},{"location":"release/#configuration","title":"Configuration","text":""},{"location":"release/#image-tags","title":"Image Tags","text":"<ul> <li>Development: <code>dev-latest</code> or <code>dev-[commit-sha]</code></li> <li>Staging: <code>staging-latest</code> or <code>staging-[commit-sha]</code></li> <li>Production: <code>production-latest</code> or <code>production-[commit-sha]</code></li> </ul>"},{"location":"release/#resource-configurations","title":"Resource Configurations","text":""},{"location":"release/#development_1","title":"Development","text":"<pre><code>resources:\n  limits:\n    cpu: 200m\n    memory: 256Mi\n  requests:\n    cpu: 100m\n    memory: 128Mi\n</code></pre>"},{"location":"release/#staging_1","title":"Staging","text":"<pre><code>resources:\n  limits:\n    cpu: 500m\n    memory: 512Mi\n  requests:\n    cpu: 200m\n    memory: 256Mi\n</code></pre>"},{"location":"release/#production_1","title":"Production","text":"<pre><code>resources:\n  limits:\n    cpu: 1000m\n    memory: 1024Mi\n  requests:\n    cpu: 500m\n    memory: 512Mi\n</code></pre>"},{"location":"release/#security-considerations","title":"Security Considerations","text":"<ul> <li>All secrets should be managed through AWS Secrets Manager</li> <li>Debug mode is disabled in production</li> <li>Network policies restrict pod communication</li> <li>TLS is enabled for production ingress</li> <li>Pods run as non-root users</li> <li>Resource limits are enforced</li> <li>HPA ensures proper scaling</li> </ul>"},{"location":"release/#monitoring","title":"Monitoring","text":"<ul> <li>Kubernetes metrics</li> <li>Application health checks</li> <li>Resource utilization</li> <li>Autoscaling behavior</li> <li>Deployment status through Argo CD UI</li> </ul>"},{"location":"release/#contributing","title":"Contributing","text":"<ol> <li>Create a new branch from the target environment branch</li> <li>Make changes to the appropriate values file</li> <li>Create a pull request</li> <li>After review and approval, changes will be deployed automatically</li> </ol>"},{"location":"release/#support","title":"Support","text":"<p>For issues or questions, please contact DataScientest Group 25: - GitHub: datascientest-fastapi-project-group-25</p>"},{"location":"release/RELEASE_INTEGRATION/","title":"Release Integration Guide","text":"<p>This document explains how the integration between the application repository and the release repository works, and how to set it up.</p>"},{"location":"release/RELEASE_INTEGRATION/#overview","title":"Overview","text":"<p>The integration allows for automatic deployment of new application versions when a release is created in the application repository. The workflow is as follows:</p> <ol> <li>A new version is built and released in the application repository</li> <li>The application repository triggers a workflow in the release repository</li> <li>The release repository updates the Helm values with the new image tags</li> <li>ArgoCD detects the changes and deploys the new version</li> </ol>"},{"location":"release/RELEASE_INTEGRATION/#setup-instructions","title":"Setup Instructions","text":""},{"location":"release/RELEASE_INTEGRATION/#1-create-a-personal-access-token-pat","title":"1. Create a Personal Access Token (PAT)","text":"<p>You need to create a GitHub Personal Access Token with the necessary permissions to trigger workflows in the release repository:</p> <ol> <li>Go to your GitHub account settings</li> <li>Navigate to \"Developer settings\" &gt; \"Personal access tokens\" &gt; \"Tokens (classic)\"</li> <li>Click \"Generate new token\"</li> <li>Give it a descriptive name like \"App to Release Integration\"</li> <li>Select the following scopes:</li> <li><code>repo</code> (Full control of private repositories)</li> <li><code>workflow</code> (Update GitHub Action workflows)</li> <li>Click \"Generate token\" and copy the token</li> </ol>"},{"location":"release/RELEASE_INTEGRATION/#2-add-the-token-as-a-secret-in-the-app-repository","title":"2. Add the Token as a Secret in the App Repository","text":"<ol> <li>Go to the application repository settings</li> <li>Navigate to \"Secrets and variables\" &gt; \"Actions\"</li> <li>Click \"New repository secret\"</li> <li>Name: <code>RELEASE_REPO_ACCESS_TOKEN</code></li> <li>Value: Paste the token you generated</li> <li>Click \"Add secret\"</li> </ol>"},{"location":"release/RELEASE_INTEGRATION/#3-configure-argocd-credentials","title":"3. Configure ArgoCD Credentials","text":"<p>For the ArgoCD integration to work, you need to add the following secrets to the release repository:</p> <ol> <li>Go to the release repository settings</li> <li>Navigate to \"Secrets and variables\" &gt; \"Actions\"</li> <li>Add the following secrets:</li> <li><code>ARGOCD_SERVER</code>: The URL of your ArgoCD server</li> <li><code>ARGOCD_USERNAME</code>: Your ArgoCD username</li> <li><code>ARGOCD_PASSWORD</code>: Your ArgoCD password</li> </ol>"},{"location":"release/RELEASE_INTEGRATION/#how-it-works","title":"How It Works","text":""},{"location":"release/RELEASE_INTEGRATION/#app-repository-workflow","title":"App Repository Workflow","text":"<p>The <code>create-release.yml</code> workflow in the app repository: 1. Creates a GitHub release with the new version 2. Triggers the release repository workflow using the repository dispatch event</p>"},{"location":"release/RELEASE_INTEGRATION/#release-repository-workflow","title":"Release Repository Workflow","text":"<p>The <code>app-release-trigger.yml</code> workflow in the release repository: 1. Updates the Helm values files with the new image tags 2. Commits and pushes the changes 3. Triggers ArgoCD to sync the application 4. Creates a GitHub release in the release repository</p>"},{"location":"release/RELEASE_INTEGRATION/#manual-triggering","title":"Manual Triggering","text":"<p>You can also manually trigger the release workflow:</p> <ol> <li>Go to the release repository on GitHub</li> <li>Navigate to \"Actions\" &gt; \"Update from App Release\"</li> <li>Click \"Run workflow\"</li> <li>Enter the version and select the environment</li> <li>Click \"Run workflow\"</li> </ol>"},{"location":"release/RELEASE_INTEGRATION/#troubleshooting","title":"Troubleshooting","text":"<p>If the integration is not working as expected, check the following:</p> <ol> <li>Verify that the PAT has the necessary permissions</li> <li>Check that the PAT is correctly added as a secret in the app repository</li> <li>Ensure that the ArgoCD credentials are correctly configured</li> <li>Check the workflow logs for any errors</li> <li>Verify that the repository names in the workflow files match your actual repository names</li> </ol>"},{"location":"release/aws-architecture-diagram/","title":"AWS Architecture","text":"<p>%%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#ffd8d8', 'edgeLabelBackground':'#ffffff'}}}%% graph TD     subgraph AWS[\"AWS eu-central-1 (GDPR Compliant)\"]         subgraph VPC[\"VPC (10.0.0.0/16)\"]             subgraph PublicSubnets[\"Public Subnets\"]                 CF[(\"CloudFront(CDN)\"]                 ALB[(\"ApplicationLoad Balancer\")]             end</p> <pre><code>        subgraph PrivateSubnets[\"Private Subnets\"]\n            subgraph EKS[\"EKS Cluster\"]\n                ArgoCD[[\"Argo CD\"]]\n                Backend1[[\"Backend Pod\"]]\n                Backend2[[\"Backend Pod\"]]\n                LBController[[\"ALB&lt;br&gt;Controller\"]]\n            end\n\n            RDS[(\"RDS PostgreSQL&lt;br&gt;(Multi-AZ)\")]\n        end\n\n        S3[(\"S3 Bucket&lt;br&gt;(Frontend Assets)\")]\n    end\nend\n\nsubgraph GitHub[\"GitHub Ecosystem\"]\n    GHCR[(\"GHCR&lt;br&gt;(Container Registry)\")]\n    Actions[(\"GitHub Actions\")]\nend\n\nUsers[(\"End Users\")] --&gt;|HTTPS| CF\nCF --&gt;|Static Content| S3\nCF --&gt;|API Requests| ALB\nALB --&gt; Backend1\nALB --&gt; Backend2\n\nBackend1 --&gt; RDS\nBackend2 --&gt; RDS\n\nActions --&gt;|Build/Push| GHCR\nGHCR --&gt;|Pull Images| EKS\n\nArgoCD -.-&gt;|Manages| Backend1\nArgoCD -.-&gt;|Manages| Backend2\nLBController -.-&gt;|Configures| ALB\n\nclassDef aws fill:#FF9900,color:#000\nclassDef github fill:#181717,color:#fff\nclassDef users fill:#0071bc,color:#fff\nclass AWS aws\nclass GitHub github\nclass Users users\n</code></pre>"},{"location":"release/aws-infrastructure-guide/","title":"AWS Infrastructure Setup Guide for FastAPI Project","text":""},{"location":"release/aws-infrastructure-guide/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Infrastructure Components</li> <li>Step-by-Step Deployment</li> <li>Security Considerations</li> <li>Monitoring Setup</li> <li>Maintenance Procedures</li> <li>Troubleshooting Guide</li> </ol>"},{"location":"release/aws-infrastructure-guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>AWS Account with admin permissions</li> <li>Terraform v1.5+ installed</li> <li>kubectl configured</li> <li>GitHub repository with Argo CD configured</li> <li>GitHub PAT with <code>read:packages</code> scope</li> <li>Domain name for production environment</li> </ul>"},{"location":"release/aws-infrastructure-guide/#infrastructure-components","title":"Infrastructure Components","text":""},{"location":"release/aws-infrastructure-guide/#core-architecture","title":"Core Architecture","text":"<p>For an interactive version, view the Mermaid diagram file which can be rendered in any Mermaid-compatible viewer.</p>"},{"location":"release/aws-infrastructure-guide/#step-by-step-deployment","title":"Step-by-Step Deployment","text":""},{"location":"release/aws-infrastructure-guide/#1-terraform-infrastructure-setup","title":"1. Terraform Infrastructure Setup","text":"<pre><code># Initialize Terraform\nterraform init\n\n# Create infrastructure (GDPR-compliant EU region)\nterraform apply -var=\"environment=production\" -var=\"region=eu-central-1\"\n</code></pre>"},{"location":"release/aws-infrastructure-guide/#2-configure-eks-cluster-access","title":"2. Configure EKS Cluster Access","text":"<pre><code>aws eks --region eu-central-1 update-kubeconfig --name fastapi-cluster\n</code></pre>"},{"location":"release/aws-infrastructure-guide/#3-install-argo-cd","title":"3. Install Argo CD","text":"<pre><code>kubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n\n# Get initial admin password\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d\n</code></pre>"},{"location":"release/aws-infrastructure-guide/#4-configure-ghcr-access","title":"4. Configure GHCR Access","text":"<pre><code># Create secret for image pulls\nkubectl create secret docker-registry ghcr-secret \\\n  --namespace=fastapi-production \\\n  --docker-server=ghcr.io \\\n  --docker-username=your-github-username \\\n  --docker-password=ghp_yourPATtoken\n</code></pre>"},{"location":"release/aws-infrastructure-guide/#5-deploy-backend-via-argo-cd","title":"5. Deploy Backend via Argo CD","text":"<pre><code># backend-app.yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: fastapi-backend\n  namespace: argocd\nspec:\n  project: default\n  source:\n    repoURL: https://github.com/datascientest-fastAPI-project-group-25/fastAPI-project-release\n    targetRevision: fix-for-argocdChart\n    path: charts/backend\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: fastapi-production\n  syncPolicy:\n    automated:\n      selfHeal: true\n      prune: true\n</code></pre>"},{"location":"release/aws-infrastructure-guide/#6-frontend-deployment","title":"6. Frontend Deployment","text":"<ol> <li>Configure GitHub Actions secrets:</li> <li><code>AWS_ACCESS_KEY_ID</code></li> <li><code>AWS_SECRET_ACCESS_KEY</code></li> <li><code>S3_BUCKET_NAME</code></li> <li> <p><code>CLOUDFRONT_DISTRIBUTION_ID</code></p> </li> <li> <p>Trigger frontend deployment by pushing to main branch</p> </li> </ol>"},{"location":"release/aws-infrastructure-guide/#security-considerations","title":"Security Considerations","text":""},{"location":"release/aws-infrastructure-guide/#iam-policies","title":"IAM Policies","text":"<pre><code># github-actions-policy.tf\ndata \"aws_iam_policy_document\" \"github_actions\" {\n  statement {\n    actions = [\n      \"s3:PutObject\",\n      \"s3:GetObject\",\n      \"s3:ListBucket\",\n      \"s3:DeleteObject\"\n    ]\n    resources = [\n      aws_s3_bucket.frontend.arn,\n      \"${aws_s3_bucket.frontend.arn}/*\"\n    ]\n  }\n\n  statement {\n    actions = [\n      \"cloudfront:CreateInvalidation\"\n    ]\n    resources = [aws_cloudfront_distribution.frontend.arn]\n  }\n}\n</code></pre>"},{"location":"release/aws-infrastructure-guide/#monitoring-setup","title":"Monitoring Setup","text":""},{"location":"release/aws-infrastructure-guide/#cloudwatch-alarms","title":"CloudWatch Alarms","text":"<pre><code>resource \"aws_cloudwatch_metric_alarm\" \"high_5xx_errors\" {\n  alarm_name          = \"High5xxErrors\"\n  comparison_operator = \"GreaterThanThreshold\"\n  evaluation_periods  = \"2\"\n  metric_name         = \"5xxErrorRate\"\n  namespace           = \"AWS/ApplicationELB\"\n  period              = \"300\"\n  statistic           = \"Sum\"\n  threshold           = \"10\"\n  alarm_description   = \"High 5xx errors from ALB\"\n  alarm_actions       = [aws_sns_topic.alerts.arn]\n}\n</code></pre>"},{"location":"release/aws-infrastructure-guide/#maintenance-procedures","title":"Maintenance Procedures","text":""},{"location":"release/aws-infrastructure-guide/#database-backups","title":"Database Backups","text":"<pre><code>resource \"aws_db_instance\" \"postgres\" {\n  backup_retention_period = 7\n  backup_window           = \"03:00-04:00\"\n  maintenance_window      = \"Sun:04:00-Sun:05:00\"\n}\n</code></pre>"},{"location":"release/aws-infrastructure-guide/#troubleshooting-guide","title":"Troubleshooting Guide","text":"Issue Solution Image pull errors Verify GHCR secret exists in namespace 502 Bad Gateway Check EKS pod logs and ALB target group health Slow frontend loading Invalidate CloudFront cache"},{"location":"release/container-strategy/","title":"Container Strategy for Deployment, ArgoCD, and Testing","text":""},{"location":"release/container-strategy/#overview","title":"Overview","text":"<p>This document consolidates the container-based approach for all deployment, GitOps, and testing tooling, ensuring consistent execution across local development, CI environments, and production.</p>"},{"location":"release/container-strategy/#container-architecture","title":"Container Architecture","text":""},{"location":"release/container-strategy/#1-base-image-k8s-tools","title":"1. Base Image (<code>k8s-tools</code>)","text":"<ul> <li>Multi-arch support (amd64/arm64)</li> <li>Minimal size (~200MB)</li> <li>Tools:</li> <li>kubectl</li> <li>helm</li> <li>k3d</li> <li>git</li> <li>Non-root user</li> <li>Shared volume mounts for configs</li> </ul>"},{"location":"release/container-strategy/#2-argocd-tools-image","title":"2. ArgoCD Tools Image","text":"<ul> <li>Extends <code>k8s-tools</code></li> <li>Adds:</li> <li>ArgoCD CLI</li> <li>GitHub CLI</li> <li>GPG, JWT tools</li> <li>Security:</li> <li>SSH, GPG key support</li> <li>Token-based auth</li> <li>Secret mounts (<code>/root/.ssh</code>, <code>/root/.gnupg</code>, <code>/root/.config/argocd</code>)</li> <li>Auth helpers:</li> <li>ArgoCD login script</li> <li>GitHub login script</li> <li>Healthcheck:   <pre><code>HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n  CMD argocd version --client || exit 1\n</code></pre></li> <li>Usage:</li> <li>Local: mount kubeconfig, secrets, run CLI</li> <li>CI: pass secrets as env vars, run sync commands</li> </ul>"},{"location":"release/container-strategy/#3-test-image","title":"3. Test Image","text":"<ul> <li>Extends <code>k8s-tools</code></li> <li>Adds:</li> <li>Bun runtime</li> <li>kind (mock clusters)</li> <li>TypeScript, ts-node, node-dev</li> <li>Mock cluster setup:</li> <li>kind config with control-plane + worker nodes</li> <li>Bun test hooks to create/teardown clusters</li> <li>Healthcheck:   <pre><code>HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n  CMD bun --version &amp;&amp; kind version || exit 1\n</code></pre></li> <li>Volumes:</li> <li><code>/workspace/tests</code></li> <li><code>/workspace/coverage</code></li> <li>CI integration:</li> <li>Run Bun tests inside container</li> <li>Mount workspace, pass env vars</li> <li>Debugging:</li> <li>Node inspector on port 9229</li> <li>K8s debug tools</li> <li>Resource requirements:</li> <li>Min: 1 CPU, 2GB RAM</li> <li>Recommended: 2 CPU, 4GB RAM</li> </ul>"},{"location":"release/container-strategy/#volume-mounts","title":"Volume Mounts","text":"<ul> <li><code>/root/.kube</code> - kubeconfig</li> <li><code>/root/.config/k3d</code> - k3d config</li> <li><code>/var/run/docker.sock</code> - Docker socket</li> <li><code>/root/.ssh</code>, <code>/root/.gnupg</code>, <code>/root/.config/argocd</code> - secrets</li> <li><code>/workspace/tests</code>, <code>/workspace/coverage</code> - test data</li> </ul>"},{"location":"release/container-strategy/#network-configuration","title":"Network Configuration","text":"<ul> <li>Host network mode for k3d</li> <li>Expose:</li> <li>8080 (ArgoCD UI)</li> <li>6443 (Kubernetes API)</li> <li>9229 (Node debug)</li> </ul>"},{"location":"release/container-strategy/#integration-with-typescript-tools","title":"Integration with TypeScript Tools","text":"<ul> <li>Container interface for running commands</li> <li>Example: create k3d cluster, deploy with helm, sync with ArgoCD</li> <li>Mock clusters for tests</li> </ul>"},{"location":"release/container-strategy/#testing-strategy","title":"Testing Strategy","text":"<ul> <li>Unit tests: mock container interface</li> <li>Integration tests: run in container, real tool execution</li> <li>CI tests: multi-arch, containerized, automated</li> </ul>"},{"location":"release/container-strategy/#security-considerations","title":"Security Considerations","text":"<ul> <li>Minimal images, non-root</li> <li>Secret management via env vars and mounts</li> <li>Regular updates and scanning</li> </ul>"},{"location":"release/container-strategy/#implementation-roadmap","title":"Implementation Roadmap","text":"<ol> <li>Base image with k8s tools</li> <li>Extend with ArgoCD CLI and auth</li> <li>Extend with Bun, kind, test tools</li> <li>Integrate with TypeScript commands</li> <li>Automate in CI/CD</li> </ol>"},{"location":"release/container-strategy/#usage-examples","title":"Usage Examples","text":"<ul> <li>Local dev: run containers with mounted configs</li> <li>CI: run containers with secrets as env vars</li> <li>Testing: run Bun tests inside test container</li> </ul>"},{"location":"release/container-strategy/#notes","title":"Notes","text":"<p>This unified container strategy replaces previous separate specs for ArgoCD and test containers.</p>"},{"location":"release/deployment-automation/","title":"Deployment Automation &amp; Argo CD Strategy","text":""},{"location":"release/deployment-automation/#1-github-release-best-practices","title":"1. GitHub Release Best Practices","text":"<ul> <li>Create releases only for production-ready versions.</li> <li>Use tags, commit history, and Argo CD history for staging/non-prod traceability.</li> <li>This keeps releases meaningful, aligns with semantic versioning, and avoids clutter.</li> </ul>"},{"location":"release/deployment-automation/#2-automated-helm-update-workflow","title":"2. Automated Helm Update Workflow","text":"<ul> <li>A Makefile target <code>update-image</code> accepts <code>TAG</code> and <code>ENV</code> parameters.</li> <li>It updates the appropriate Helm values file (<code>config/helm/staging.yaml</code> or <code>config/helm/production.yaml</code>) with the new Docker image tag.</li> <li>A GitHub Actions workflow:</li> <li>Can be triggered manually or on a schedule.</li> <li>Calls the Makefile target.</li> <li>Commits and pushes the updated Helm values.</li> <li>Creates a GitHub release only for production deployments.</li> </ul> <p>This ensures Helm values are automatically updated with the latest image tags immediately after new images are built and pushed, following tagging conventions and environment separation.</p>"},{"location":"release/deployment-automation/#3-argo-cd-multi-environment-deployment-plan","title":"3. Argo CD Multi-Environment Deployment Plan","text":""},{"location":"release/deployment-automation/#namespace-strategy","title":"Namespace Strategy","text":"<ul> <li>Development: <code>argocd-dev</code></li> <li>Staging: <code>argocd-stg</code></li> <li>Production: <code>argocd-prod</code></li> </ul>"},{"location":"release/deployment-automation/#local-development-installation","title":"Local Development Installation","text":"<pre><code>helm repo add argo https://argoproj.github.io/argo-helm\nhelm repo update\n\nhelm install argocd argo/argo-cd \\\n  --namespace argocd-dev \\\n  --create-namespace \\\n  --values values-dev.yaml\n</code></pre>"},{"location":"release/deployment-automation/#promotion-process","title":"Promotion Process","text":"<ul> <li>Test in <code>argocd-dev</code></li> <li>Promote to <code>argocd-stg</code> via GitOps</li> <li>Approve and promote to <code>argocd-prod</code></li> </ul>"},{"location":"release/deployment-automation/#security","title":"Security","text":"<ul> <li>RBAC roles: readonly, developer, admin, SRE</li> <li>Use sealed-secrets or AWS Secrets Manager</li> <li>Environment-specific service accounts</li> </ul>"},{"location":"release/deployment-automation/#monitoring-backup","title":"Monitoring &amp; Backup","text":"<ul> <li>Enable metrics, Prometheus, Grafana</li> <li>Backup configs, app definitions, RBAC</li> <li>Test restore procedures regularly</li> </ul>"},{"location":"release/deployment-automation/#resource-requirements","title":"Resource Requirements","text":"<pre><code>server:\n  requests:\n    cpu: 200m\n    memory: 256Mi\nrepo-server:\n  requests:\n    cpu: 100m\n    memory: 256Mi\napplication-controller:\n  requests:\n    cpu: 200m\n    memory: 256Mi\n</code></pre>"},{"location":"release/deployment-automation/#implementation-phases","title":"Implementation Phases","text":"<ol> <li>Local Dev: Setup <code>argocd-dev</code></li> <li>Staging: Setup <code>argocd-stg</code>, test promotion</li> <li>Production: Setup <code>argocd-prod</code>, enable backups and advanced security</li> </ol>"},{"location":"release/dockerfile-spec/","title":"Base Dockerfile Specification","text":""},{"location":"release/dockerfile-spec/#overview","title":"Overview","text":"<p>This document specifies the requirements and implementation details for our <code>k8s-tools</code> base container image. This image serves as the foundation for all our Kubernetes-related operations, ensuring consistent tooling across all environments.</p>"},{"location":"release/dockerfile-spec/#base-image-selection","title":"Base Image Selection","text":"<p>Image: <code>alpine:3.19</code> Rationale: - Minimal footprint (~5MB base) - Official security updates - Multi-arch support (amd64/arm64) - Broad compatibility</p>"},{"location":"release/dockerfile-spec/#required-tools","title":"Required Tools","text":""},{"location":"release/dockerfile-spec/#core-tools","title":"Core Tools","text":"Tool Version Installation Method Verification kubectl Latest stable Official install script <code>kubectl version</code> helm Latest stable Alpine package <code>helm version</code> k3d Latest stable Official install script <code>k3d version</code> git Latest alpine Alpine package <code>git --version</code> docker CLI Latest stable Alpine package <code>docker --version</code>"},{"location":"release/dockerfile-spec/#support-tools","title":"Support Tools","text":"<ul> <li>curl</li> <li>bash</li> <li>jq</li> <li>openssl</li> <li>ca-certificates</li> </ul>"},{"location":"release/dockerfile-spec/#installation-layer-optimization","title":"Installation Layer Optimization","text":"<ol> <li> <p>System Packages Layer: <pre><code>RUN apk add --no-cache \\\n    bash \\\n    curl \\\n    git \\\n    jq \\\n    openssl \\\n    ca-certificates\n</code></pre></p> </li> <li> <p>Kubernetes Tools Layer: <pre><code># kubectl\nRUN curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\n\n# helm\nRUN curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash\n\n# k3d\nRUN wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash\n</code></pre></p> </li> </ol>"},{"location":"release/dockerfile-spec/#security-considerations","title":"Security Considerations","text":""},{"location":"release/dockerfile-spec/#user-configuration","title":"User Configuration","text":"<ul> <li>Create non-root user: <code>k8s-tools</code></li> <li>Set appropriate permissions for binary access</li> <li>Configure necessary group memberships</li> </ul>"},{"location":"release/dockerfile-spec/#file-permissions","title":"File Permissions","text":"<ul> <li><code>/root/.kube</code>: 700</li> <li><code>/root/.config/k3d</code>: 700</li> <li>Binary permissions: 755</li> </ul>"},{"location":"release/dockerfile-spec/#volume-mounts","title":"Volume Mounts","text":"<p>Specify standard mount points: <pre><code>VOLUME [\"/root/.kube\", \"/root/.config/k3d\", \"/var/run/docker.sock\"]\n</code></pre></p>"},{"location":"release/dockerfile-spec/#environment-configuration","title":"Environment Configuration","text":""},{"location":"release/dockerfile-spec/#environment-variables","title":"Environment Variables","text":"<pre><code>ENV KUBECONFIG=/root/.kube/config \\\n    HELM_CACHE_HOME=/root/.cache/helm \\\n    K3D_DATA_DIR=/root/.config/k3d \\\n    PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n</code></pre>"},{"location":"release/dockerfile-spec/#working-directory","title":"Working Directory","text":"<pre><code>WORKDIR /workspace\n</code></pre>"},{"location":"release/dockerfile-spec/#health-check","title":"Health Check","text":"<p>Include container health check: <pre><code>HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n    CMD kubectl version --client || exit 1\n</code></pre></p>"},{"location":"release/dockerfile-spec/#build-arguments","title":"Build Arguments","text":"<p>Support for tool version customization: <pre><code>ARG KUBECTL_VERSION=latest\nARG HELM_VERSION=latest\nARG K3D_VERSION=latest\n</code></pre></p>"},{"location":"release/dockerfile-spec/#multi-stage-build","title":"Multi-Stage Build","text":"<ol> <li>Builder Stage:</li> <li>Download and verify binaries</li> <li> <p>Compile any necessary tools</p> </li> <li> <p>Final Stage:</p> </li> <li>Copy verified binaries</li> <li>Set up environment</li> <li>Configure permissions</li> </ol>"},{"location":"release/dockerfile-spec/#testing-requirements","title":"Testing Requirements","text":"<p>Dockerfile must include tests for: 1. Tool installation verification 2. Permission checks 3. Volume mount validation 4. Network connectivity</p> <p>Test script location: <code>/usr/local/bin/test-tools</code></p>"},{"location":"release/dockerfile-spec/#documentation","title":"Documentation","text":"<p>Include detailed comments in Dockerfile for: - Tool versions - Security considerations - Usage instructions - Volume mount requirements</p>"},{"location":"release/dockerfile-spec/#ci-integration","title":"CI Integration","text":""},{"location":"release/dockerfile-spec/#build-matrix","title":"Build Matrix","text":"<ul> <li>Platforms: linux/amd64, linux/arm64</li> <li>Alpine versions: 3.19, edge</li> <li>Tool version combinations</li> </ul>"},{"location":"release/dockerfile-spec/#required-tests","title":"Required Tests","text":"<ol> <li>Build verification</li> <li>Tool functionality</li> <li>Security scanning</li> <li>Size optimization</li> </ol>"},{"location":"release/dockerfile-spec/#implementation-notes","title":"Implementation Notes","text":"<ol> <li>Image Size Target:</li> <li>Base: &lt; 5MB</li> <li> <p>Final: &lt; 250MB</p> </li> <li> <p>Build Time Target:</p> </li> <li>Clean build: &lt; 5 minutes</li> <li> <p>Cached build: &lt; 1 minute</p> </li> <li> <p>Layer Optimization:</p> </li> <li>Minimize layer count</li> <li>Optimize caching</li> <li>Clean up temporary files</li> </ol>"},{"location":"release/dockerfile-spec/#usage-examples","title":"Usage Examples","text":""},{"location":"release/dockerfile-spec/#local-development","title":"Local Development","text":"<pre><code>docker run --rm -it \\\n  -v ~/.kube:/root/.kube \\\n  -v ~/.config/k3d:/root/.config/k3d \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  k8s-tools:latest\n</code></pre>"},{"location":"release/dockerfile-spec/#ci-environment","title":"CI Environment","text":"<p>```bash docker run --rm \\   -v ${GITHUB_WORKSPACE}/.kube:/root/.kube \\   -v ${GITHUB_WORKSPACE}/k3d:/root/.config/k3d \\   k8s-tools:latest \\   kubectl version</p>"},{"location":"release/infra-setup-guide/","title":"Infrastructure Setup Guide for FastAPI Project","text":""},{"location":"release/infra-setup-guide/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Architecture Overview</li> <li>Prerequisites</li> <li>Infrastructure Components</li> <li>Step-by-Step Setup</li> <li>Security and Secrets Management</li> <li>Monitoring Setup</li> <li>Maintenance Procedures</li> <li>Troubleshooting Guide</li> </ol>"},{"location":"release/infra-setup-guide/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TD\n    subgraph AWS[\"AWS eu-central-1 (GDPR Compliant)\"]\n        subgraph VPC[\"VPC (10.0.0.0/16)\"]\n            subgraph PublicSubnets[\"Public Subnets\"]\n                CF[(\"CloudFront&lt;br&gt;(CDN)\")]\n                ALB[(\"Application&lt;br&gt;Load Balancer\")]\n            end\n\n            subgraph PrivateSubnets[\"Private Subnets\"]\n                subgraph EKS[\"EKS Cluster\"]\n                    ArgoCD[[\"Argo CD\"]]\n                    Backend1[[\"Backend Pod\"]]\n                    Backend2[[\"Backend Pod\"]]\n                    ESO[[\"External Secrets&lt;br&gt;Operator\"]]\n                    LBController[[\"ALB&lt;br&gt;Controller\"]]\n                end\n\n                RDS[(\"RDS PostgreSQL&lt;br&gt;(Multi-AZ)\")]\n                SecretsManager[(\"AWS Secrets&lt;br&gt;Manager\")]\n            end\n\n            S3[(\"S3 Bucket&lt;br&gt;(Frontend Assets)\")]\n        end\n    end\n\n    subgraph GitHub[\"GitHub Ecosystem\"]\n        GHCR[(\"GHCR&lt;br&gt;(Container Registry)\")]\n        Actions[(\"GitHub Actions\")]\n    end\n\n    Users[(\"End Users\")] --&gt;|HTTPS| CF\n    CF --&gt;|Static Content| S3\n    CF --&gt;|API Requests| ALB\n    ALB --&gt; Backend1\n    ALB --&gt; Backend2\n\n    Backend1 --&gt; RDS\n    Backend2 --&gt; RDS\n\n    Actions --&gt;|Build/Push| GHCR\n    GHCR --&gt;|Pull Images| EKS\n\n    ArgoCD -.-&gt;|Manages| Backend1\n    ArgoCD -.-&gt;|Manages| Backend2\n    ESO -.-&gt;|Syncs| SecretsManager\n    LBController -.-&gt;|Configures| ALB</code></pre>"},{"location":"release/infra-setup-guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>AWS Account with admin permissions</li> <li>Terraform v1.5+ installed</li> <li>kubectl configured</li> <li>GitHub repository with Argo CD configured</li> <li>GitHub PAT with <code>read:packages</code> scope</li> <li>Domain name for production environment</li> </ul>"},{"location":"release/infra-setup-guide/#infrastructure-components","title":"Infrastructure Components","text":""},{"location":"release/infra-setup-guide/#per-environment","title":"Per Environment","text":"Environment Cluster Name Namespace(s) VPC CIDR Dev <code>fastapi-eks-dev</code> <code>fastapi-helm-dev</code> 10.0.0.0/16 Staging <code>fastapi-eks-staging</code> <code>fastapi-helm-staging</code> 10.1.0.0/16 Production <code>fastapi-eks-prod</code> <code>fastapi-helm-prod</code> 10.2.0.0/16"},{"location":"release/infra-setup-guide/#step-by-step-setup","title":"Step-by-Step Setup","text":""},{"location":"release/infra-setup-guide/#1-vpc-and-eks-setup","title":"1. VPC and EKS Setup","text":"<pre><code># terraform/main.tf\nmodule \"vpc\" {\n  source = \"terraform-aws-modules/vpc/aws\"\n\n  name = \"fastapi-${var.environment}\"\n  cidr = var.vpc_cidr\n\n  azs             = [\"${var.region}a\", \"${var.region}b\"]\n  private_subnets = [\"10.0.1.0/24\", \"10.0.2.0/24\"]\n  public_subnets  = [\"10.0.101.0/24\", \"10.0.102.0/24\"]\n\n  enable_nat_gateway = true\n  single_nat_gateway = var.environment != \"production\"\n}\n\nmodule \"eks\" {\n  source = \"terraform-aws-modules/eks/aws\"\n\n  cluster_name    = \"fastapi-${var.environment}\"\n  cluster_version = \"1.28\"\n\n  vpc_id     = module.vpc.vpc_id\n  subnet_ids = module.vpc.private_subnets\n\n  enable_irsa = true\n}\n</code></pre>"},{"location":"release/infra-setup-guide/#2-external-secrets-setup","title":"2. External Secrets Setup","text":"<pre><code># Install External Secrets Operator\nhelm repo add external-secrets https://charts.external-secrets.io\nhelm install external-secrets external-secrets/external-secrets -n external-secrets --create-namespace\n\n# Create SecretStore for AWS Secrets Manager\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: external-secrets.io/v1beta1\nkind: ClusterSecretStore\nmetadata:\n  name: aws-secrets\nspec:\n  provider:\n    aws:\n      service: SecretsManager\n      region: eu-central-1\n      auth:\n        jwt:\n          serviceAccountRef:\n            name: external-secrets-sa\n            namespace: external-secrets\nEOF\n</code></pre>"},{"location":"release/infra-setup-guide/#3-aws-secrets-structure","title":"3. AWS Secrets Structure","text":"<pre><code>production/\n  postgres/credentials\n  app/secrets\nstaging/\n  postgres/credentials\n  app/secrets\ndev/\n  postgres/credentials\n  app/secrets\n</code></pre>"},{"location":"release/infra-setup-guide/#4-argo-cd-installation","title":"4. Argo CD Installation","text":"<pre><code>kubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n\n# Get initial admin password\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d\n</code></pre>"},{"location":"release/infra-setup-guide/#5-ghcr-access-setup","title":"5. GHCR Access Setup","text":"<pre><code>kubectl create secret docker-registry ghcr-secret \\\n  --namespace=fastapi-${ENV} \\\n  --docker-server=ghcr.io \\\n  --docker-username=your-github-username \\\n  --docker-password=ghp_yourPATtoken\n</code></pre>"},{"location":"release/infra-setup-guide/#security-and-secrets-management","title":"Security and Secrets Management","text":""},{"location":"release/infra-setup-guide/#iam-policies","title":"IAM Policies","text":"<pre><code># External Secrets Operator policy\ndata \"aws_iam_policy_document\" \"external_secrets\" {\n  statement {\n    actions = [\n      \"secretsmanager:GetSecretValue\",\n      \"secretsmanager:DescribeSecret\"\n    ]\n    resources = [\n      \"arn:aws:secretsmanager:${var.region}:${data.aws_caller_identity.current.account_id}:secret:${var.environment}/*\"\n    ]\n  }\n}\n\n# GitHub Actions policy for frontend deployment\ndata \"aws_iam_policy_document\" \"github_actions\" {\n  statement {\n    actions = [\n      \"s3:PutObject\",\n      \"s3:GetObject\",\n      \"s3:ListBucket\",\n      \"s3:DeleteObject\"\n    ]\n    resources = [\n      aws_s3_bucket.frontend.arn,\n      \"${aws_s3_bucket.frontend.arn}/*\"\n    ]\n  }\n\n  statement {\n    actions = [\"cloudfront:CreateInvalidation\"]\n    resources = [aws_cloudfront_distribution.frontend.arn]\n  }\n}\n</code></pre>"},{"location":"release/infra-setup-guide/#monitoring-setup","title":"Monitoring Setup","text":""},{"location":"release/infra-setup-guide/#cloudwatch-alarms","title":"CloudWatch Alarms","text":"<pre><code>resource \"aws_cloudwatch_metric_alarm\" \"high_5xx_errors\" {\n  alarm_name          = \"High5xxErrors-${var.environment}\"\n  comparison_operator = \"GreaterThanThreshold\"\n  evaluation_periods  = \"2\"\n  metric_name         = \"5xxErrorRate\"\n  namespace           = \"AWS/ApplicationELB\"\n  period              = \"300\"\n  statistic           = \"Sum\"\n  threshold           = \"10\"\n  alarm_description   = \"High 5xx errors from ALB\"\n  alarm_actions       = [aws_sns_topic.alerts.arn]\n}\n</code></pre>"},{"location":"release/infra-setup-guide/#maintenance-procedures","title":"Maintenance Procedures","text":""},{"location":"release/infra-setup-guide/#database-backups","title":"Database Backups","text":"<pre><code>resource \"aws_db_instance\" \"postgres\" {\n  identifier = \"fastapi-${var.environment}\"\n  backup_retention_period = 7\n  backup_window           = \"03:00-04:00\"\n  maintenance_window      = \"Sun:04:00-Sun:05:00\"\n\n  # Multi-AZ only for production\n  multi_az = var.environment == \"production\"\n}\n</code></pre>"},{"location":"release/infra-setup-guide/#secret-rotation-schedule","title":"Secret Rotation Schedule","text":"<ul> <li>Database credentials: Every 90 days</li> <li>Application secrets: Every 180 days</li> <li>Access tokens: Every 30 days</li> </ul>"},{"location":"release/infra-setup-guide/#troubleshooting-guide","title":"Troubleshooting Guide","text":"Issue Solution Image pull errors Verify GHCR secret exists and is valid in namespace 502 Bad Gateway Check EKS pod logs and ALB target group health Slow frontend loading Invalidate CloudFront cache Secret sync failures Check External Secrets Operator logs and IAM permissions Database connection issues Verify security group rules and credential secrets <p>For detailed deployment instructions, see Deployment Automation Guide.</p> <p>For release procedures, see Release Strategy Guide.</p>"},{"location":"release/quick-start/","title":"Quick Start Guide","text":"<p>This guide provides a quick overview of how to use the release strategy implemented in this repository.</p>"},{"location":"release/quick-start/#getting-started","title":"Getting Started","text":""},{"location":"release/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Git</li> <li>kubectl</li> <li>Helm</li> <li>k3d (for local development)</li> <li>ArgoCD CLI</li> <li>GitHub CLI (gh)</li> </ul>"},{"location":"release/quick-start/#setting-up-your-environment","title":"Setting Up Your Environment","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/datascientest-fastapi-project-group-25/fastAPI-project-release.git\ncd fastAPI-project-release\n</code></pre></p> </li> <li> <p>Set up a local Kubernetes cluster with ArgoCD:    <pre><code>./scripts/setup-local-k3d-argocd.sh\n</code></pre></p> </li> <li> <p>Set up ArgoCD API key and GitHub secrets:    <pre><code>./scripts/setup-argocd-github.sh\n</code></pre></p> </li> </ol>"},{"location":"release/quick-start/#development-workflow","title":"Development Workflow","text":"<ol> <li> <p>Create a feature or fix branch:    <pre><code>git checkout -b feat/your-feature-name\n# or\ngit checkout -b fix/your-fix-name\n</code></pre></p> </li> <li> <p>Make your changes and commit them:    <pre><code>git add .\ngit commit -m \"Your commit message\"\n</code></pre></p> </li> <li> <p>Push your branch to GitHub:    <pre><code>git push -u origin feat/your-feature-name\n</code></pre></p> </li> <li> <p>A PR will be automatically created, and tests will run</p> </li> <li> <p>After review and approval, merge the PR to <code>main</code></p> </li> </ol>"},{"location":"release/quick-start/#accessing-your-deployment","title":"Accessing Your Deployment","text":"<ol> <li> <p>Port-forward ArgoCD server:    <pre><code>kubectl port-forward svc/argocd-server -n argocd 8080:443\n</code></pre></p> </li> <li> <p>Access ArgoCD UI at https://localhost:8080</p> </li> <li>Username: admin</li> <li> <p>Password: (retrieved during setup)</p> </li> <li> <p>View your application deployment</p> </li> </ol>"},{"location":"release/quick-start/#additional-resources","title":"Additional Resources","text":"<ul> <li>Full Release Strategy Documentation</li> <li>ArgoCD Documentation</li> <li>k3d Documentation</li> </ul>"},{"location":"release/release-strategy/","title":"Release Strategy Documentation","text":"<p>This document provides a comprehensive guide to the release strategy implemented in this repository, including how to set up and use ArgoCD and k3d for local development and testing.</p>"},{"location":"release/release-strategy/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Branch Strategy</li> <li>PR Automation</li> <li>Environment Setup</li> <li>ArgoCD Integration</li> <li>Local Development with k3d</li> <li>Troubleshooting</li> </ol>"},{"location":"release/release-strategy/#overview","title":"Overview","text":"<p>Our release strategy follows a streamlined approach with feature/fix branches that merge directly into the main branch. The process is automated using GitHub Actions workflows that handle PR creation, testing, and deployment preparation.</p>"},{"location":"release/release-strategy/#key-components","title":"Key Components","text":"<ul> <li>PR Automation: Automatically creates PRs when pushing to feature/fix branches</li> <li>Helm and ArgoCD Testing: Validates Helm charts and ArgoCD configurations</li> <li>ArgoCD Integration: Manages deployments to different environments</li> <li>Local Development: Uses k3d for local Kubernetes development and testing</li> </ul>"},{"location":"release/release-strategy/#branch-strategy","title":"Branch Strategy","text":"<p>We follow a simple branch strategy:</p> <ol> <li>Main Branch (<code>main</code>): The primary branch that represents the production-ready code</li> <li>Feature Branches (<code>feat/*</code>): Used for developing new features</li> <li>Fix Branches (<code>fix/*</code>): Used for bug fixes</li> </ol>"},{"location":"release/release-strategy/#workflow","title":"Workflow","text":"<ol> <li>Create a feature or fix branch from <code>main</code></li> <li>Develop and test your changes locally</li> <li>Push your branch to GitHub, which automatically creates a PR</li> <li>The PR triggers tests and validation workflows</li> <li>After review and approval, merge the PR to <code>main</code></li> <li>Changes to <code>main</code> trigger deployment to staging</li> <li>After validation in staging, promote to production</li> </ol>"},{"location":"release/release-strategy/#pr-automation","title":"PR Automation","text":"<p>When you push a feature or fix branch to GitHub, our PR automation workflow automatically creates a PR if one doesn't exist.</p>"},{"location":"release/release-strategy/#how-to-use","title":"How to Use","text":"<ol> <li> <p>Create a feature or fix branch:    <pre><code>git checkout -b feat/your-feature-name\n# or\ngit checkout -b fix/your-fix-name\n</code></pre></p> </li> <li> <p>Make your changes and commit them:    <pre><code>git add .\ngit commit -m \"Your commit message\"\n</code></pre></p> </li> <li> <p>Push your branch to GitHub:    <pre><code>git push -u origin feat/your-feature-name\n</code></pre></p> </li> <li> <p>The PR automation workflow will create a PR automatically</p> </li> </ol>"},{"location":"release/release-strategy/#environment-setup","title":"Environment Setup","text":"<p>We use two environments for our deployment pipeline:</p> <ol> <li>Staging: Pre-production environment for validation</li> <li>Production: Live environment</li> </ol>"},{"location":"release/release-strategy/#configuration-files","title":"Configuration Files","text":"<ul> <li>Staging: <code>config/helm/staging.yaml</code> and <code>config/argocd/staging.yaml</code></li> <li>Production: <code>config/helm/production.yaml</code> and <code>config/argocd/production.yaml</code></li> </ul>"},{"location":"release/release-strategy/#argocd-integration","title":"ArgoCD Integration","text":"<p>ArgoCD is used for GitOps-based deployments to our Kubernetes clusters.</p>"},{"location":"release/release-strategy/#setting-up-argocd","title":"Setting Up ArgoCD","text":""},{"location":"release/release-strategy/#prerequisites","title":"Prerequisites","text":"<ul> <li>kubectl</li> <li>argocd CLI</li> <li>GitHub CLI (gh)</li> </ul>"},{"location":"release/release-strategy/#installation","title":"Installation","text":"<ol> <li> <p>Set up a Kubernetes cluster (see Local Development with k3d for local setup)</p> </li> <li> <p>Install ArgoCD:    <pre><code>./scripts/setup-local-k3d-argocd.sh\n</code></pre></p> </li> <li> <p>Set up ArgoCD API key and GitHub secrets:    <pre><code>./scripts/setup-argocd-github.sh\n</code></pre></p> </li> </ol>"},{"location":"release/release-strategy/#manual-deployment","title":"Manual Deployment","text":"<p>To manually deploy using ArgoCD:</p> <ol> <li> <p>Login to ArgoCD:    <pre><code>argocd login &lt;argocd-server&gt; --username admin --password &lt;password&gt;\n</code></pre></p> </li> <li> <p>Create an application:    <pre><code>argocd app create &lt;app-name&gt; \\\n  --repo https://github.com/datascientest-fastapi-project-group-25/fastAPI-project-release.git \\\n  --path charts/fastapi \\\n  --dest-server https://kubernetes.default.svc \\\n  --dest-namespace &lt;namespace&gt; \\\n  --values ../../config/helm/&lt;environment&gt;.yaml\n</code></pre></p> </li> <li> <p>Sync the application:    <pre><code>argocd app sync &lt;app-name&gt;\n</code></pre></p> </li> </ol>"},{"location":"release/release-strategy/#local-development-with-k3d","title":"Local Development with k3d","text":"<p>k3d is a lightweight Kubernetes distribution that runs in Docker, perfect for local development and testing.</p>"},{"location":"release/release-strategy/#setting-up-k3d","title":"Setting Up k3d","text":"<ol> <li> <p>Install k3d:    <pre><code>brew install k3d\n</code></pre></p> </li> <li> <p>Create a k3d cluster with ArgoCD:    <pre><code>./scripts/setup-local-k3d-argocd.sh\n</code></pre></p> </li> <li> <p>Verify the cluster is running:    <pre><code>k3d cluster list\nkubectl get nodes\n</code></pre></p> </li> </ol>"},{"location":"release/release-strategy/#testing-locally","title":"Testing Locally","text":"<ol> <li> <p>Port-forward ArgoCD server:    <pre><code>kubectl port-forward svc/argocd-server -n argocd 8080:443\n</code></pre></p> </li> <li> <p>Access ArgoCD UI at https://localhost:8080</p> </li> <li>Username: admin</li> <li> <p>Password: (retrieved during setup)</p> </li> <li> <p>Deploy your application:    <pre><code>argocd app create fastapi-test \\\n  --repo https://github.com/datascientest-fastapi-project-group-25/fastAPI-project-release.git \\\n  --path charts/fastapi \\\n  --dest-server https://kubernetes.default.svc \\\n  --dest-namespace fastapi-test \\\n  --values ../../config/helm/playground.yaml\n</code></pre></p> </li> </ol>"},{"location":"release/release-strategy/#troubleshooting","title":"Troubleshooting","text":""},{"location":"release/release-strategy/#common-issues","title":"Common Issues","text":""},{"location":"release/release-strategy/#argocd-login-issues","title":"ArgoCD Login Issues","text":"<p>If you're having trouble logging in to ArgoCD:</p> <p><pre><code># Reset admin password\nkubectl -n argocd patch secret argocd-secret \\\n  -p '{\"stringData\": {\n    \"admin.password\": \"$2a$10$mivhwttXM0U5eBrZGtAG8.VSRL1l9cZNAmaSaqotIzXRBRwID1NT.\",\n    \"admin.passwordMtime\": \"'$(date +%FT%T%Z)'\"\n  }}'\n</code></pre> This resets the password to \"admin\".</p>"},{"location":"release/release-strategy/#k3d-cluster-creation-issues","title":"k3d Cluster Creation Issues","text":"<p>If you're having trouble creating a k3d cluster:</p> <pre><code># Check if there are any existing clusters\nk3d cluster list\n\n# Delete existing cluster if needed\nk3d cluster delete &lt;cluster-name&gt;\n\n# Try creating with a different port\nk3d cluster create argocd-cluster --servers 1 --agents 1 --port 8082:80@loadbalancer\n</code></pre>"},{"location":"release/release-strategy/#github-actions-workflow-failures","title":"GitHub Actions Workflow Failures","text":"<p>If GitHub Actions workflows are failing:</p> <ol> <li>Check the workflow logs for specific errors</li> <li>Verify that the required secrets are set up correctly</li> <li>Make sure your Helm charts are valid</li> <li>Ensure that the ArgoCD configuration is correct</li> </ol> <p>For more help, please open an issue on the repository.</p>"},{"location":"release/troubleshooting/","title":"Troubleshooting Guide","text":"<p>This guide provides solutions to common issues you might encounter when using the release strategy, ArgoCD, and k3d.</p>"},{"location":"release/troubleshooting/#github-actions-workflow-issues","title":"GitHub Actions Workflow Issues","text":""},{"location":"release/troubleshooting/#pr-automation-workflow-fails","title":"PR Automation Workflow Fails","text":"<p>Issue: The PR automation workflow fails when pushing a branch.</p> <p>Solution: 1. Check if you have the correct branch naming convention (<code>feat/*</code> or <code>fix/*</code>) 2. Verify that the GitHub token has the necessary permissions 3. Create the PR manually if needed:    <pre><code>gh pr create --title \"Your PR title\" --body \"Your PR description\" --base main\n</code></pre></p>"},{"location":"release/troubleshooting/#helm-and-argocd-tests-workflow-fails","title":"Helm and ArgoCD Tests Workflow Fails","text":"<p>Issue: The Helm and ArgoCD tests workflow fails.</p> <p>Solution: 1. Check if your Helm charts are valid:    <pre><code>helm lint ./charts/fastapi -f ./config/helm/staging.yaml\n</code></pre> 2. Verify that the ArgoCD configuration is correct:    <pre><code>kubectl apply --dry-run=client -f config/argocd/staging.yaml\n</code></pre> 3. Make sure all required files have newlines at the end 4. Check for YAML formatting issues</p>"},{"location":"release/troubleshooting/#argocd-issues","title":"ArgoCD Issues","text":""},{"location":"release/troubleshooting/#cannot-login-to-argocd","title":"Cannot Login to ArgoCD","text":"<p>Issue: Unable to login to ArgoCD.</p> <p>Solution: 1. Reset the admin password:    <pre><code>kubectl -n argocd patch secret argocd-initial-admin-secret \\\n  -p '{\"stringData\": {\"password\": \"admin\"}}'\n</code></pre> 2. Restart the ArgoCD server:    <pre><code>kubectl rollout restart deployment argocd-server -n argocd\n</code></pre> 3. Try logging in again with username <code>admin</code> and password <code>admin</code></p>"},{"location":"release/troubleshooting/#cannot-generate-argocd-api-key","title":"Cannot Generate ArgoCD API Key","text":"<p>Issue: Unable to generate an ArgoCD API key.</p> <p>Solution: 1. Update the ArgoCD configuration to enable API key generation:    <pre><code>kubectl patch configmap argocd-cm -n argocd --type merge -p '{\"data\": {\"accounts.admin\": \"apiKey\"}}'\n</code></pre> 2. Restart the ArgoCD server:    <pre><code>kubectl rollout restart deployment argocd-server -n argocd\n</code></pre> 3. Try generating the API key again:    <pre><code>argocd account generate-token --account admin\n</code></pre></p>"},{"location":"release/troubleshooting/#application-not-syncing","title":"Application Not Syncing","text":"<p>Issue: ArgoCD application is not syncing.</p> <p>Solution: 1. Check the application status:    <pre><code>argocd app get &lt;app-name&gt;\n</code></pre> 2. Check for sync errors:    <pre><code>argocd app logs &lt;app-name&gt;\n</code></pre> 3. Force a sync:    <pre><code>argocd app sync &lt;app-name&gt; --force\n</code></pre></p>"},{"location":"release/troubleshooting/#k3d-issues","title":"k3d Issues","text":""},{"location":"release/troubleshooting/#cluster-creation-fails","title":"Cluster Creation Fails","text":"<p>Issue: k3d cluster creation fails.</p> <p>Solution: 1. Check if there are any existing clusters:    <pre><code>k3d cluster list\n</code></pre> 2. Delete existing cluster if needed:    <pre><code>k3d cluster delete &lt;cluster-name&gt;\n</code></pre> 3. Try creating with a different port:    <pre><code>k3d cluster create argocd-cluster --servers 1 --agents 1 --port 8082:80@loadbalancer\n</code></pre></p>"},{"location":"release/troubleshooting/#port-conflict","title":"Port Conflict","text":"<p>Issue: Port conflict when creating a k3d cluster.</p> <p>Solution: 1. Find which process is using the port:    <pre><code>lsof -i :&lt;port&gt;\n</code></pre> 2. Stop the process or use a different port:    <pre><code>k3d cluster create argocd-cluster --servers 1 --agents 1 --port &lt;different-port&gt;:80@loadbalancer\n</code></pre></p>"},{"location":"release/troubleshooting/#helm-chart-issues","title":"Helm Chart Issues","text":""},{"location":"release/troubleshooting/#helm-chart-validation-fails","title":"Helm Chart Validation Fails","text":"<p>Issue: Helm chart validation fails.</p> <p>Solution: 1. Check the chart for syntax errors:    <pre><code>helm lint ./charts/fastapi\n</code></pre> 2. Validate the values files:    <pre><code>helm lint ./charts/fastapi -f ./config/helm/staging.yaml\n</code></pre> 3. Check for common issues:    - Missing newlines at the end of files    - Invalid YAML formatting    - Type mismatches in values</p>"},{"location":"release/troubleshooting/#chart-installation-fails","title":"Chart Installation Fails","text":"<p>Issue: Helm chart installation fails.</p> <p>Solution: 1. Check the chart dependencies:    <pre><code>helm dependency update ./charts/fastapi\n</code></pre> 2. Validate the chart:    <pre><code>helm template ./charts/fastapi -f ./config/helm/staging.yaml\n</code></pre> 3. Check for resource conflicts or missing resources</p>"},{"location":"release/troubleshooting/#need-more-help","title":"Need More Help?","text":"<p>If you're still experiencing issues, please open an issue on the repository or contact the team for assistance.</p>"},{"location":"release/docs/RELEASE_INTEGRATION/","title":"Release Integration Guide","text":"<p>This document explains how the integration between the application repository and the release repository works, and how to set it up.</p>"},{"location":"release/docs/RELEASE_INTEGRATION/#overview","title":"Overview","text":"<p>The integration allows for automatic deployment of new application versions when a release is created in the application repository. The workflow is as follows:</p> <ol> <li>A new version is built and released in the application repository</li> <li>The application repository triggers a workflow in the release repository</li> <li>The release repository updates the Helm values with the new image tags</li> <li>ArgoCD detects the changes and deploys the new version</li> </ol>"},{"location":"release/docs/RELEASE_INTEGRATION/#setup-instructions","title":"Setup Instructions","text":""},{"location":"release/docs/RELEASE_INTEGRATION/#1-create-a-personal-access-token-pat","title":"1. Create a Personal Access Token (PAT)","text":"<p>You need to create a GitHub Personal Access Token with the necessary permissions to trigger workflows in the release repository:</p> <ol> <li>Go to your GitHub account settings</li> <li>Navigate to \"Developer settings\" &gt; \"Personal access tokens\" &gt; \"Tokens (classic)\"</li> <li>Click \"Generate new token\"</li> <li>Give it a descriptive name like \"App to Release Integration\"</li> <li>Select the following scopes:</li> <li><code>repo</code> (Full control of private repositories)</li> <li><code>workflow</code> (Update GitHub Action workflows)</li> <li>Click \"Generate token\" and copy the token</li> </ol>"},{"location":"release/docs/RELEASE_INTEGRATION/#2-add-the-token-as-a-secret-in-the-app-repository","title":"2. Add the Token as a Secret in the App Repository","text":"<ol> <li>Go to the application repository settings</li> <li>Navigate to \"Secrets and variables\" &gt; \"Actions\"</li> <li>Click \"New repository secret\"</li> <li>Name: <code>RELEASE_REPO_ACCESS_TOKEN</code></li> <li>Value: Paste the token you generated</li> <li>Click \"Add secret\"</li> </ol>"},{"location":"release/docs/RELEASE_INTEGRATION/#3-configure-argocd-credentials","title":"3. Configure ArgoCD Credentials","text":"<p>For the ArgoCD integration to work, you need to add the following secrets to the release repository:</p> <ol> <li>Go to the release repository settings</li> <li>Navigate to \"Secrets and variables\" &gt; \"Actions\"</li> <li>Add the following secrets:</li> <li><code>ARGOCD_SERVER</code>: The URL of your ArgoCD server</li> <li><code>ARGOCD_USERNAME</code>: Your ArgoCD username</li> <li><code>ARGOCD_PASSWORD</code>: Your ArgoCD password</li> </ol>"},{"location":"release/docs/RELEASE_INTEGRATION/#how-it-works","title":"How It Works","text":""},{"location":"release/docs/RELEASE_INTEGRATION/#app-repository-workflow","title":"App Repository Workflow","text":"<p>The <code>create-release.yml</code> workflow in the app repository: 1. Creates a GitHub release with the new version 2. Triggers the release repository workflow using the repository dispatch event</p>"},{"location":"release/docs/RELEASE_INTEGRATION/#release-repository-workflow","title":"Release Repository Workflow","text":"<p>The <code>app-release-trigger.yml</code> workflow in the release repository: 1. Updates the Helm values files with the new image tags 2. Commits and pushes the changes 3. Triggers ArgoCD to sync the application 4. Creates a GitHub release in the release repository</p>"},{"location":"release/docs/RELEASE_INTEGRATION/#manual-triggering","title":"Manual Triggering","text":"<p>You can also manually trigger the release workflow:</p> <ol> <li>Go to the release repository on GitHub</li> <li>Navigate to \"Actions\" &gt; \"Update from App Release\"</li> <li>Click \"Run workflow\"</li> <li>Enter the version and select the environment</li> <li>Click \"Run workflow\"</li> </ol>"},{"location":"release/docs/RELEASE_INTEGRATION/#troubleshooting","title":"Troubleshooting","text":"<p>If the integration is not working as expected, check the following:</p> <ol> <li>Verify that the PAT has the necessary permissions</li> <li>Check that the PAT is correctly added as a secret in the app repository</li> <li>Ensure that the ArgoCD credentials are correctly configured</li> <li>Check the workflow logs for any errors</li> <li>Verify that the repository names in the workflow files match your actual repository names</li> </ol>"},{"location":"release/docs/aws-architecture-diagram/","title":"Aws architecture diagram","text":"<p>%%{init: {'theme': 'base', 'themeVariables': { 'primaryColor': '#ffd8d8', 'edgeLabelBackground':'#ffffff'}}}%% graph TD     subgraph AWS[\"AWS eu-central-1 (GDPR Compliant)\"]         subgraph VPC[\"VPC (10.0.0.0/16)\"]             subgraph PublicSubnets[\"Public Subnets\"]                 CF[(\"CloudFront(CDN)\"]                 ALB[(\"ApplicationLoad Balancer\")]             end</p> <pre><code>        subgraph PrivateSubnets[\"Private Subnets\"]\n            subgraph EKS[\"EKS Cluster\"]\n                ArgoCD[[\"Argo CD\"]]\n                Backend1[[\"Backend Pod\"]]\n                Backend2[[\"Backend Pod\"]]\n                LBController[[\"ALB&lt;br&gt;Controller\"]]\n            end\n\n            RDS[(\"RDS PostgreSQL&lt;br&gt;(Multi-AZ)\")]\n        end\n\n        S3[(\"S3 Bucket&lt;br&gt;(Frontend Assets)\")]\n    end\nend\n\nsubgraph GitHub[\"GitHub Ecosystem\"]\n    GHCR[(\"GHCR&lt;br&gt;(Container Registry)\")]\n    Actions[(\"GitHub Actions\")]\nend\n\nUsers[(\"End Users\")] --&gt;|HTTPS| CF\nCF --&gt;|Static Content| S3\nCF --&gt;|API Requests| ALB\nALB --&gt; Backend1\nALB --&gt; Backend2\n\nBackend1 --&gt; RDS\nBackend2 --&gt; RDS\n\nActions --&gt;|Build/Push| GHCR\nGHCR --&gt;|Pull Images| EKS\n\nArgoCD -.-&gt;|Manages| Backend1\nArgoCD -.-&gt;|Manages| Backend2\nLBController -.-&gt;|Configures| ALB\n\nclassDef aws fill:#FF9900,color:#000\nclassDef github fill:#181717,color:#fff\nclassDef users fill:#0071bc,color:#fff\nclass AWS aws\nclass GitHub github\nclass Users users\n</code></pre>"},{"location":"release/docs/aws-infrastructure-guide/","title":"AWS Infrastructure Setup Guide for FastAPI Project","text":""},{"location":"release/docs/aws-infrastructure-guide/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Infrastructure Components</li> <li>Step-by-Step Deployment</li> <li>Security Considerations</li> <li>Monitoring Setup</li> <li>Maintenance Procedures</li> <li>Troubleshooting Guide</li> </ol>"},{"location":"release/docs/aws-infrastructure-guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>AWS Account with admin permissions</li> <li>Terraform v1.5+ installed</li> <li>kubectl configured</li> <li>GitHub repository with Argo CD configured</li> <li>GitHub PAT with <code>read:packages</code> scope</li> <li>Domain name for production environment</li> </ul>"},{"location":"release/docs/aws-infrastructure-guide/#infrastructure-components","title":"Infrastructure Components","text":""},{"location":"release/docs/aws-infrastructure-guide/#core-architecture","title":"Core Architecture","text":"<p>For an interactive version, view the Mermaid diagram file which can be rendered in any Mermaid-compatible viewer.</p>"},{"location":"release/docs/aws-infrastructure-guide/#step-by-step-deployment","title":"Step-by-Step Deployment","text":""},{"location":"release/docs/aws-infrastructure-guide/#1-terraform-infrastructure-setup","title":"1. Terraform Infrastructure Setup","text":"<pre><code># Initialize Terraform\nterraform init\n\n# Create infrastructure (GDPR-compliant EU region)\nterraform apply -var=\"environment=production\" -var=\"region=eu-central-1\"\n</code></pre>"},{"location":"release/docs/aws-infrastructure-guide/#2-configure-eks-cluster-access","title":"2. Configure EKS Cluster Access","text":"<pre><code>aws eks --region eu-central-1 update-kubeconfig --name fastapi-cluster\n</code></pre>"},{"location":"release/docs/aws-infrastructure-guide/#3-install-argo-cd","title":"3. Install Argo CD","text":"<pre><code>kubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n\n# Get initial admin password\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d\n</code></pre>"},{"location":"release/docs/aws-infrastructure-guide/#4-configure-ghcr-access","title":"4. Configure GHCR Access","text":"<pre><code># Create secret for image pulls\nkubectl create secret docker-registry ghcr-secret \\\n  --namespace=fastapi-production \\\n  --docker-server=ghcr.io \\\n  --docker-username=your-github-username \\\n  --docker-password=ghp_yourPATtoken\n</code></pre>"},{"location":"release/docs/aws-infrastructure-guide/#5-deploy-backend-via-argo-cd","title":"5. Deploy Backend via Argo CD","text":"<pre><code># backend-app.yaml\napiVersion: argoproj.io/v1alpha1\nkind: Application\nmetadata:\n  name: fastapi-backend\n  namespace: argocd\nspec:\n  project: default\n  source:\n    repoURL: https://github.com/datascientest-fastAPI-project-group-25/fastAPI-project-release\n    targetRevision: fix-for-argocdChart\n    path: charts/backend\n  destination:\n    server: https://kubernetes.default.svc\n    namespace: fastapi-production\n  syncPolicy:\n    automated:\n      selfHeal: true\n      prune: true\n</code></pre>"},{"location":"release/docs/aws-infrastructure-guide/#6-frontend-deployment","title":"6. Frontend Deployment","text":"<ol> <li>Configure GitHub Actions secrets:</li> <li><code>AWS_ACCESS_KEY_ID</code></li> <li><code>AWS_SECRET_ACCESS_KEY</code></li> <li><code>S3_BUCKET_NAME</code></li> <li> <p><code>CLOUDFRONT_DISTRIBUTION_ID</code></p> </li> <li> <p>Trigger frontend deployment by pushing to main branch</p> </li> </ol>"},{"location":"release/docs/aws-infrastructure-guide/#security-considerations","title":"Security Considerations","text":""},{"location":"release/docs/aws-infrastructure-guide/#iam-policies","title":"IAM Policies","text":"<pre><code># github-actions-policy.tf\ndata \"aws_iam_policy_document\" \"github_actions\" {\n  statement {\n    actions = [\n      \"s3:PutObject\",\n      \"s3:GetObject\",\n      \"s3:ListBucket\",\n      \"s3:DeleteObject\"\n    ]\n    resources = [\n      aws_s3_bucket.frontend.arn,\n      \"${aws_s3_bucket.frontend.arn}/*\"\n    ]\n  }\n\n  statement {\n    actions = [\n      \"cloudfront:CreateInvalidation\"\n    ]\n    resources = [aws_cloudfront_distribution.frontend.arn]\n  }\n}\n</code></pre>"},{"location":"release/docs/aws-infrastructure-guide/#monitoring-setup","title":"Monitoring Setup","text":""},{"location":"release/docs/aws-infrastructure-guide/#cloudwatch-alarms","title":"CloudWatch Alarms","text":"<pre><code>resource \"aws_cloudwatch_metric_alarm\" \"high_5xx_errors\" {\n  alarm_name          = \"High5xxErrors\"\n  comparison_operator = \"GreaterThanThreshold\"\n  evaluation_periods  = \"2\"\n  metric_name         = \"5xxErrorRate\"\n  namespace           = \"AWS/ApplicationELB\"\n  period              = \"300\"\n  statistic           = \"Sum\"\n  threshold           = \"10\"\n  alarm_description   = \"High 5xx errors from ALB\"\n  alarm_actions       = [aws_sns_topic.alerts.arn]\n}\n</code></pre>"},{"location":"release/docs/aws-infrastructure-guide/#maintenance-procedures","title":"Maintenance Procedures","text":""},{"location":"release/docs/aws-infrastructure-guide/#database-backups","title":"Database Backups","text":"<pre><code>resource \"aws_db_instance\" \"postgres\" {\n  backup_retention_period = 7\n  backup_window           = \"03:00-04:00\"\n  maintenance_window      = \"Sun:04:00-Sun:05:00\"\n}\n</code></pre>"},{"location":"release/docs/aws-infrastructure-guide/#troubleshooting-guide","title":"Troubleshooting Guide","text":"Issue Solution Image pull errors Verify GHCR secret exists in namespace 502 Bad Gateway Check EKS pod logs and ALB target group health Slow frontend loading Invalidate CloudFront cache"},{"location":"release/docs/container-strategy/","title":"Container Strategy for Deployment, ArgoCD, and Testing","text":""},{"location":"release/docs/container-strategy/#overview","title":"Overview","text":"<p>This document consolidates the container-based approach for all deployment, GitOps, and testing tooling, ensuring consistent execution across local development, CI environments, and production.</p>"},{"location":"release/docs/container-strategy/#container-architecture","title":"Container Architecture","text":""},{"location":"release/docs/container-strategy/#1-base-image-k8s-tools","title":"1. Base Image (<code>k8s-tools</code>)","text":"<ul> <li>Multi-arch support (amd64/arm64)</li> <li>Minimal size (~200MB)</li> <li>Tools:</li> <li>kubectl</li> <li>helm</li> <li>k3d</li> <li>git</li> <li>Non-root user</li> <li>Shared volume mounts for configs</li> </ul>"},{"location":"release/docs/container-strategy/#2-argocd-tools-image","title":"2. ArgoCD Tools Image","text":"<ul> <li>Extends <code>k8s-tools</code></li> <li>Adds:</li> <li>ArgoCD CLI</li> <li>GitHub CLI</li> <li>GPG, JWT tools</li> <li>Security:</li> <li>SSH, GPG key support</li> <li>Token-based auth</li> <li>Secret mounts (<code>/root/.ssh</code>, <code>/root/.gnupg</code>, <code>/root/.config/argocd</code>)</li> <li>Auth helpers:</li> <li>ArgoCD login script</li> <li>GitHub login script</li> <li>Healthcheck:   <pre><code>HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n  CMD argocd version --client || exit 1\n</code></pre></li> <li>Usage:</li> <li>Local: mount kubeconfig, secrets, run CLI</li> <li>CI: pass secrets as env vars, run sync commands</li> </ul>"},{"location":"release/docs/container-strategy/#3-test-image","title":"3. Test Image","text":"<ul> <li>Extends <code>k8s-tools</code></li> <li>Adds:</li> <li>Bun runtime</li> <li>kind (mock clusters)</li> <li>TypeScript, ts-node, node-dev</li> <li>Mock cluster setup:</li> <li>kind config with control-plane + worker nodes</li> <li>Bun test hooks to create/teardown clusters</li> <li>Healthcheck:   <pre><code>HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n  CMD bun --version &amp;&amp; kind version || exit 1\n</code></pre></li> <li>Volumes:</li> <li><code>/workspace/tests</code></li> <li><code>/workspace/coverage</code></li> <li>CI integration:</li> <li>Run Bun tests inside container</li> <li>Mount workspace, pass env vars</li> <li>Debugging:</li> <li>Node inspector on port 9229</li> <li>K8s debug tools</li> <li>Resource requirements:</li> <li>Min: 1 CPU, 2GB RAM</li> <li>Recommended: 2 CPU, 4GB RAM</li> </ul>"},{"location":"release/docs/container-strategy/#volume-mounts","title":"Volume Mounts","text":"<ul> <li><code>/root/.kube</code> - kubeconfig</li> <li><code>/root/.config/k3d</code> - k3d config</li> <li><code>/var/run/docker.sock</code> - Docker socket</li> <li><code>/root/.ssh</code>, <code>/root/.gnupg</code>, <code>/root/.config/argocd</code> - secrets</li> <li><code>/workspace/tests</code>, <code>/workspace/coverage</code> - test data</li> </ul>"},{"location":"release/docs/container-strategy/#network-configuration","title":"Network Configuration","text":"<ul> <li>Host network mode for k3d</li> <li>Expose:</li> <li>8080 (ArgoCD UI)</li> <li>6443 (Kubernetes API)</li> <li>9229 (Node debug)</li> </ul>"},{"location":"release/docs/container-strategy/#integration-with-typescript-tools","title":"Integration with TypeScript Tools","text":"<ul> <li>Container interface for running commands</li> <li>Example: create k3d cluster, deploy with helm, sync with ArgoCD</li> <li>Mock clusters for tests</li> </ul>"},{"location":"release/docs/container-strategy/#testing-strategy","title":"Testing Strategy","text":"<ul> <li>Unit tests: mock container interface</li> <li>Integration tests: run in container, real tool execution</li> <li>CI tests: multi-arch, containerized, automated</li> </ul>"},{"location":"release/docs/container-strategy/#security-considerations","title":"Security Considerations","text":"<ul> <li>Minimal images, non-root</li> <li>Secret management via env vars and mounts</li> <li>Regular updates and scanning</li> </ul>"},{"location":"release/docs/container-strategy/#implementation-roadmap","title":"Implementation Roadmap","text":"<ol> <li>Base image with k8s tools</li> <li>Extend with ArgoCD CLI and auth</li> <li>Extend with Bun, kind, test tools</li> <li>Integrate with TypeScript commands</li> <li>Automate in CI/CD</li> </ol>"},{"location":"release/docs/container-strategy/#usage-examples","title":"Usage Examples","text":"<ul> <li>Local dev: run containers with mounted configs</li> <li>CI: run containers with secrets as env vars</li> <li>Testing: run Bun tests inside test container</li> </ul>"},{"location":"release/docs/container-strategy/#notes","title":"Notes","text":"<p>This unified container strategy replaces previous separate specs for ArgoCD and test containers.</p>"},{"location":"release/docs/deployment-automation/","title":"Deployment Automation &amp; Argo CD Strategy","text":""},{"location":"release/docs/deployment-automation/#1-github-release-best-practices","title":"1. GitHub Release Best Practices","text":"<ul> <li>Create releases only for production-ready versions.</li> <li>Use tags, commit history, and Argo CD history for staging/non-prod traceability.</li> <li>This keeps releases meaningful, aligns with semantic versioning, and avoids clutter.</li> </ul>"},{"location":"release/docs/deployment-automation/#2-automated-helm-update-workflow","title":"2. Automated Helm Update Workflow","text":"<ul> <li>A Makefile target <code>update-image</code> accepts <code>TAG</code> and <code>ENV</code> parameters.</li> <li>It updates the appropriate Helm values file (<code>config/helm/staging.yaml</code> or <code>config/helm/production.yaml</code>) with the new Docker image tag.</li> <li>A GitHub Actions workflow:</li> <li>Can be triggered manually or on a schedule.</li> <li>Calls the Makefile target.</li> <li>Commits and pushes the updated Helm values.</li> <li>Creates a GitHub release only for production deployments.</li> </ul> <p>This ensures Helm values are automatically updated with the latest image tags immediately after new images are built and pushed, following tagging conventions and environment separation.</p>"},{"location":"release/docs/deployment-automation/#3-argo-cd-multi-environment-deployment-plan","title":"3. Argo CD Multi-Environment Deployment Plan","text":""},{"location":"release/docs/deployment-automation/#namespace-strategy","title":"Namespace Strategy","text":"<ul> <li>Development: <code>argocd-dev</code></li> <li>Staging: <code>argocd-stg</code></li> <li>Production: <code>argocd-prod</code></li> </ul>"},{"location":"release/docs/deployment-automation/#local-development-installation","title":"Local Development Installation","text":"<pre><code>helm repo add argo https://argoproj.github.io/argo-helm\nhelm repo update\n\nhelm install argocd argo/argo-cd \\\n  --namespace argocd-dev \\\n  --create-namespace \\\n  --values values-dev.yaml\n</code></pre>"},{"location":"release/docs/deployment-automation/#promotion-process","title":"Promotion Process","text":"<ul> <li>Test in <code>argocd-dev</code></li> <li>Promote to <code>argocd-stg</code> via GitOps</li> <li>Approve and promote to <code>argocd-prod</code></li> </ul>"},{"location":"release/docs/deployment-automation/#security","title":"Security","text":"<ul> <li>RBAC roles: readonly, developer, admin, SRE</li> <li>Use sealed-secrets or AWS Secrets Manager</li> <li>Environment-specific service accounts</li> </ul>"},{"location":"release/docs/deployment-automation/#monitoring-backup","title":"Monitoring &amp; Backup","text":"<ul> <li>Enable metrics, Prometheus, Grafana</li> <li>Backup configs, app definitions, RBAC</li> <li>Test restore procedures regularly</li> </ul>"},{"location":"release/docs/deployment-automation/#resource-requirements","title":"Resource Requirements","text":"<pre><code>server:\n  requests:\n    cpu: 200m\n    memory: 256Mi\nrepo-server:\n  requests:\n    cpu: 100m\n    memory: 256Mi\napplication-controller:\n  requests:\n    cpu: 200m\n    memory: 256Mi\n</code></pre>"},{"location":"release/docs/deployment-automation/#implementation-phases","title":"Implementation Phases","text":"<ol> <li>Local Dev: Setup <code>argocd-dev</code></li> <li>Staging: Setup <code>argocd-stg</code>, test promotion</li> <li>Production: Setup <code>argocd-prod</code>, enable backups and advanced security</li> </ol>"},{"location":"release/docs/dockerfile-spec/","title":"Base Dockerfile Specification","text":""},{"location":"release/docs/dockerfile-spec/#overview","title":"Overview","text":"<p>This document specifies the requirements and implementation details for our <code>k8s-tools</code> base container image. This image serves as the foundation for all our Kubernetes-related operations, ensuring consistent tooling across all environments.</p>"},{"location":"release/docs/dockerfile-spec/#base-image-selection","title":"Base Image Selection","text":"<p>Image: <code>alpine:3.19</code> Rationale: - Minimal footprint (~5MB base) - Official security updates - Multi-arch support (amd64/arm64) - Broad compatibility</p>"},{"location":"release/docs/dockerfile-spec/#required-tools","title":"Required Tools","text":""},{"location":"release/docs/dockerfile-spec/#core-tools","title":"Core Tools","text":"Tool Version Installation Method Verification kubectl Latest stable Official install script <code>kubectl version</code> helm Latest stable Alpine package <code>helm version</code> k3d Latest stable Official install script <code>k3d version</code> git Latest alpine Alpine package <code>git --version</code> docker CLI Latest stable Alpine package <code>docker --version</code>"},{"location":"release/docs/dockerfile-spec/#support-tools","title":"Support Tools","text":"<ul> <li>curl</li> <li>bash</li> <li>jq</li> <li>openssl</li> <li>ca-certificates</li> </ul>"},{"location":"release/docs/dockerfile-spec/#installation-layer-optimization","title":"Installation Layer Optimization","text":"<ol> <li> <p>System Packages Layer: <pre><code>RUN apk add --no-cache \\\n    bash \\\n    curl \\\n    git \\\n    jq \\\n    openssl \\\n    ca-certificates\n</code></pre></p> </li> <li> <p>Kubernetes Tools Layer: <pre><code># kubectl\nRUN curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\n\n# helm\nRUN curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash\n\n# k3d\nRUN wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash\n</code></pre></p> </li> </ol>"},{"location":"release/docs/dockerfile-spec/#security-considerations","title":"Security Considerations","text":""},{"location":"release/docs/dockerfile-spec/#user-configuration","title":"User Configuration","text":"<ul> <li>Create non-root user: <code>k8s-tools</code></li> <li>Set appropriate permissions for binary access</li> <li>Configure necessary group memberships</li> </ul>"},{"location":"release/docs/dockerfile-spec/#file-permissions","title":"File Permissions","text":"<ul> <li><code>/root/.kube</code>: 700</li> <li><code>/root/.config/k3d</code>: 700</li> <li>Binary permissions: 755</li> </ul>"},{"location":"release/docs/dockerfile-spec/#volume-mounts","title":"Volume Mounts","text":"<p>Specify standard mount points: <pre><code>VOLUME [\"/root/.kube\", \"/root/.config/k3d\", \"/var/run/docker.sock\"]\n</code></pre></p>"},{"location":"release/docs/dockerfile-spec/#environment-configuration","title":"Environment Configuration","text":""},{"location":"release/docs/dockerfile-spec/#environment-variables","title":"Environment Variables","text":"<pre><code>ENV KUBECONFIG=/root/.kube/config \\\n    HELM_CACHE_HOME=/root/.cache/helm \\\n    K3D_DATA_DIR=/root/.config/k3d \\\n    PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n</code></pre>"},{"location":"release/docs/dockerfile-spec/#working-directory","title":"Working Directory","text":"<pre><code>WORKDIR /workspace\n</code></pre>"},{"location":"release/docs/dockerfile-spec/#health-check","title":"Health Check","text":"<p>Include container health check: <pre><code>HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \\\n    CMD kubectl version --client || exit 1\n</code></pre></p>"},{"location":"release/docs/dockerfile-spec/#build-arguments","title":"Build Arguments","text":"<p>Support for tool version customization: <pre><code>ARG KUBECTL_VERSION=latest\nARG HELM_VERSION=latest\nARG K3D_VERSION=latest\n</code></pre></p>"},{"location":"release/docs/dockerfile-spec/#multi-stage-build","title":"Multi-Stage Build","text":"<ol> <li>Builder Stage:</li> <li>Download and verify binaries</li> <li> <p>Compile any necessary tools</p> </li> <li> <p>Final Stage:</p> </li> <li>Copy verified binaries</li> <li>Set up environment</li> <li>Configure permissions</li> </ol>"},{"location":"release/docs/dockerfile-spec/#testing-requirements","title":"Testing Requirements","text":"<p>Dockerfile must include tests for: 1. Tool installation verification 2. Permission checks 3. Volume mount validation 4. Network connectivity</p> <p>Test script location: <code>/usr/local/bin/test-tools</code></p>"},{"location":"release/docs/dockerfile-spec/#documentation","title":"Documentation","text":"<p>Include detailed comments in Dockerfile for: - Tool versions - Security considerations - Usage instructions - Volume mount requirements</p>"},{"location":"release/docs/dockerfile-spec/#ci-integration","title":"CI Integration","text":""},{"location":"release/docs/dockerfile-spec/#build-matrix","title":"Build Matrix","text":"<ul> <li>Platforms: linux/amd64, linux/arm64</li> <li>Alpine versions: 3.19, edge</li> <li>Tool version combinations</li> </ul>"},{"location":"release/docs/dockerfile-spec/#required-tests","title":"Required Tests","text":"<ol> <li>Build verification</li> <li>Tool functionality</li> <li>Security scanning</li> <li>Size optimization</li> </ol>"},{"location":"release/docs/dockerfile-spec/#implementation-notes","title":"Implementation Notes","text":"<ol> <li>Image Size Target:</li> <li>Base: &lt; 5MB</li> <li> <p>Final: &lt; 250MB</p> </li> <li> <p>Build Time Target:</p> </li> <li>Clean build: &lt; 5 minutes</li> <li> <p>Cached build: &lt; 1 minute</p> </li> <li> <p>Layer Optimization:</p> </li> <li>Minimize layer count</li> <li>Optimize caching</li> <li>Clean up temporary files</li> </ol>"},{"location":"release/docs/dockerfile-spec/#usage-examples","title":"Usage Examples","text":""},{"location":"release/docs/dockerfile-spec/#local-development","title":"Local Development","text":"<pre><code>docker run --rm -it \\\n  -v ~/.kube:/root/.kube \\\n  -v ~/.config/k3d:/root/.config/k3d \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  k8s-tools:latest\n</code></pre>"},{"location":"release/docs/dockerfile-spec/#ci-environment","title":"CI Environment","text":"<p>```bash docker run --rm \\   -v ${GITHUB_WORKSPACE}/.kube:/root/.kube \\   -v ${GITHUB_WORKSPACE}/k3d:/root/.config/k3d \\   k8s-tools:latest \\   kubectl version</p>"},{"location":"release/docs/external-variables/","title":"External Variable Requirements for ArgoCD Deployments","text":"<p>This document outlines the external variables required for deploying the <code>fastapi-app</code> using ArgoCD, particularly focusing on the differences between staging and production environments.</p>"},{"location":"release/docs/external-variables/#overview","title":"Overview","text":"<p>The production deployment relies on external variables injected during the Helm rendering process managed by ArgoCD. These variables allow for environment-specific configuration without hardcoding sensitive or environment-dependent values directly into the version-controlled Helm values files.</p> <p>The staging environment currently uses hardcoded values defined in <code>config/helm/values-stg.yaml</code> and does not require the external variables listed below.</p>"},{"location":"release/docs/external-variables/#production-environment-variables","title":"Production Environment Variables","text":"<p>The following variables must be provided externally for the production deployment (<code>argocd/application-prod.yaml</code> which uses <code>config/helm/values-prod.yaml</code>):</p> <ol> <li> <p><code>DOMAIN</code></p> <ul> <li>Purpose: Specifies the base domain name for the production environment.</li> <li>Usage in <code>values-prod.yaml</code>:<ul> <li><code>ingress.hostTemplate: \"dashboard.${DOMAIN}\"</code></li> <li><code>configMap.allowedOrigins: \"https://dashboard.${DOMAIN}\"</code></li> </ul> </li> <li>Expected Format: A valid domain name string (e.g., <code>mycompany.com</code>).</li> <li>Source/Injection: Provide via ArgoCD Application <code>spec.source.helm.parameters</code> or potentially as an environment variable accessible to the ArgoCD Application Controller if configured to pass them.</li> </ul> </li> <li> <p><code>DATABASE_URL</code></p> <ul> <li>Purpose: Provides the complete connection string for the application to connect to its production database.</li> <li>Usage in <code>values-prod.yaml</code>:<ul> <li><code>configMap.databaseUrl: \"${DATABASE_URL}\"</code></li> </ul> </li> <li>Expected Format: Standard database connection URL (e.g., <code>postgresql://user:password@host:port/dbname</code>).</li> <li>Source/Injection: This variable needs to be constructed and injected. The <code>values-prod.yaml</code> configures the External Secrets Operator (ESO) to fetch database credentials (<code>username</code>, <code>password</code>, <code>database</code> name) from the AWS Secrets Manager path <code>prod/postgres/credentials</code>. The final URL needs to be assembled using these credentials plus the correct database host (likely the Kubernetes service name, e.g., <code>postgres.fastapi-helm-prod.svc.cluster.local</code>) and port (<code>5432</code>). Inject the fully constructed URL via ArgoCD Application <code>spec.source.helm.parameters</code>.</li> </ul> </li> <li> <p><code>AWS_REGION</code></p> <ul> <li>Purpose: Specifies the AWS region for the External Secrets Operator (ESO) to fetch secrets from AWS Secrets Manager.</li> <li>Usage in <code>values-prod.yaml</code>:<ul> <li><code>externalSecrets.secretStores[0].region: ${AWS_REGION}</code></li> </ul> </li> <li>Expected Format: An AWS region code (e.g., <code>us-east-1</code>, <code>eu-central-1</code>).</li> <li>Source/Injection: Provide via ArgoCD Application <code>spec.source.helm.parameters</code> or potentially as an environment variable accessible to the ArgoCD Application Controller.</li> </ul> </li> </ol>"},{"location":"release/docs/external-variables/#external-secrets-operator-eso-dependency-production","title":"External Secrets Operator (ESO) Dependency (Production)","text":"<p>The production deployment relies heavily on the External Secrets Operator being installed and configured in the cluster. ESO must have the necessary permissions to access AWS Secrets Manager in the specified <code>AWS_REGION</code>.</p> <p>ESO is configured in <code>values-prod.yaml</code> to fetch data for the following Kubernetes Secrets:</p> <ul> <li><code>postgres-credentials</code>: Fetches <code>username</code>, <code>password</code>, <code>database</code> from AWS secret path <code>prod/postgres/credentials</code>. These values are primarily used to construct the <code>DATABASE_URL</code>.</li> <li><code>app-secrets</code>: Fetches <code>secretKey</code> from AWS secret path <code>prod/app/secrets</code>. This is referenced by <code>configMap.secretKeyRef</code>.</li> </ul> <p>Ensure the corresponding secrets exist in AWS Secrets Manager in the target region before deploying to production.</p>"},{"location":"release/docs/external-variables/#providing-variables-via-argocd","title":"Providing Variables via ArgoCD","text":"<p>The recommended way to provide these variables is through the <code>helm.parameters</code> section in the ArgoCD <code>Application</code> manifest (<code>argocd/application-prod.yaml</code>).</p> <p>Example snippet for <code>application-prod.yaml</code>:</p> <pre><code>spec:\n  source:\n    repoURL: ...\n    targetRevision: HEAD\n    path: charts/fastapi\n    helm:\n      valueFiles:\n        - ../../config/helm/values-prod.yaml\n      parameters:\n        - name: configMap.databaseUrl # Example for DATABASE_URL\n          value: \"postgresql://&lt;user&gt;:&lt;password&gt;@&lt;host&gt;:&lt;port&gt;/&lt;db&gt;\"\n        - name: ingress.hostTemplate # Example for DOMAIN usage\n          value: \"dashboard.yourdomain.com\"\n        - name: configMap.allowedOrigins # Example for DOMAIN usage\n          value: \"https://dashboard.yourdomain.com\"\n        - name: externalSecrets.secretStores[0].region # Example for AWS_REGION\n          value: \"eu-central-1\"\n</code></pre> <p>Note: The <code>DOMAIN</code> variable is used in multiple places (<code>ingress.hostTemplate</code>, <code>configMap.allowedOrigins</code>). You need to provide parameters that override the specific Helm values where <code>${DOMAIN}</code> is used, rather than providing <code>DOMAIN</code> itself as a parameter, unless the Helm templates are explicitly written to substitute <code>${DOMAIN}</code> from a single top-level parameter. Based on <code>values-prod.yaml</code>, direct overrides like the example above are necessary.</p>"},{"location":"release/docs/external-variables/#verification","title":"Verification","text":"<p>After deployment via ArgoCD:</p> <ol> <li>Check ConfigMap: Verify the <code>databaseUrl</code> and <code>allowedOrigins</code> have the correct, interpolated values.     <pre><code>kubectl get configmap fastapi-app-config -n fastapi-helm-prod -o yaml\n</code></pre></li> <li>Check Ingress: Ensure the <code>host</code> is set correctly.     <pre><code>kubectl get ingress fastapi-app-ingress -n fastapi-helm-prod -o yaml\n</code></pre></li> <li>Check ExternalSecrets: Verify that the <code>ExternalSecret</code> resources were created and their status is <code>SecretSynced</code>.     <pre><code>kubectl get externalsecrets -n fastapi-helm-prod\nkubectl describe externalsecret postgres-credentials -n fastapi-helm-prod\nkubectl describe externalsecret app-secrets -n fastapi-helm-prod\n</code></pre></li> <li>Check Secrets: Confirm that the corresponding Kubernetes <code>Secret</code> resources (<code>postgres-credentials</code>, <code>app-secrets</code>) were created by ESO.     <pre><code>kubectl get secret postgres-credentials -n fastapi-helm-prod\nkubectl get secret app-secrets -n fastapi-helm-prod\n</code></pre></li> <li>Check Application Logs: Inspect backend application logs for any errors related to database connection or configuration loading.</li> </ol>"},{"location":"release/docs/external-variables/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>ArgoCD Sync Errors: Check the ArgoCD UI for sync errors, often related to Helm rendering failures if parameters are missing or malformed.</li> <li>Incorrect Values in Resources: Double-check the <code>helm.parameters</code> in the ArgoCD Application manifest for typos or incorrect values.</li> <li>ESO Errors (<code>SecretSynced</code> False):<ul> <li>Verify ESO pods are running (<code>kubectl get pods -n external-secrets</code>).</li> <li>Check ESO pod logs for errors related to AWS authentication or secret fetching.</li> <li>Ensure the specified <code>AWS_REGION</code> is correct.</li> <li>Confirm the secrets exist in AWS Secrets Manager at the specified paths (<code>prod/postgres/credentials</code>, <code>prod/app/secrets</code>).</li> <li>Verify ESO has the correct IAM permissions in AWS.</li> </ul> </li> <li>Application Errors: If the application fails to start or function correctly, check its logs for specific errors related to database connection (<code>DATABASE_URL</code>), CORS (<code>allowedOrigins</code>), or missing secrets (<code>secretKey</code>).</li> </ul>"},{"location":"release/docs/infra-setup-guide/","title":"Infrastructure Setup Guide for FastAPI Project","text":""},{"location":"release/docs/infra-setup-guide/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Architecture Overview</li> <li>Prerequisites</li> <li>Infrastructure Components</li> <li>Step-by-Step Setup</li> <li>Security and Secrets Management</li> <li>Monitoring Setup</li> <li>Maintenance Procedures</li> <li>Troubleshooting Guide</li> </ol>"},{"location":"release/docs/infra-setup-guide/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TD\n    subgraph AWS[\"AWS eu-central-1 (GDPR Compliant)\"]\n        subgraph VPC[\"VPC (10.0.0.0/16)\"]\n            subgraph PublicSubnets[\"Public Subnets\"]\n                CF[(\"CloudFront&lt;br&gt;(CDN)\")]\n                ALB[(\"Application&lt;br&gt;Load Balancer\")]\n            end\n\n            subgraph PrivateSubnets[\"Private Subnets\"]\n                subgraph EKS[\"EKS Cluster\"]\n                    ArgoCD[[\"Argo CD\"]]\n                    Backend1[[\"Backend Pod\"]]\n                    Backend2[[\"Backend Pod\"]]\n                    ESO[[\"External Secrets&lt;br&gt;Operator\"]]\n                    LBController[[\"ALB&lt;br&gt;Controller\"]]\n                end\n\n                RDS[(\"RDS PostgreSQL&lt;br&gt;(Multi-AZ)\")]\n                SecretsManager[(\"AWS Secrets&lt;br&gt;Manager\")]\n            end\n\n            S3[(\"S3 Bucket&lt;br&gt;(Frontend Assets)\")]\n        end\n    end\n\n    subgraph GitHub[\"GitHub Ecosystem\"]\n        GHCR[(\"GHCR&lt;br&gt;(Container Registry)\")]\n        Actions[(\"GitHub Actions\")]\n    end\n\n    Users[(\"End Users\")] --&gt;|HTTPS| CF\n    CF --&gt;|Static Content| S3\n    CF --&gt;|API Requests| ALB\n    ALB --&gt; Backend1\n    ALB --&gt; Backend2\n\n    Backend1 --&gt; RDS\n    Backend2 --&gt; RDS\n\n    Actions --&gt;|Build/Push| GHCR\n    GHCR --&gt;|Pull Images| EKS\n\n    ArgoCD -.-&gt;|Manages| Backend1\n    ArgoCD -.-&gt;|Manages| Backend2\n    ESO -.-&gt;|Syncs| SecretsManager\n    LBController -.-&gt;|Configures| ALB</code></pre>"},{"location":"release/docs/infra-setup-guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>AWS Account with admin permissions</li> <li>Terraform v1.5+ installed</li> <li>kubectl configured</li> <li>GitHub repository with Argo CD configured</li> <li>GitHub PAT with <code>read:packages</code> scope</li> <li>Domain name for production environment</li> </ul>"},{"location":"release/docs/infra-setup-guide/#infrastructure-components","title":"Infrastructure Components","text":""},{"location":"release/docs/infra-setup-guide/#per-environment","title":"Per Environment","text":"Environment Cluster Name Namespace(s) VPC CIDR Dev <code>fastapi-eks-dev</code> <code>fastapi-helm-dev</code> 10.0.0.0/16 Staging <code>fastapi-eks-staging</code> <code>fastapi-helm-staging</code> 10.1.0.0/16 Production <code>fastapi-eks-prod</code> <code>fastapi-helm-prod</code> 10.2.0.0/16"},{"location":"release/docs/infra-setup-guide/#step-by-step-setup","title":"Step-by-Step Setup","text":""},{"location":"release/docs/infra-setup-guide/#1-vpc-and-eks-setup","title":"1. VPC and EKS Setup","text":"<pre><code># terraform/main.tf\nmodule \"vpc\" {\n  source = \"terraform-aws-modules/vpc/aws\"\n\n  name = \"fastapi-${var.environment}\"\n  cidr = var.vpc_cidr\n\n  azs             = [\"${var.region}a\", \"${var.region}b\"]\n  private_subnets = [\"10.0.1.0/24\", \"10.0.2.0/24\"]\n  public_subnets  = [\"10.0.101.0/24\", \"10.0.102.0/24\"]\n\n  enable_nat_gateway = true\n  single_nat_gateway = var.environment != \"production\"\n}\n\nmodule \"eks\" {\n  source = \"terraform-aws-modules/eks/aws\"\n\n  cluster_name    = \"fastapi-${var.environment}\"\n  cluster_version = \"1.28\"\n\n  vpc_id     = module.vpc.vpc_id\n  subnet_ids = module.vpc.private_subnets\n\n  enable_irsa = true\n}\n</code></pre>"},{"location":"release/docs/infra-setup-guide/#2-external-secrets-setup","title":"2. External Secrets Setup","text":"<pre><code># Install External Secrets Operator\nhelm repo add external-secrets https://charts.external-secrets.io\nhelm install external-secrets external-secrets/external-secrets -n external-secrets --create-namespace\n\n# Create SecretStore for AWS Secrets Manager\ncat &lt;&lt;EOF | kubectl apply -f -\napiVersion: external-secrets.io/v1beta1\nkind: ClusterSecretStore\nmetadata:\n  name: aws-secrets\nspec:\n  provider:\n    aws:\n      service: SecretsManager\n      region: eu-central-1\n      auth:\n        jwt:\n          serviceAccountRef:\n            name: external-secrets-sa\n            namespace: external-secrets\nEOF\n</code></pre>"},{"location":"release/docs/infra-setup-guide/#3-aws-secrets-structure","title":"3. AWS Secrets Structure","text":"<pre><code>production/\n  postgres/credentials\n  app/secrets\nstaging/\n  postgres/credentials\n  app/secrets\ndev/\n  postgres/credentials\n  app/secrets\n</code></pre>"},{"location":"release/docs/infra-setup-guide/#4-argo-cd-installation","title":"4. Argo CD Installation","text":"<pre><code>kubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml\n\n# Get initial admin password\nkubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d\n</code></pre>"},{"location":"release/docs/infra-setup-guide/#5-ghcr-access-setup","title":"5. GHCR Access Setup","text":"<pre><code>kubectl create secret docker-registry ghcr-secret \\\n  --namespace=fastapi-${ENV} \\\n  --docker-server=ghcr.io \\\n  --docker-username=your-github-username \\\n  --docker-password=ghp_yourPATtoken\n</code></pre>"},{"location":"release/docs/infra-setup-guide/#security-and-secrets-management","title":"Security and Secrets Management","text":""},{"location":"release/docs/infra-setup-guide/#iam-policies","title":"IAM Policies","text":"<pre><code># External Secrets Operator policy\ndata \"aws_iam_policy_document\" \"external_secrets\" {\n  statement {\n    actions = [\n      \"secretsmanager:GetSecretValue\",\n      \"secretsmanager:DescribeSecret\"\n    ]\n    resources = [\n      \"arn:aws:secretsmanager:${var.region}:${data.aws_caller_identity.current.account_id}:secret:${var.environment}/*\"\n    ]\n  }\n}\n\n# GitHub Actions policy for frontend deployment\ndata \"aws_iam_policy_document\" \"github_actions\" {\n  statement {\n    actions = [\n      \"s3:PutObject\",\n      \"s3:GetObject\",\n      \"s3:ListBucket\",\n      \"s3:DeleteObject\"\n    ]\n    resources = [\n      aws_s3_bucket.frontend.arn,\n      \"${aws_s3_bucket.frontend.arn}/*\"\n    ]\n  }\n\n  statement {\n    actions = [\"cloudfront:CreateInvalidation\"]\n    resources = [aws_cloudfront_distribution.frontend.arn]\n  }\n}\n</code></pre>"},{"location":"release/docs/infra-setup-guide/#monitoring-setup","title":"Monitoring Setup","text":""},{"location":"release/docs/infra-setup-guide/#cloudwatch-alarms","title":"CloudWatch Alarms","text":"<pre><code>resource \"aws_cloudwatch_metric_alarm\" \"high_5xx_errors\" {\n  alarm_name          = \"High5xxErrors-${var.environment}\"\n  comparison_operator = \"GreaterThanThreshold\"\n  evaluation_periods  = \"2\"\n  metric_name         = \"5xxErrorRate\"\n  namespace           = \"AWS/ApplicationELB\"\n  period              = \"300\"\n  statistic           = \"Sum\"\n  threshold           = \"10\"\n  alarm_description   = \"High 5xx errors from ALB\"\n  alarm_actions       = [aws_sns_topic.alerts.arn]\n}\n</code></pre>"},{"location":"release/docs/infra-setup-guide/#maintenance-procedures","title":"Maintenance Procedures","text":""},{"location":"release/docs/infra-setup-guide/#database-backups","title":"Database Backups","text":"<pre><code>resource \"aws_db_instance\" \"postgres\" {\n  identifier = \"fastapi-${var.environment}\"\n  backup_retention_period = 7\n  backup_window           = \"03:00-04:00\"\n  maintenance_window      = \"Sun:04:00-Sun:05:00\"\n\n  # Multi-AZ only for production\n  multi_az = var.environment == \"production\"\n}\n</code></pre>"},{"location":"release/docs/infra-setup-guide/#secret-rotation-schedule","title":"Secret Rotation Schedule","text":"<ul> <li>Database credentials: Every 90 days</li> <li>Application secrets: Every 180 days</li> <li>Access tokens: Every 30 days</li> </ul>"},{"location":"release/docs/infra-setup-guide/#troubleshooting-guide","title":"Troubleshooting Guide","text":"Issue Solution Image pull errors Verify GHCR secret exists and is valid in namespace 502 Bad Gateway Check EKS pod logs and ALB target group health Slow frontend loading Invalidate CloudFront cache Secret sync failures Check External Secrets Operator logs and IAM permissions Database connection issues Verify security group rules and credential secrets <p>For detailed deployment instructions, see Deployment Automation Guide.</p> <p>For release procedures, see Release Strategy Guide.</p>"},{"location":"release/docs/quick-start/","title":"Quick Start Guide","text":"<p>This guide provides a quick overview of how to use the release strategy implemented in this repository.</p>"},{"location":"release/docs/quick-start/#getting-started","title":"Getting Started","text":""},{"location":"release/docs/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Git</li> <li>kubectl</li> <li>Helm</li> <li>k3d (for local development)</li> <li>ArgoCD CLI</li> <li>GitHub CLI (gh)</li> </ul>"},{"location":"release/docs/quick-start/#setting-up-your-environment","title":"Setting Up Your Environment","text":"<ol> <li> <p>Clone the repository:    <pre><code>git clone https://github.com/datascientest-fastapi-project-group-25/fastAPI-project-release.git\ncd fastAPI-project-release\n</code></pre></p> </li> <li> <p>Set up a local Kubernetes cluster with ArgoCD:    <pre><code>./scripts/setup-local-k3d-argocd.sh\n</code></pre></p> </li> <li> <p>Set up ArgoCD API key and GitHub secrets:    <pre><code>./scripts/setup-argocd-github.sh\n</code></pre></p> </li> </ol>"},{"location":"release/docs/quick-start/#development-workflow","title":"Development Workflow","text":"<ol> <li> <p>Create a feature or fix branch:    <pre><code>git checkout -b feat/your-feature-name\n# or\ngit checkout -b fix/your-fix-name\n</code></pre></p> </li> <li> <p>Make your changes and commit them:    <pre><code>git add .\ngit commit -m \"Your commit message\"\n</code></pre></p> </li> <li> <p>Push your branch to GitHub:    <pre><code>git push -u origin feat/your-feature-name\n</code></pre></p> </li> <li> <p>A PR will be automatically created, and tests will run</p> </li> <li> <p>After review and approval, merge the PR to <code>main</code></p> </li> </ol>"},{"location":"release/docs/quick-start/#accessing-your-deployment","title":"Accessing Your Deployment","text":"<ol> <li> <p>Port-forward ArgoCD server:    <pre><code>kubectl port-forward svc/argocd-server -n argocd 8080:443\n</code></pre></p> </li> <li> <p>Access ArgoCD UI at https://localhost:8080</p> </li> <li>Username: admin</li> <li> <p>Password: (retrieved during setup)</p> </li> <li> <p>View your application deployment</p> </li> </ol>"},{"location":"release/docs/quick-start/#additional-resources","title":"Additional Resources","text":"<ul> <li>Full Release Strategy Documentation</li> <li>ArgoCD Documentation</li> <li>k3d Documentation</li> </ul>"},{"location":"release/docs/release-strategy/","title":"Release Strategy Documentation","text":"<p>This document provides a comprehensive guide to the release strategy implemented in this repository, including how to set up and use ArgoCD and k3d for local development and testing.</p>"},{"location":"release/docs/release-strategy/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Overview</li> <li>Branch Strategy</li> <li>PR Automation</li> <li>Environment Setup</li> <li>ArgoCD Integration</li> <li>Local Development with k3d</li> <li>Troubleshooting</li> </ol>"},{"location":"release/docs/release-strategy/#overview","title":"Overview","text":"<p>Our release strategy follows a streamlined approach with feature/fix branches that merge directly into the main branch. The process is automated using GitHub Actions workflows that handle PR creation, testing, and deployment preparation.</p>"},{"location":"release/docs/release-strategy/#key-components","title":"Key Components","text":"<ul> <li>PR Automation: Automatically creates PRs when pushing to feature/fix branches</li> <li>Helm and ArgoCD Testing: Validates Helm charts and ArgoCD configurations</li> <li>ArgoCD Integration: Manages deployments to different environments</li> <li>Local Development: Uses k3d for local Kubernetes development and testing</li> </ul>"},{"location":"release/docs/release-strategy/#branch-strategy","title":"Branch Strategy","text":"<p>We follow a simple branch strategy:</p> <ol> <li>Main Branch (<code>main</code>): The primary branch that represents the production-ready code</li> <li>Feature Branches (<code>feat/*</code>): Used for developing new features</li> <li>Fix Branches (<code>fix/*</code>): Used for bug fixes</li> </ol>"},{"location":"release/docs/release-strategy/#workflow","title":"Workflow","text":"<ol> <li>Create a feature or fix branch from <code>main</code></li> <li>Develop and test your changes locally</li> <li>Push your branch to GitHub, which automatically creates a PR</li> <li>The PR triggers tests and validation workflows</li> <li>After review and approval, merge the PR to <code>main</code></li> <li>Changes to <code>main</code> trigger deployment to staging</li> <li>After validation in staging, promote to production</li> </ol>"},{"location":"release/docs/release-strategy/#pr-automation","title":"PR Automation","text":"<p>When you push a feature or fix branch to GitHub, our PR automation workflow automatically creates a PR if one doesn't exist.</p>"},{"location":"release/docs/release-strategy/#how-to-use","title":"How to Use","text":"<ol> <li> <p>Create a feature or fix branch:    <pre><code>git checkout -b feat/your-feature-name\n# or\ngit checkout -b fix/your-fix-name\n</code></pre></p> </li> <li> <p>Make your changes and commit them:    <pre><code>git add .\ngit commit -m \"Your commit message\"\n</code></pre></p> </li> <li> <p>Push your branch to GitHub:    <pre><code>git push -u origin feat/your-feature-name\n</code></pre></p> </li> <li> <p>The PR automation workflow will create a PR automatically</p> </li> </ol>"},{"location":"release/docs/release-strategy/#environment-setup","title":"Environment Setup","text":"<p>We use two environments for our deployment pipeline:</p> <ol> <li>Staging: Pre-production environment for validation</li> <li>Production: Live environment</li> </ol>"},{"location":"release/docs/release-strategy/#configuration-files","title":"Configuration Files","text":"<ul> <li>Staging: <code>config/helm/staging.yaml</code> and <code>config/argocd/staging.yaml</code></li> <li>Production: <code>config/helm/production.yaml</code> and <code>config/argocd/production.yaml</code></li> </ul>"},{"location":"release/docs/release-strategy/#argocd-integration","title":"ArgoCD Integration","text":"<p>ArgoCD is used for GitOps-based deployments to our Kubernetes clusters.</p>"},{"location":"release/docs/release-strategy/#setting-up-argocd","title":"Setting Up ArgoCD","text":""},{"location":"release/docs/release-strategy/#prerequisites","title":"Prerequisites","text":"<ul> <li>kubectl</li> <li>argocd CLI</li> <li>GitHub CLI (gh)</li> </ul>"},{"location":"release/docs/release-strategy/#installation","title":"Installation","text":"<ol> <li> <p>Set up a Kubernetes cluster (see Local Development with k3d for local setup)</p> </li> <li> <p>Install ArgoCD:    <pre><code>./scripts/setup-local-k3d-argocd.sh\n</code></pre></p> </li> <li> <p>Set up ArgoCD API key and GitHub secrets:    <pre><code>./scripts/setup-argocd-github.sh\n</code></pre></p> </li> </ol>"},{"location":"release/docs/release-strategy/#manual-deployment","title":"Manual Deployment","text":"<p>To manually deploy using ArgoCD:</p> <ol> <li> <p>Login to ArgoCD:    <pre><code>argocd login &lt;argocd-server&gt; --username admin --password &lt;password&gt;\n</code></pre></p> </li> <li> <p>Create an application:    <pre><code>argocd app create &lt;app-name&gt; \\\n  --repo https://github.com/datascientest-fastapi-project-group-25/fastAPI-project-release.git \\\n  --path charts/fastapi \\\n  --dest-server https://kubernetes.default.svc \\\n  --dest-namespace &lt;namespace&gt; \\\n  --values ../../config/helm/&lt;environment&gt;.yaml\n</code></pre></p> </li> <li> <p>Sync the application:    <pre><code>argocd app sync &lt;app-name&gt;\n</code></pre></p> </li> </ol>"},{"location":"release/docs/release-strategy/#local-development-with-k3d","title":"Local Development with k3d","text":"<p>k3d is a lightweight Kubernetes distribution that runs in Docker, perfect for local development and testing.</p>"},{"location":"release/docs/release-strategy/#setting-up-k3d","title":"Setting Up k3d","text":"<ol> <li> <p>Install k3d:    <pre><code>brew install k3d\n</code></pre></p> </li> <li> <p>Create a k3d cluster with ArgoCD:    <pre><code>./scripts/setup-local-k3d-argocd.sh\n</code></pre></p> </li> <li> <p>Verify the cluster is running:    <pre><code>k3d cluster list\nkubectl get nodes\n</code></pre></p> </li> </ol>"},{"location":"release/docs/release-strategy/#testing-locally","title":"Testing Locally","text":"<ol> <li> <p>Port-forward ArgoCD server:    <pre><code>kubectl port-forward svc/argocd-server -n argocd 8080:443\n</code></pre></p> </li> <li> <p>Access ArgoCD UI at https://localhost:8080</p> </li> <li>Username: admin</li> <li> <p>Password: (retrieved during setup)</p> </li> <li> <p>Deploy your application:    <pre><code>argocd app create fastapi-test \\\n  --repo https://github.com/datascientest-fastapi-project-group-25/fastAPI-project-release.git \\\n  --path charts/fastapi \\\n  --dest-server https://kubernetes.default.svc \\\n  --dest-namespace fastapi-test \\\n  --values ../../config/helm/playground.yaml\n</code></pre></p> </li> </ol>"},{"location":"release/docs/release-strategy/#troubleshooting","title":"Troubleshooting","text":""},{"location":"release/docs/release-strategy/#common-issues","title":"Common Issues","text":""},{"location":"release/docs/release-strategy/#argocd-login-issues","title":"ArgoCD Login Issues","text":"<p>If you're having trouble logging in to ArgoCD:</p> <p><pre><code># Reset admin password\nkubectl -n argocd patch secret argocd-secret \\\n  -p '{\"stringData\": {\n    \"admin.password\": \"$2a$10$mivhwttXM0U5eBrZGtAG8.VSRL1l9cZNAmaSaqotIzXRBRwID1NT.\",\n    \"admin.passwordMtime\": \"'$(date +%FT%T%Z)'\"\n  }}'\n</code></pre> This resets the password to \"admin\".</p>"},{"location":"release/docs/release-strategy/#k3d-cluster-creation-issues","title":"k3d Cluster Creation Issues","text":"<p>If you're having trouble creating a k3d cluster:</p> <pre><code># Check if there are any existing clusters\nk3d cluster list\n\n# Delete existing cluster if needed\nk3d cluster delete &lt;cluster-name&gt;\n\n# Try creating with a different port\nk3d cluster create argocd-cluster --servers 1 --agents 1 --port 8082:80@loadbalancer\n</code></pre>"},{"location":"release/docs/release-strategy/#github-actions-workflow-failures","title":"GitHub Actions Workflow Failures","text":"<p>If GitHub Actions workflows are failing:</p> <ol> <li>Check the workflow logs for specific errors</li> <li>Verify that the required secrets are set up correctly</li> <li>Make sure your Helm charts are valid</li> <li>Ensure that the ArgoCD configuration is correct</li> </ol> <p>For more help, please open an issue on the repository.</p>"},{"location":"release/docs/tagging-strategy/","title":"Image Tagging Strategy","text":""},{"location":"release/docs/tagging-strategy/#overview","title":"Overview","text":"<p>This document outlines the tagging strategy used for container images across different environments.</p>"},{"location":"release/docs/tagging-strategy/#production-environment","title":"Production Environment","text":"<ul> <li>Uses semantic versioning tags (e.g., <code>v1.2.3</code>)</li> <li>Tags are immutable</li> <li>No 'latest' tag is used to ensure deployment stability</li> <li>Example: <code>ghcr.io/org/app:v1.2.3</code></li> </ul>"},{"location":"release/docs/tagging-strategy/#staging-environment","title":"Staging Environment","text":"<ul> <li>Uses dual tagging approach:</li> <li>Semantic version tag (e.g., <code>v1.2.3-rc1</code>)</li> <li>Rolling <code>stg-latest</code> tag</li> <li>Rationale:</li> <li>The semantic version tag provides traceability and rollback capability</li> <li>The <code>stg-latest</code> tag enables continuous deployment workflows</li> <li>Using both ensures we can track exact versions while maintaining deployment automation</li> </ul>"},{"location":"release/docs/tagging-strategy/#staging-tag-examples","title":"Staging Tag Examples","text":"<pre><code>ghcr.io/org/app:v1.2.3-rc1  # Immutable tag for traceability\nghcr.io/org/app:stg-latest  # Rolling tag for CD workflows\n</code></pre>"},{"location":"release/docs/tagging-strategy/#best-practices","title":"Best Practices","text":"<ol> <li>Production Deployments</li> <li>Always use specific version tags</li> <li>Never use floating tags like 'latest'</li> <li> <p>Tag format: <code>vX.Y.Z</code></p> </li> <li> <p>Staging Deployments</p> </li> <li>Use both version tags and <code>stg-latest</code></li> <li>Version tag format: <code>vX.Y.Z-rcN</code></li> <li> <p>Automated workflows update <code>stg-latest</code> on successful builds</p> </li> <li> <p>Version Control</p> </li> <li>Tags are created from release branches</li> <li>Each release gets a unique semantic version</li> <li>Release candidates are suffixed with <code>-rcN</code></li> </ol>"},{"location":"release/docs/tagging-strategy/#implementation","title":"Implementation","text":"<p>The tagging strategy is implemented in the following files: - <code>.github/workflows/update-helm.yaml</code>: Handles deployment updates - <code>charts/fastapi/values.yaml</code>: Defines image configuration - <code>scripts/get_release_vars.sh</code>: Manages tag generation</p>"},{"location":"release/docs/troubleshooting/","title":"Troubleshooting Guide","text":"<p>This guide provides solutions to common issues you might encounter when using the release strategy, ArgoCD, and k3d.</p>"},{"location":"release/docs/troubleshooting/#github-actions-workflow-issues","title":"GitHub Actions Workflow Issues","text":""},{"location":"release/docs/troubleshooting/#pr-automation-workflow-fails","title":"PR Automation Workflow Fails","text":"<p>Issue: The PR automation workflow fails when pushing a branch.</p> <p>Solution: 1. Check if you have the correct branch naming convention (<code>feat/*</code> or <code>fix/*</code>) 2. Verify that the GitHub token has the necessary permissions 3. Create the PR manually if needed:    <pre><code>gh pr create --title \"Your PR title\" --body \"Your PR description\" --base main\n</code></pre></p>"},{"location":"release/docs/troubleshooting/#helm-and-argocd-tests-workflow-fails","title":"Helm and ArgoCD Tests Workflow Fails","text":"<p>Issue: The Helm and ArgoCD tests workflow fails.</p> <p>Solution: 1. Check if your Helm charts are valid:    <pre><code>helm lint ./charts/fastapi -f ./config/helm/staging.yaml\n</code></pre> 2. Verify that the ArgoCD configuration is correct:    <pre><code>kubectl apply --dry-run=client -f config/argocd/staging.yaml\n</code></pre> 3. Make sure all required files have newlines at the end 4. Check for YAML formatting issues</p>"},{"location":"release/docs/troubleshooting/#argocd-issues","title":"ArgoCD Issues","text":""},{"location":"release/docs/troubleshooting/#cannot-login-to-argocd","title":"Cannot Login to ArgoCD","text":"<p>Issue: Unable to login to ArgoCD.</p> <p>Solution: 1. Reset the admin password:    <pre><code>kubectl -n argocd patch secret argocd-initial-admin-secret \\\n  -p '{\"stringData\": {\"password\": \"admin\"}}'\n</code></pre> 2. Restart the ArgoCD server:    <pre><code>kubectl rollout restart deployment argocd-server -n argocd\n</code></pre> 3. Try logging in again with username <code>admin</code> and password <code>admin</code></p>"},{"location":"release/docs/troubleshooting/#cannot-generate-argocd-api-key","title":"Cannot Generate ArgoCD API Key","text":"<p>Issue: Unable to generate an ArgoCD API key.</p> <p>Solution: 1. Update the ArgoCD configuration to enable API key generation:    <pre><code>kubectl patch configmap argocd-cm -n argocd --type merge -p '{\"data\": {\"accounts.admin\": \"apiKey\"}}'\n</code></pre> 2. Restart the ArgoCD server:    <pre><code>kubectl rollout restart deployment argocd-server -n argocd\n</code></pre> 3. Try generating the API key again:    <pre><code>argocd account generate-token --account admin\n</code></pre></p>"},{"location":"release/docs/troubleshooting/#application-not-syncing","title":"Application Not Syncing","text":"<p>Issue: ArgoCD application is not syncing.</p> <p>Solution: 1. Check the application status:    <pre><code>argocd app get &lt;app-name&gt;\n</code></pre> 2. Check for sync errors:    <pre><code>argocd app logs &lt;app-name&gt;\n</code></pre> 3. Force a sync:    <pre><code>argocd app sync &lt;app-name&gt; --force\n</code></pre></p>"},{"location":"release/docs/troubleshooting/#k3d-issues","title":"k3d Issues","text":""},{"location":"release/docs/troubleshooting/#cluster-creation-fails","title":"Cluster Creation Fails","text":"<p>Issue: k3d cluster creation fails.</p> <p>Solution: 1. Check if there are any existing clusters:    <pre><code>k3d cluster list\n</code></pre> 2. Delete existing cluster if needed:    <pre><code>k3d cluster delete &lt;cluster-name&gt;\n</code></pre> 3. Try creating with a different port:    <pre><code>k3d cluster create argocd-cluster --servers 1 --agents 1 --port 8082:80@loadbalancer\n</code></pre></p>"},{"location":"release/docs/troubleshooting/#port-conflict","title":"Port Conflict","text":"<p>Issue: Port conflict when creating a k3d cluster.</p> <p>Solution: 1. Find which process is using the port:    <pre><code>lsof -i :&lt;port&gt;\n</code></pre> 2. Stop the process or use a different port:    <pre><code>k3d cluster create argocd-cluster --servers 1 --agents 1 --port &lt;different-port&gt;:80@loadbalancer\n</code></pre></p>"},{"location":"release/docs/troubleshooting/#helm-chart-issues","title":"Helm Chart Issues","text":""},{"location":"release/docs/troubleshooting/#helm-chart-validation-fails","title":"Helm Chart Validation Fails","text":"<p>Issue: Helm chart validation fails.</p> <p>Solution: 1. Check the chart for syntax errors:    <pre><code>helm lint ./charts/fastapi\n</code></pre> 2. Validate the values files:    <pre><code>helm lint ./charts/fastapi -f ./config/helm/staging.yaml\n</code></pre> 3. Check for common issues:    - Missing newlines at the end of files    - Invalid YAML formatting    - Type mismatches in values</p>"},{"location":"release/docs/troubleshooting/#chart-installation-fails","title":"Chart Installation Fails","text":"<p>Issue: Helm chart installation fails.</p> <p>Solution: 1. Check the chart dependencies:    <pre><code>helm dependency update ./charts/fastapi\n</code></pre> 2. Validate the chart:    <pre><code>helm template ./charts/fastapi -f ./config/helm/staging.yaml\n</code></pre> 3. Check for resource conflicts or missing resources</p>"},{"location":"release/docs/troubleshooting/#need-more-help","title":"Need More Help?","text":"<p>If you're still experiencing issues, please open an issue on the repository or contact the team for assistance.</p>"},{"location":"release/logging/","title":"Release Logging","text":""},{"location":"release/logging/#overview","title":"Overview","text":"<p>This directory contains the logging configuration for the release process. The logging system captures logs from all components involved in the release process, including the CI/CD pipeline, Kubernetes, and the application itself.</p>"},{"location":"release/logging/#components","title":"Components","text":"<ul> <li>Elasticsearch: Stores and indexes logs</li> <li>Kibana: Visualizes logs and provides dashboards</li> <li>Fluentd: Collects and processes logs from Kubernetes</li> <li>Filebeat: Ships logs from the CI/CD pipeline to Elasticsearch</li> </ul>"},{"location":"release/logging/#log-sources","title":"Log Sources","text":"<p>The following log sources are captured:</p> <ul> <li>CI/CD pipeline logs</li> <li>Kubernetes cluster logs</li> <li>Container logs</li> <li>Application logs</li> <li>Database logs</li> <li>Ingress controller logs</li> </ul>"},{"location":"release/logging/#log-format","title":"Log Format","text":"<p>Logs are formatted as JSON with the following fields:</p> <ul> <li><code>@timestamp</code>: ISO 8601 timestamp</li> <li><code>log.level</code>: Log level</li> <li><code>message</code>: Log message</li> <li><code>kubernetes.namespace</code>: Kubernetes namespace</li> <li><code>kubernetes.pod.name</code>: Kubernetes pod name</li> <li><code>kubernetes.container.name</code>: Kubernetes container name</li> <li><code>kubernetes.node.name</code>: Kubernetes node name</li> <li><code>labels</code>: Kubernetes labels</li> <li><code>annotations</code>: Kubernetes annotations</li> </ul>"},{"location":"release/logging/#setup","title":"Setup","text":"<p>The logging system is automatically set up during the release process. You can also set it up manually:</p> <pre><code>helm install logging ./charts/logging\n</code></pre>"},{"location":"release/logging/#accessing-logs","title":"Accessing Logs","text":"<p>Once the logging system is running, you can access the logs at:</p> <ul> <li>Kibana: <code>https://kibana.&lt;your-domain&gt;</code></li> </ul>"},{"location":"release/logging/#configuration","title":"Configuration","text":"<p>The logging configuration can be customized by editing the following files:</p> <ul> <li><code>charts/logging/values.yaml</code>: Helm chart values</li> <li><code>charts/logging/templates/*.yaml</code>: Kubernetes resources</li> <li><code>dashboards/*.ndjson</code>: Kibana dashboards</li> </ul>"},{"location":"release/logging/#integration-with-monitoring","title":"Integration with Monitoring","text":"<p>The logging system is integrated with the monitoring system. Metrics about log volume and errors are available in the monitoring dashboards.</p>"},{"location":"release/monitoring/","title":"Release Monitoring","text":""},{"location":"release/monitoring/#overview","title":"Overview","text":"<p>This directory contains the monitoring configuration for the release process. The monitoring system tracks the deployment status and performance of the application across different environments.</p>"},{"location":"release/monitoring/#components","title":"Components","text":"<ul> <li>Prometheus: Collects and stores metrics</li> <li>Grafana: Visualizes metrics and provides dashboards</li> <li>Alertmanager: Manages alerts and notifications</li> <li>Kube State Metrics: Provides Kubernetes-specific metrics</li> <li>Node Exporter: Provides host-level metrics</li> </ul>"},{"location":"release/monitoring/#metrics","title":"Metrics","text":"<p>The following metrics are collected:</p> <ul> <li>Deployment status</li> <li>Pod status</li> <li>Container resource usage</li> <li>Node resource usage</li> <li>Service availability</li> <li>Ingress traffic</li> <li>Database performance</li> <li>Application performance</li> </ul>"},{"location":"release/monitoring/#dashboards","title":"Dashboards","text":"<p>The following dashboards are available:</p> <ul> <li>Release Overview: General release metrics</li> <li>Deployment Status: Detailed deployment metrics</li> <li>Kubernetes: Kubernetes cluster metrics</li> <li>Node Status: Host-level metrics</li> <li>Application Performance: Application-specific metrics</li> </ul>"},{"location":"release/monitoring/#setup","title":"Setup","text":"<p>The monitoring system is automatically set up during the release process. You can also set it up manually:</p> <pre><code>helm install monitoring ./charts/monitoring\n</code></pre>"},{"location":"release/monitoring/#accessing-dashboards","title":"Accessing Dashboards","text":"<p>Once the monitoring system is running, you can access the dashboards at:</p> <ul> <li>Grafana: <code>https://grafana.&lt;your-domain&gt;</code></li> <li>Prometheus: <code>https://prometheus.&lt;your-domain&gt;</code></li> </ul>"},{"location":"release/monitoring/#configuration","title":"Configuration","text":"<p>The monitoring configuration can be customized by editing the following files:</p> <ul> <li><code>charts/monitoring/values.yaml</code>: Helm chart values</li> <li><code>charts/monitoring/templates/*.yaml</code>: Kubernetes resources</li> <li><code>dashboards/*.json</code>: Grafana dashboards</li> </ul>"},{"location":"release/monitoring/#integration-with-cicd","title":"Integration with CI/CD","text":"<p>The monitoring system is integrated with the CI/CD pipeline. Deployment metrics are automatically collected and visualized in the dashboards.</p>"}]}